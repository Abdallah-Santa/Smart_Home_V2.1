
Smart_Home_V2.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000044c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d0  00800060  000044c8  0000455c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800130  00800130  0000462c  2**0
                  ALLOC
  3 .stab         00003750  00000000  00000000  0000462c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e76  00000000  00000000  00007d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00008bf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00008d52  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00008ee1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000af26  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000c027  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000cfac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000d12c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000d3ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000dc7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 41 14 	jmp	0x2882	; 0x2882 <__vector_1>
       8:	0c 94 1f 15 	jmp	0x2a3e	; 0x2a3e <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 a7 16 	jmp	0x2d4e	; 0x2d4e <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 90 16 	jmp	0x2d20	; 0x2d20 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ec       	ldi	r30, 0xC8	; 200
      68:	f4 e4       	ldi	r31, 0x44	; 68
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 33       	cpi	r26, 0x30	; 48
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e3       	ldi	r26, 0x30	; 48
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 34       	cpi	r26, 0x47	; 71
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d7 17 	call	0x2fae	; 0x2fae <main>
      8a:	0c 94 62 22 	jmp	0x44c4	; 0x44c4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e2       	ldi	r26, 0x28	; 40
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 47 22 	jmp	0x448e	; 0x448e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 37 22 	jmp	0x446e	; 0x446e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 53 22 	jmp	0x44a6	; 0x44a6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 37 22 	jmp	0x446e	; 0x446e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 53 22 	jmp	0x44a6	; 0x44a6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e2       	ldi	r24, 0x28	; 40
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 47 22 	jmp	0x448e	; 0x448e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 33 22 	jmp	0x4466	; 0x4466 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	68 e2       	ldi	r22, 0x28	; 40
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 4f 22 	jmp	0x449e	; 0x449e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 37 22 	jmp	0x446e	; 0x446e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 53 22 	jmp	0x44a6	; 0x44a6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 37 22 	jmp	0x446e	; 0x446e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 53 22 	jmp	0x44a6	; 0x44a6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 37 22 	jmp	0x446e	; 0x446e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 53 22 	jmp	0x44a6	; 0x44a6 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 3b 22 	jmp	0x4476	; 0x4476 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 57 22 	jmp	0x44ae	; 0x44ae <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <HLCD_VoidSendChar>:
#include "HLCD_Config.h"
#include <util/delay.h>
 

void HLCD_VoidSendChar(u8 Copy_U8Data)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	ab 97       	sbiw	r28, 0x2b	; 43
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	8b a7       	std	Y+43, r24	; 0x2b
	 /*Set Rs=1 , to send data*/
    MDIO_VoidSetPinValue(HLCD_Rs_Port,0,1);
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	60 e0       	ldi	r22, 0x00	; 0
     cb8:	41 e0       	ldi	r20, 0x01	; 1
     cba:	0e 94 11 12 	call	0x2422	; 0x2422 <MDIO_VoidSetPinValue>
	
	/*Set Rw=0 , to write on LCD*/
	MDIO_VoidSetPinValue(HLCD_Rw_Port,1,0); 
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	40 e0       	ldi	r20, 0x00	; 0
     cc4:	0e 94 11 12 	call	0x2422	; 0x2422 <MDIO_VoidSetPinValue>
	
	 /*Write Data On LCD*/
	MDIO_VoidSetPortValue(HLCD_DataPort,Copy_U8Data);
     cc8:	82 e0       	ldi	r24, 0x02	; 2
     cca:	6b a5       	ldd	r22, Y+43	; 0x2b
     ccc:	0e 94 52 13 	call	0x26a4	; 0x26a4 <MDIO_VoidSetPortValue>
	
	/*set low to enable*/
	MDIO_VoidSetPinValue(HLCD_EN_Port,2,0); 
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	62 e0       	ldi	r22, 0x02	; 2
     cd4:	40 e0       	ldi	r20, 0x00	; 0
     cd6:	0e 94 11 12 	call	0x2422	; 0x2422 <MDIO_VoidSetPinValue>
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	a0 e8       	ldi	r26, 0x80	; 128
     ce0:	bf e3       	ldi	r27, 0x3F	; 63
     ce2:	8f a3       	std	Y+39, r24	; 0x27
     ce4:	98 a7       	std	Y+40, r25	; 0x28
     ce6:	a9 a7       	std	Y+41, r26	; 0x29
     ce8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cea:	6f a1       	ldd	r22, Y+39	; 0x27
     cec:	78 a5       	ldd	r23, Y+40	; 0x28
     cee:	89 a5       	ldd	r24, Y+41	; 0x29
     cf0:	9a a5       	ldd	r25, Y+42	; 0x2a
     cf2:	20 e0       	ldi	r18, 0x00	; 0
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	4a ef       	ldi	r20, 0xFA	; 250
     cf8:	54 e4       	ldi	r21, 0x44	; 68
     cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cfe:	dc 01       	movw	r26, r24
     d00:	cb 01       	movw	r24, r22
     d02:	8b a3       	std	Y+35, r24	; 0x23
     d04:	9c a3       	std	Y+36, r25	; 0x24
     d06:	ad a3       	std	Y+37, r26	; 0x25
     d08:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     d0a:	6b a1       	ldd	r22, Y+35	; 0x23
     d0c:	7c a1       	ldd	r23, Y+36	; 0x24
     d0e:	8d a1       	ldd	r24, Y+37	; 0x25
     d10:	9e a1       	ldd	r25, Y+38	; 0x26
     d12:	20 e0       	ldi	r18, 0x00	; 0
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	40 e8       	ldi	r20, 0x80	; 128
     d18:	5f e3       	ldi	r21, 0x3F	; 63
     d1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     d1e:	88 23       	and	r24, r24
     d20:	2c f4       	brge	.+10     	; 0xd2c <HLCD_VoidSendChar+0x8e>
		__ticks = 1;
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	9a a3       	std	Y+34, r25	; 0x22
     d28:	89 a3       	std	Y+33, r24	; 0x21
     d2a:	3f c0       	rjmp	.+126    	; 0xdaa <HLCD_VoidSendChar+0x10c>
	else if (__tmp > 65535)
     d2c:	6b a1       	ldd	r22, Y+35	; 0x23
     d2e:	7c a1       	ldd	r23, Y+36	; 0x24
     d30:	8d a1       	ldd	r24, Y+37	; 0x25
     d32:	9e a1       	ldd	r25, Y+38	; 0x26
     d34:	20 e0       	ldi	r18, 0x00	; 0
     d36:	3f ef       	ldi	r19, 0xFF	; 255
     d38:	4f e7       	ldi	r20, 0x7F	; 127
     d3a:	57 e4       	ldi	r21, 0x47	; 71
     d3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     d40:	18 16       	cp	r1, r24
     d42:	4c f5       	brge	.+82     	; 0xd96 <HLCD_VoidSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d44:	6f a1       	ldd	r22, Y+39	; 0x27
     d46:	78 a5       	ldd	r23, Y+40	; 0x28
     d48:	89 a5       	ldd	r24, Y+41	; 0x29
     d4a:	9a a5       	ldd	r25, Y+42	; 0x2a
     d4c:	20 e0       	ldi	r18, 0x00	; 0
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	40 e2       	ldi	r20, 0x20	; 32
     d52:	51 e4       	ldi	r21, 0x41	; 65
     d54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d58:	dc 01       	movw	r26, r24
     d5a:	cb 01       	movw	r24, r22
     d5c:	bc 01       	movw	r22, r24
     d5e:	cd 01       	movw	r24, r26
     d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d64:	dc 01       	movw	r26, r24
     d66:	cb 01       	movw	r24, r22
     d68:	9a a3       	std	Y+34, r25	; 0x22
     d6a:	89 a3       	std	Y+33, r24	; 0x21
     d6c:	0f c0       	rjmp	.+30     	; 0xd8c <HLCD_VoidSendChar+0xee>
     d6e:	88 ec       	ldi	r24, 0xC8	; 200
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	98 a3       	std	Y+32, r25	; 0x20
     d74:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d76:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d78:	98 a1       	ldd	r25, Y+32	; 0x20
     d7a:	01 97       	sbiw	r24, 0x01	; 1
     d7c:	f1 f7       	brne	.-4      	; 0xd7a <HLCD_VoidSendChar+0xdc>
     d7e:	98 a3       	std	Y+32, r25	; 0x20
     d80:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d82:	89 a1       	ldd	r24, Y+33	; 0x21
     d84:	9a a1       	ldd	r25, Y+34	; 0x22
     d86:	01 97       	sbiw	r24, 0x01	; 1
     d88:	9a a3       	std	Y+34, r25	; 0x22
     d8a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d8c:	89 a1       	ldd	r24, Y+33	; 0x21
     d8e:	9a a1       	ldd	r25, Y+34	; 0x22
     d90:	00 97       	sbiw	r24, 0x00	; 0
     d92:	69 f7       	brne	.-38     	; 0xd6e <HLCD_VoidSendChar+0xd0>
     d94:	14 c0       	rjmp	.+40     	; 0xdbe <HLCD_VoidSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d96:	6b a1       	ldd	r22, Y+35	; 0x23
     d98:	7c a1       	ldd	r23, Y+36	; 0x24
     d9a:	8d a1       	ldd	r24, Y+37	; 0x25
     d9c:	9e a1       	ldd	r25, Y+38	; 0x26
     d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     da2:	dc 01       	movw	r26, r24
     da4:	cb 01       	movw	r24, r22
     da6:	9a a3       	std	Y+34, r25	; 0x22
     da8:	89 a3       	std	Y+33, r24	; 0x21
     daa:	89 a1       	ldd	r24, Y+33	; 0x21
     dac:	9a a1       	ldd	r25, Y+34	; 0x22
     dae:	9e 8f       	std	Y+30, r25	; 0x1e
     db0:	8d 8f       	std	Y+29, r24	; 0x1d
     db2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     db4:	9e 8d       	ldd	r25, Y+30	; 0x1e
     db6:	01 97       	sbiw	r24, 0x01	; 1
     db8:	f1 f7       	brne	.-4      	; 0xdb6 <HLCD_VoidSendChar+0x118>
     dba:	9e 8f       	std	Y+30, r25	; 0x1e
     dbc:	8d 8f       	std	Y+29, r24	; 0x1d
	/*wait 1 ms*/
	
	_delay_ms(1); 
	
	 /*set Hi to enable*/
	MDIO_VoidSetPinValue(HLCD_EN_Port,2,1);
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	62 e0       	ldi	r22, 0x02	; 2
     dc2:	41 e0       	ldi	r20, 0x01	; 1
     dc4:	0e 94 11 12 	call	0x2422	; 0x2422 <MDIO_VoidSetPinValue>
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	a0 e8       	ldi	r26, 0x80	; 128
     dce:	bf e3       	ldi	r27, 0x3F	; 63
     dd0:	89 8f       	std	Y+25, r24	; 0x19
     dd2:	9a 8f       	std	Y+26, r25	; 0x1a
     dd4:	ab 8f       	std	Y+27, r26	; 0x1b
     dd6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dd8:	69 8d       	ldd	r22, Y+25	; 0x19
     dda:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ddc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dde:	9c 8d       	ldd	r25, Y+28	; 0x1c
     de0:	20 e0       	ldi	r18, 0x00	; 0
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	4a ef       	ldi	r20, 0xFA	; 250
     de6:	54 e4       	ldi	r21, 0x44	; 68
     de8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dec:	dc 01       	movw	r26, r24
     dee:	cb 01       	movw	r24, r22
     df0:	8d 8b       	std	Y+21, r24	; 0x15
     df2:	9e 8b       	std	Y+22, r25	; 0x16
     df4:	af 8b       	std	Y+23, r26	; 0x17
     df6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     df8:	6d 89       	ldd	r22, Y+21	; 0x15
     dfa:	7e 89       	ldd	r23, Y+22	; 0x16
     dfc:	8f 89       	ldd	r24, Y+23	; 0x17
     dfe:	98 8d       	ldd	r25, Y+24	; 0x18
     e00:	20 e0       	ldi	r18, 0x00	; 0
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	40 e8       	ldi	r20, 0x80	; 128
     e06:	5f e3       	ldi	r21, 0x3F	; 63
     e08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e0c:	88 23       	and	r24, r24
     e0e:	2c f4       	brge	.+10     	; 0xe1a <HLCD_VoidSendChar+0x17c>
		__ticks = 1;
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	9c 8b       	std	Y+20, r25	; 0x14
     e16:	8b 8b       	std	Y+19, r24	; 0x13
     e18:	3f c0       	rjmp	.+126    	; 0xe98 <HLCD_VoidSendChar+0x1fa>
	else if (__tmp > 65535)
     e1a:	6d 89       	ldd	r22, Y+21	; 0x15
     e1c:	7e 89       	ldd	r23, Y+22	; 0x16
     e1e:	8f 89       	ldd	r24, Y+23	; 0x17
     e20:	98 8d       	ldd	r25, Y+24	; 0x18
     e22:	20 e0       	ldi	r18, 0x00	; 0
     e24:	3f ef       	ldi	r19, 0xFF	; 255
     e26:	4f e7       	ldi	r20, 0x7F	; 127
     e28:	57 e4       	ldi	r21, 0x47	; 71
     e2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     e2e:	18 16       	cp	r1, r24
     e30:	4c f5       	brge	.+82     	; 0xe84 <HLCD_VoidSendChar+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e32:	69 8d       	ldd	r22, Y+25	; 0x19
     e34:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e36:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e38:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e3a:	20 e0       	ldi	r18, 0x00	; 0
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	40 e2       	ldi	r20, 0x20	; 32
     e40:	51 e4       	ldi	r21, 0x41	; 65
     e42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e46:	dc 01       	movw	r26, r24
     e48:	cb 01       	movw	r24, r22
     e4a:	bc 01       	movw	r22, r24
     e4c:	cd 01       	movw	r24, r26
     e4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e52:	dc 01       	movw	r26, r24
     e54:	cb 01       	movw	r24, r22
     e56:	9c 8b       	std	Y+20, r25	; 0x14
     e58:	8b 8b       	std	Y+19, r24	; 0x13
     e5a:	0f c0       	rjmp	.+30     	; 0xe7a <HLCD_VoidSendChar+0x1dc>
     e5c:	88 ec       	ldi	r24, 0xC8	; 200
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	9a 8b       	std	Y+18, r25	; 0x12
     e62:	89 8b       	std	Y+17, r24	; 0x11
     e64:	89 89       	ldd	r24, Y+17	; 0x11
     e66:	9a 89       	ldd	r25, Y+18	; 0x12
     e68:	01 97       	sbiw	r24, 0x01	; 1
     e6a:	f1 f7       	brne	.-4      	; 0xe68 <HLCD_VoidSendChar+0x1ca>
     e6c:	9a 8b       	std	Y+18, r25	; 0x12
     e6e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e70:	8b 89       	ldd	r24, Y+19	; 0x13
     e72:	9c 89       	ldd	r25, Y+20	; 0x14
     e74:	01 97       	sbiw	r24, 0x01	; 1
     e76:	9c 8b       	std	Y+20, r25	; 0x14
     e78:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e7a:	8b 89       	ldd	r24, Y+19	; 0x13
     e7c:	9c 89       	ldd	r25, Y+20	; 0x14
     e7e:	00 97       	sbiw	r24, 0x00	; 0
     e80:	69 f7       	brne	.-38     	; 0xe5c <HLCD_VoidSendChar+0x1be>
     e82:	14 c0       	rjmp	.+40     	; 0xeac <HLCD_VoidSendChar+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e84:	6d 89       	ldd	r22, Y+21	; 0x15
     e86:	7e 89       	ldd	r23, Y+22	; 0x16
     e88:	8f 89       	ldd	r24, Y+23	; 0x17
     e8a:	98 8d       	ldd	r25, Y+24	; 0x18
     e8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e90:	dc 01       	movw	r26, r24
     e92:	cb 01       	movw	r24, r22
     e94:	9c 8b       	std	Y+20, r25	; 0x14
     e96:	8b 8b       	std	Y+19, r24	; 0x13
     e98:	8b 89       	ldd	r24, Y+19	; 0x13
     e9a:	9c 89       	ldd	r25, Y+20	; 0x14
     e9c:	98 8b       	std	Y+16, r25	; 0x10
     e9e:	8f 87       	std	Y+15, r24	; 0x0f
     ea0:	8f 85       	ldd	r24, Y+15	; 0x0f
     ea2:	98 89       	ldd	r25, Y+16	; 0x10
     ea4:	01 97       	sbiw	r24, 0x01	; 1
     ea6:	f1 f7       	brne	.-4      	; 0xea4 <HLCD_VoidSendChar+0x206>
     ea8:	98 8b       	std	Y+16, r25	; 0x10
     eaa:	8f 87       	std	Y+15, r24	; 0x0f
	
	 /*wait 1 ms*/
	_delay_ms(1);
	
	 /*set low to ennable*/
	MDIO_VoidSetPinValue(HLCD_EN_Port,2,0);
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	62 e0       	ldi	r22, 0x02	; 2
     eb0:	40 e0       	ldi	r20, 0x00	; 0
     eb2:	0e 94 11 12 	call	0x2422	; 0x2422 <MDIO_VoidSetPinValue>
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	a0 e0       	ldi	r26, 0x00	; 0
     ebc:	b0 e4       	ldi	r27, 0x40	; 64
     ebe:	8b 87       	std	Y+11, r24	; 0x0b
     ec0:	9c 87       	std	Y+12, r25	; 0x0c
     ec2:	ad 87       	std	Y+13, r26	; 0x0d
     ec4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ec6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ec8:	7c 85       	ldd	r23, Y+12	; 0x0c
     eca:	8d 85       	ldd	r24, Y+13	; 0x0d
     ecc:	9e 85       	ldd	r25, Y+14	; 0x0e
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	4a ef       	ldi	r20, 0xFA	; 250
     ed4:	54 e4       	ldi	r21, 0x44	; 68
     ed6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eda:	dc 01       	movw	r26, r24
     edc:	cb 01       	movw	r24, r22
     ede:	8f 83       	std	Y+7, r24	; 0x07
     ee0:	98 87       	std	Y+8, r25	; 0x08
     ee2:	a9 87       	std	Y+9, r26	; 0x09
     ee4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ee6:	6f 81       	ldd	r22, Y+7	; 0x07
     ee8:	78 85       	ldd	r23, Y+8	; 0x08
     eea:	89 85       	ldd	r24, Y+9	; 0x09
     eec:	9a 85       	ldd	r25, Y+10	; 0x0a
     eee:	20 e0       	ldi	r18, 0x00	; 0
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	40 e8       	ldi	r20, 0x80	; 128
     ef4:	5f e3       	ldi	r21, 0x3F	; 63
     ef6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     efa:	88 23       	and	r24, r24
     efc:	2c f4       	brge	.+10     	; 0xf08 <HLCD_VoidSendChar+0x26a>
		__ticks = 1;
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	9e 83       	std	Y+6, r25	; 0x06
     f04:	8d 83       	std	Y+5, r24	; 0x05
     f06:	3f c0       	rjmp	.+126    	; 0xf86 <HLCD_VoidSendChar+0x2e8>
	else if (__tmp > 65535)
     f08:	6f 81       	ldd	r22, Y+7	; 0x07
     f0a:	78 85       	ldd	r23, Y+8	; 0x08
     f0c:	89 85       	ldd	r24, Y+9	; 0x09
     f0e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f10:	20 e0       	ldi	r18, 0x00	; 0
     f12:	3f ef       	ldi	r19, 0xFF	; 255
     f14:	4f e7       	ldi	r20, 0x7F	; 127
     f16:	57 e4       	ldi	r21, 0x47	; 71
     f18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f1c:	18 16       	cp	r1, r24
     f1e:	4c f5       	brge	.+82     	; 0xf72 <HLCD_VoidSendChar+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f20:	6b 85       	ldd	r22, Y+11	; 0x0b
     f22:	7c 85       	ldd	r23, Y+12	; 0x0c
     f24:	8d 85       	ldd	r24, Y+13	; 0x0d
     f26:	9e 85       	ldd	r25, Y+14	; 0x0e
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	40 e2       	ldi	r20, 0x20	; 32
     f2e:	51 e4       	ldi	r21, 0x41	; 65
     f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f34:	dc 01       	movw	r26, r24
     f36:	cb 01       	movw	r24, r22
     f38:	bc 01       	movw	r22, r24
     f3a:	cd 01       	movw	r24, r26
     f3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f40:	dc 01       	movw	r26, r24
     f42:	cb 01       	movw	r24, r22
     f44:	9e 83       	std	Y+6, r25	; 0x06
     f46:	8d 83       	std	Y+5, r24	; 0x05
     f48:	0f c0       	rjmp	.+30     	; 0xf68 <HLCD_VoidSendChar+0x2ca>
     f4a:	88 ec       	ldi	r24, 0xC8	; 200
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	9c 83       	std	Y+4, r25	; 0x04
     f50:	8b 83       	std	Y+3, r24	; 0x03
     f52:	8b 81       	ldd	r24, Y+3	; 0x03
     f54:	9c 81       	ldd	r25, Y+4	; 0x04
     f56:	01 97       	sbiw	r24, 0x01	; 1
     f58:	f1 f7       	brne	.-4      	; 0xf56 <HLCD_VoidSendChar+0x2b8>
     f5a:	9c 83       	std	Y+4, r25	; 0x04
     f5c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f5e:	8d 81       	ldd	r24, Y+5	; 0x05
     f60:	9e 81       	ldd	r25, Y+6	; 0x06
     f62:	01 97       	sbiw	r24, 0x01	; 1
     f64:	9e 83       	std	Y+6, r25	; 0x06
     f66:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f68:	8d 81       	ldd	r24, Y+5	; 0x05
     f6a:	9e 81       	ldd	r25, Y+6	; 0x06
     f6c:	00 97       	sbiw	r24, 0x00	; 0
     f6e:	69 f7       	brne	.-38     	; 0xf4a <HLCD_VoidSendChar+0x2ac>
     f70:	14 c0       	rjmp	.+40     	; 0xf9a <HLCD_VoidSendChar+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f72:	6f 81       	ldd	r22, Y+7	; 0x07
     f74:	78 85       	ldd	r23, Y+8	; 0x08
     f76:	89 85       	ldd	r24, Y+9	; 0x09
     f78:	9a 85       	ldd	r25, Y+10	; 0x0a
     f7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f7e:	dc 01       	movw	r26, r24
     f80:	cb 01       	movw	r24, r22
     f82:	9e 83       	std	Y+6, r25	; 0x06
     f84:	8d 83       	std	Y+5, r24	; 0x05
     f86:	8d 81       	ldd	r24, Y+5	; 0x05
     f88:	9e 81       	ldd	r25, Y+6	; 0x06
     f8a:	9a 83       	std	Y+2, r25	; 0x02
     f8c:	89 83       	std	Y+1, r24	; 0x01
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
     f90:	9a 81       	ldd	r25, Y+2	; 0x02
     f92:	01 97       	sbiw	r24, 0x01	; 1
     f94:	f1 f7       	brne	.-4      	; 0xf92 <HLCD_VoidSendChar+0x2f4>
     f96:	9a 83       	std	Y+2, r25	; 0x02
     f98:	89 83       	std	Y+1, r24	; 0x01
	
	/*wait 1 ms*/
	_delay_ms(2);
}
     f9a:	ab 96       	adiw	r28, 0x2b	; 43
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	f8 94       	cli
     fa0:	de bf       	out	0x3e, r29	; 62
     fa2:	0f be       	out	0x3f, r0	; 63
     fa4:	cd bf       	out	0x3d, r28	; 61
     fa6:	cf 91       	pop	r28
     fa8:	df 91       	pop	r29
     faa:	08 95       	ret

00000fac <HLCD_VoidSendCommand>:
void HLCD_VoidSendCommand(u8 Copy_U8Command)
{
     fac:	df 93       	push	r29
     fae:	cf 93       	push	r28
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
     fb4:	ab 97       	sbiw	r28, 0x2b	; 43
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	f8 94       	cli
     fba:	de bf       	out	0x3e, r29	; 62
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	cd bf       	out	0x3d, r28	; 61
     fc0:	8b a7       	std	Y+43, r24	; 0x2b
	/*Set Rs=0 , to send command*/
	MDIO_VoidSetPinValue(HLCD_Rs_Port,0,0);
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	60 e0       	ldi	r22, 0x00	; 0
     fc6:	40 e0       	ldi	r20, 0x00	; 0
     fc8:	0e 94 11 12 	call	0x2422	; 0x2422 <MDIO_VoidSetPinValue>
	
	/*Set Rw=0 , to write on LCD*/
	MDIO_VoidSetPinValue(HLCD_Rw_Port,1,0);
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	61 e0       	ldi	r22, 0x01	; 1
     fd0:	40 e0       	ldi	r20, 0x00	; 0
     fd2:	0e 94 11 12 	call	0x2422	; 0x2422 <MDIO_VoidSetPinValue>
	
	  /*DO command On LCD*/
	MDIO_VoidSetPortValue(HLCD_DataPort,Copy_U8Command);
     fd6:	82 e0       	ldi	r24, 0x02	; 2
     fd8:	6b a5       	ldd	r22, Y+43	; 0x2b
     fda:	0e 94 52 13 	call	0x26a4	; 0x26a4 <MDIO_VoidSetPortValue>
	
	/*set low to enable*/
	MDIO_VoidSetPinValue(HLCD_EN_Port,2,0);
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	62 e0       	ldi	r22, 0x02	; 2
     fe2:	40 e0       	ldi	r20, 0x00	; 0
     fe4:	0e 94 11 12 	call	0x2422	; 0x2422 <MDIO_VoidSetPinValue>
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	a0 e8       	ldi	r26, 0x80	; 128
     fee:	bf e3       	ldi	r27, 0x3F	; 63
     ff0:	8f a3       	std	Y+39, r24	; 0x27
     ff2:	98 a7       	std	Y+40, r25	; 0x28
     ff4:	a9 a7       	std	Y+41, r26	; 0x29
     ff6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ff8:	6f a1       	ldd	r22, Y+39	; 0x27
     ffa:	78 a5       	ldd	r23, Y+40	; 0x28
     ffc:	89 a5       	ldd	r24, Y+41	; 0x29
     ffe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	4a ef       	ldi	r20, 0xFA	; 250
    1006:	54 e4       	ldi	r21, 0x44	; 68
    1008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    100c:	dc 01       	movw	r26, r24
    100e:	cb 01       	movw	r24, r22
    1010:	8b a3       	std	Y+35, r24	; 0x23
    1012:	9c a3       	std	Y+36, r25	; 0x24
    1014:	ad a3       	std	Y+37, r26	; 0x25
    1016:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1018:	6b a1       	ldd	r22, Y+35	; 0x23
    101a:	7c a1       	ldd	r23, Y+36	; 0x24
    101c:	8d a1       	ldd	r24, Y+37	; 0x25
    101e:	9e a1       	ldd	r25, Y+38	; 0x26
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	40 e8       	ldi	r20, 0x80	; 128
    1026:	5f e3       	ldi	r21, 0x3F	; 63
    1028:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    102c:	88 23       	and	r24, r24
    102e:	2c f4       	brge	.+10     	; 0x103a <HLCD_VoidSendCommand+0x8e>
		__ticks = 1;
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	9a a3       	std	Y+34, r25	; 0x22
    1036:	89 a3       	std	Y+33, r24	; 0x21
    1038:	3f c0       	rjmp	.+126    	; 0x10b8 <HLCD_VoidSendCommand+0x10c>
	else if (__tmp > 65535)
    103a:	6b a1       	ldd	r22, Y+35	; 0x23
    103c:	7c a1       	ldd	r23, Y+36	; 0x24
    103e:	8d a1       	ldd	r24, Y+37	; 0x25
    1040:	9e a1       	ldd	r25, Y+38	; 0x26
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	3f ef       	ldi	r19, 0xFF	; 255
    1046:	4f e7       	ldi	r20, 0x7F	; 127
    1048:	57 e4       	ldi	r21, 0x47	; 71
    104a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    104e:	18 16       	cp	r1, r24
    1050:	4c f5       	brge	.+82     	; 0x10a4 <HLCD_VoidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1052:	6f a1       	ldd	r22, Y+39	; 0x27
    1054:	78 a5       	ldd	r23, Y+40	; 0x28
    1056:	89 a5       	ldd	r24, Y+41	; 0x29
    1058:	9a a5       	ldd	r25, Y+42	; 0x2a
    105a:	20 e0       	ldi	r18, 0x00	; 0
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	40 e2       	ldi	r20, 0x20	; 32
    1060:	51 e4       	ldi	r21, 0x41	; 65
    1062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1066:	dc 01       	movw	r26, r24
    1068:	cb 01       	movw	r24, r22
    106a:	bc 01       	movw	r22, r24
    106c:	cd 01       	movw	r24, r26
    106e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1072:	dc 01       	movw	r26, r24
    1074:	cb 01       	movw	r24, r22
    1076:	9a a3       	std	Y+34, r25	; 0x22
    1078:	89 a3       	std	Y+33, r24	; 0x21
    107a:	0f c0       	rjmp	.+30     	; 0x109a <HLCD_VoidSendCommand+0xee>
    107c:	88 ec       	ldi	r24, 0xC8	; 200
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	98 a3       	std	Y+32, r25	; 0x20
    1082:	8f 8f       	std	Y+31, r24	; 0x1f
    1084:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1086:	98 a1       	ldd	r25, Y+32	; 0x20
    1088:	01 97       	sbiw	r24, 0x01	; 1
    108a:	f1 f7       	brne	.-4      	; 0x1088 <HLCD_VoidSendCommand+0xdc>
    108c:	98 a3       	std	Y+32, r25	; 0x20
    108e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1090:	89 a1       	ldd	r24, Y+33	; 0x21
    1092:	9a a1       	ldd	r25, Y+34	; 0x22
    1094:	01 97       	sbiw	r24, 0x01	; 1
    1096:	9a a3       	std	Y+34, r25	; 0x22
    1098:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    109a:	89 a1       	ldd	r24, Y+33	; 0x21
    109c:	9a a1       	ldd	r25, Y+34	; 0x22
    109e:	00 97       	sbiw	r24, 0x00	; 0
    10a0:	69 f7       	brne	.-38     	; 0x107c <HLCD_VoidSendCommand+0xd0>
    10a2:	14 c0       	rjmp	.+40     	; 0x10cc <HLCD_VoidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10a4:	6b a1       	ldd	r22, Y+35	; 0x23
    10a6:	7c a1       	ldd	r23, Y+36	; 0x24
    10a8:	8d a1       	ldd	r24, Y+37	; 0x25
    10aa:	9e a1       	ldd	r25, Y+38	; 0x26
    10ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10b0:	dc 01       	movw	r26, r24
    10b2:	cb 01       	movw	r24, r22
    10b4:	9a a3       	std	Y+34, r25	; 0x22
    10b6:	89 a3       	std	Y+33, r24	; 0x21
    10b8:	89 a1       	ldd	r24, Y+33	; 0x21
    10ba:	9a a1       	ldd	r25, Y+34	; 0x22
    10bc:	9e 8f       	std	Y+30, r25	; 0x1e
    10be:	8d 8f       	std	Y+29, r24	; 0x1d
    10c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10c4:	01 97       	sbiw	r24, 0x01	; 1
    10c6:	f1 f7       	brne	.-4      	; 0x10c4 <HLCD_VoidSendCommand+0x118>
    10c8:	9e 8f       	std	Y+30, r25	; 0x1e
    10ca:	8d 8f       	std	Y+29, r24	; 0x1d
	
	 /*wait 1 ms*/
	_delay_ms(1);
	
	/*set Hi to enable*/
	MDIO_VoidSetPinValue(HLCD_EN_Port,2,1);
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	62 e0       	ldi	r22, 0x02	; 2
    10d0:	41 e0       	ldi	r20, 0x01	; 1
    10d2:	0e 94 11 12 	call	0x2422	; 0x2422 <MDIO_VoidSetPinValue>
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	a0 e8       	ldi	r26, 0x80	; 128
    10dc:	bf e3       	ldi	r27, 0x3F	; 63
    10de:	89 8f       	std	Y+25, r24	; 0x19
    10e0:	9a 8f       	std	Y+26, r25	; 0x1a
    10e2:	ab 8f       	std	Y+27, r26	; 0x1b
    10e4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10e6:	69 8d       	ldd	r22, Y+25	; 0x19
    10e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10ee:	20 e0       	ldi	r18, 0x00	; 0
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	4a ef       	ldi	r20, 0xFA	; 250
    10f4:	54 e4       	ldi	r21, 0x44	; 68
    10f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10fa:	dc 01       	movw	r26, r24
    10fc:	cb 01       	movw	r24, r22
    10fe:	8d 8b       	std	Y+21, r24	; 0x15
    1100:	9e 8b       	std	Y+22, r25	; 0x16
    1102:	af 8b       	std	Y+23, r26	; 0x17
    1104:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1106:	6d 89       	ldd	r22, Y+21	; 0x15
    1108:	7e 89       	ldd	r23, Y+22	; 0x16
    110a:	8f 89       	ldd	r24, Y+23	; 0x17
    110c:	98 8d       	ldd	r25, Y+24	; 0x18
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	40 e8       	ldi	r20, 0x80	; 128
    1114:	5f e3       	ldi	r21, 0x3F	; 63
    1116:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    111a:	88 23       	and	r24, r24
    111c:	2c f4       	brge	.+10     	; 0x1128 <HLCD_VoidSendCommand+0x17c>
		__ticks = 1;
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	9c 8b       	std	Y+20, r25	; 0x14
    1124:	8b 8b       	std	Y+19, r24	; 0x13
    1126:	3f c0       	rjmp	.+126    	; 0x11a6 <HLCD_VoidSendCommand+0x1fa>
	else if (__tmp > 65535)
    1128:	6d 89       	ldd	r22, Y+21	; 0x15
    112a:	7e 89       	ldd	r23, Y+22	; 0x16
    112c:	8f 89       	ldd	r24, Y+23	; 0x17
    112e:	98 8d       	ldd	r25, Y+24	; 0x18
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	3f ef       	ldi	r19, 0xFF	; 255
    1134:	4f e7       	ldi	r20, 0x7F	; 127
    1136:	57 e4       	ldi	r21, 0x47	; 71
    1138:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    113c:	18 16       	cp	r1, r24
    113e:	4c f5       	brge	.+82     	; 0x1192 <HLCD_VoidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1140:	69 8d       	ldd	r22, Y+25	; 0x19
    1142:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1144:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1146:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1148:	20 e0       	ldi	r18, 0x00	; 0
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	40 e2       	ldi	r20, 0x20	; 32
    114e:	51 e4       	ldi	r21, 0x41	; 65
    1150:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1154:	dc 01       	movw	r26, r24
    1156:	cb 01       	movw	r24, r22
    1158:	bc 01       	movw	r22, r24
    115a:	cd 01       	movw	r24, r26
    115c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1160:	dc 01       	movw	r26, r24
    1162:	cb 01       	movw	r24, r22
    1164:	9c 8b       	std	Y+20, r25	; 0x14
    1166:	8b 8b       	std	Y+19, r24	; 0x13
    1168:	0f c0       	rjmp	.+30     	; 0x1188 <HLCD_VoidSendCommand+0x1dc>
    116a:	88 ec       	ldi	r24, 0xC8	; 200
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	9a 8b       	std	Y+18, r25	; 0x12
    1170:	89 8b       	std	Y+17, r24	; 0x11
    1172:	89 89       	ldd	r24, Y+17	; 0x11
    1174:	9a 89       	ldd	r25, Y+18	; 0x12
    1176:	01 97       	sbiw	r24, 0x01	; 1
    1178:	f1 f7       	brne	.-4      	; 0x1176 <HLCD_VoidSendCommand+0x1ca>
    117a:	9a 8b       	std	Y+18, r25	; 0x12
    117c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    117e:	8b 89       	ldd	r24, Y+19	; 0x13
    1180:	9c 89       	ldd	r25, Y+20	; 0x14
    1182:	01 97       	sbiw	r24, 0x01	; 1
    1184:	9c 8b       	std	Y+20, r25	; 0x14
    1186:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1188:	8b 89       	ldd	r24, Y+19	; 0x13
    118a:	9c 89       	ldd	r25, Y+20	; 0x14
    118c:	00 97       	sbiw	r24, 0x00	; 0
    118e:	69 f7       	brne	.-38     	; 0x116a <HLCD_VoidSendCommand+0x1be>
    1190:	14 c0       	rjmp	.+40     	; 0x11ba <HLCD_VoidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1192:	6d 89       	ldd	r22, Y+21	; 0x15
    1194:	7e 89       	ldd	r23, Y+22	; 0x16
    1196:	8f 89       	ldd	r24, Y+23	; 0x17
    1198:	98 8d       	ldd	r25, Y+24	; 0x18
    119a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    119e:	dc 01       	movw	r26, r24
    11a0:	cb 01       	movw	r24, r22
    11a2:	9c 8b       	std	Y+20, r25	; 0x14
    11a4:	8b 8b       	std	Y+19, r24	; 0x13
    11a6:	8b 89       	ldd	r24, Y+19	; 0x13
    11a8:	9c 89       	ldd	r25, Y+20	; 0x14
    11aa:	98 8b       	std	Y+16, r25	; 0x10
    11ac:	8f 87       	std	Y+15, r24	; 0x0f
    11ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    11b0:	98 89       	ldd	r25, Y+16	; 0x10
    11b2:	01 97       	sbiw	r24, 0x01	; 1
    11b4:	f1 f7       	brne	.-4      	; 0x11b2 <HLCD_VoidSendCommand+0x206>
    11b6:	98 8b       	std	Y+16, r25	; 0x10
    11b8:	8f 87       	std	Y+15, r24	; 0x0f
	
	 /*wait 1 ms*/
	_delay_ms(1);
	
	/*set low to enable*/
	MDIO_VoidSetPinValue(HLCD_EN_Port,2,0);
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	62 e0       	ldi	r22, 0x02	; 2
    11be:	40 e0       	ldi	r20, 0x00	; 0
    11c0:	0e 94 11 12 	call	0x2422	; 0x2422 <MDIO_VoidSetPinValue>
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	a0 e0       	ldi	r26, 0x00	; 0
    11ca:	b0 e4       	ldi	r27, 0x40	; 64
    11cc:	8b 87       	std	Y+11, r24	; 0x0b
    11ce:	9c 87       	std	Y+12, r25	; 0x0c
    11d0:	ad 87       	std	Y+13, r26	; 0x0d
    11d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    11d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    11d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    11da:	9e 85       	ldd	r25, Y+14	; 0x0e
    11dc:	20 e0       	ldi	r18, 0x00	; 0
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	4a ef       	ldi	r20, 0xFA	; 250
    11e2:	54 e4       	ldi	r21, 0x44	; 68
    11e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11e8:	dc 01       	movw	r26, r24
    11ea:	cb 01       	movw	r24, r22
    11ec:	8f 83       	std	Y+7, r24	; 0x07
    11ee:	98 87       	std	Y+8, r25	; 0x08
    11f0:	a9 87       	std	Y+9, r26	; 0x09
    11f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11f4:	6f 81       	ldd	r22, Y+7	; 0x07
    11f6:	78 85       	ldd	r23, Y+8	; 0x08
    11f8:	89 85       	ldd	r24, Y+9	; 0x09
    11fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	40 e8       	ldi	r20, 0x80	; 128
    1202:	5f e3       	ldi	r21, 0x3F	; 63
    1204:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1208:	88 23       	and	r24, r24
    120a:	2c f4       	brge	.+10     	; 0x1216 <HLCD_VoidSendCommand+0x26a>
		__ticks = 1;
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	9e 83       	std	Y+6, r25	; 0x06
    1212:	8d 83       	std	Y+5, r24	; 0x05
    1214:	3f c0       	rjmp	.+126    	; 0x1294 <HLCD_VoidSendCommand+0x2e8>
	else if (__tmp > 65535)
    1216:	6f 81       	ldd	r22, Y+7	; 0x07
    1218:	78 85       	ldd	r23, Y+8	; 0x08
    121a:	89 85       	ldd	r24, Y+9	; 0x09
    121c:	9a 85       	ldd	r25, Y+10	; 0x0a
    121e:	20 e0       	ldi	r18, 0x00	; 0
    1220:	3f ef       	ldi	r19, 0xFF	; 255
    1222:	4f e7       	ldi	r20, 0x7F	; 127
    1224:	57 e4       	ldi	r21, 0x47	; 71
    1226:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    122a:	18 16       	cp	r1, r24
    122c:	4c f5       	brge	.+82     	; 0x1280 <HLCD_VoidSendCommand+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    122e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1230:	7c 85       	ldd	r23, Y+12	; 0x0c
    1232:	8d 85       	ldd	r24, Y+13	; 0x0d
    1234:	9e 85       	ldd	r25, Y+14	; 0x0e
    1236:	20 e0       	ldi	r18, 0x00	; 0
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	40 e2       	ldi	r20, 0x20	; 32
    123c:	51 e4       	ldi	r21, 0x41	; 65
    123e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1242:	dc 01       	movw	r26, r24
    1244:	cb 01       	movw	r24, r22
    1246:	bc 01       	movw	r22, r24
    1248:	cd 01       	movw	r24, r26
    124a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    124e:	dc 01       	movw	r26, r24
    1250:	cb 01       	movw	r24, r22
    1252:	9e 83       	std	Y+6, r25	; 0x06
    1254:	8d 83       	std	Y+5, r24	; 0x05
    1256:	0f c0       	rjmp	.+30     	; 0x1276 <HLCD_VoidSendCommand+0x2ca>
    1258:	88 ec       	ldi	r24, 0xC8	; 200
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	9c 83       	std	Y+4, r25	; 0x04
    125e:	8b 83       	std	Y+3, r24	; 0x03
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	9c 81       	ldd	r25, Y+4	; 0x04
    1264:	01 97       	sbiw	r24, 0x01	; 1
    1266:	f1 f7       	brne	.-4      	; 0x1264 <HLCD_VoidSendCommand+0x2b8>
    1268:	9c 83       	std	Y+4, r25	; 0x04
    126a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    126c:	8d 81       	ldd	r24, Y+5	; 0x05
    126e:	9e 81       	ldd	r25, Y+6	; 0x06
    1270:	01 97       	sbiw	r24, 0x01	; 1
    1272:	9e 83       	std	Y+6, r25	; 0x06
    1274:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1276:	8d 81       	ldd	r24, Y+5	; 0x05
    1278:	9e 81       	ldd	r25, Y+6	; 0x06
    127a:	00 97       	sbiw	r24, 0x00	; 0
    127c:	69 f7       	brne	.-38     	; 0x1258 <HLCD_VoidSendCommand+0x2ac>
    127e:	14 c0       	rjmp	.+40     	; 0x12a8 <HLCD_VoidSendCommand+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1280:	6f 81       	ldd	r22, Y+7	; 0x07
    1282:	78 85       	ldd	r23, Y+8	; 0x08
    1284:	89 85       	ldd	r24, Y+9	; 0x09
    1286:	9a 85       	ldd	r25, Y+10	; 0x0a
    1288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	9e 83       	std	Y+6, r25	; 0x06
    1292:	8d 83       	std	Y+5, r24	; 0x05
    1294:	8d 81       	ldd	r24, Y+5	; 0x05
    1296:	9e 81       	ldd	r25, Y+6	; 0x06
    1298:	9a 83       	std	Y+2, r25	; 0x02
    129a:	89 83       	std	Y+1, r24	; 0x01
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	9a 81       	ldd	r25, Y+2	; 0x02
    12a0:	01 97       	sbiw	r24, 0x01	; 1
    12a2:	f1 f7       	brne	.-4      	; 0x12a0 <HLCD_VoidSendCommand+0x2f4>
    12a4:	9a 83       	std	Y+2, r25	; 0x02
    12a6:	89 83       	std	Y+1, r24	; 0x01
	
	/*wait 1 ms*/
	_delay_ms(2);
	
}
    12a8:	ab 96       	adiw	r28, 0x2b	; 43
    12aa:	0f b6       	in	r0, 0x3f	; 63
    12ac:	f8 94       	cli
    12ae:	de bf       	out	0x3e, r29	; 62
    12b0:	0f be       	out	0x3f, r0	; 63
    12b2:	cd bf       	out	0x3d, r28	; 61
    12b4:	cf 91       	pop	r28
    12b6:	df 91       	pop	r29
    12b8:	08 95       	ret

000012ba <HLCD_VoidInit>:
void HLCD_VoidInit(void)
{
    12ba:	0f 93       	push	r16
    12bc:	1f 93       	push	r17
    12be:	df 93       	push	r29
    12c0:	cf 93       	push	r28
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
    12c6:	cc 54       	subi	r28, 0x4C	; 76
    12c8:	d0 40       	sbci	r29, 0x00	; 0
    12ca:	0f b6       	in	r0, 0x3f	; 63
    12cc:	f8 94       	cli
    12ce:	de bf       	out	0x3e, r29	; 62
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	cd bf       	out	0x3d, r28	; 61
	/*Set Direction Of alla Pins*/
	
	MDIO_VoidSetPortDirection(HLCD_DataPort,0xff);
    12d4:	82 e0       	ldi	r24, 0x02	; 2
    12d6:	6f ef       	ldi	r22, 0xFF	; 255
    12d8:	0e 94 11 13 	call	0x2622	; 0x2622 <MDIO_VoidSetPortDirection>
	MDIO_VoidSetPinDirection(HLCD_Rs_Port,0,1);
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	60 e0       	ldi	r22, 0x00	; 0
    12e0:	41 e0       	ldi	r20, 0x01	; 1
    12e2:	0e 94 98 10 	call	0x2130	; 0x2130 <MDIO_VoidSetPinDirection>
	MDIO_VoidSetPinDirection(HLCD_Rw_Port,1,1);
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	61 e0       	ldi	r22, 0x01	; 1
    12ea:	41 e0       	ldi	r20, 0x01	; 1
    12ec:	0e 94 98 10 	call	0x2130	; 0x2130 <MDIO_VoidSetPinDirection>
	MDIO_VoidSetPinDirection(HLCD_EN_Port,2,1);
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	62 e0       	ldi	r22, 0x02	; 2
    12f4:	41 e0       	ldi	r20, 0x01	; 1
    12f6:	0e 94 98 10 	call	0x2130	; 0x2130 <MDIO_VoidSetPinDirection>
    12fa:	fe 01       	movw	r30, r28
    12fc:	e7 5b       	subi	r30, 0xB7	; 183
    12fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	a0 e2       	ldi	r26, 0x20	; 32
    1306:	b2 e4       	ldi	r27, 0x42	; 66
    1308:	80 83       	st	Z, r24
    130a:	91 83       	std	Z+1, r25	; 0x01
    130c:	a2 83       	std	Z+2, r26	; 0x02
    130e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1310:	8e 01       	movw	r16, r28
    1312:	0b 5b       	subi	r16, 0xBB	; 187
    1314:	1f 4f       	sbci	r17, 0xFF	; 255
    1316:	fe 01       	movw	r30, r28
    1318:	e7 5b       	subi	r30, 0xB7	; 183
    131a:	ff 4f       	sbci	r31, 0xFF	; 255
    131c:	60 81       	ld	r22, Z
    131e:	71 81       	ldd	r23, Z+1	; 0x01
    1320:	82 81       	ldd	r24, Z+2	; 0x02
    1322:	93 81       	ldd	r25, Z+3	; 0x03
    1324:	20 e0       	ldi	r18, 0x00	; 0
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	4a ef       	ldi	r20, 0xFA	; 250
    132a:	54 e4       	ldi	r21, 0x44	; 68
    132c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1330:	dc 01       	movw	r26, r24
    1332:	cb 01       	movw	r24, r22
    1334:	f8 01       	movw	r30, r16
    1336:	80 83       	st	Z, r24
    1338:	91 83       	std	Z+1, r25	; 0x01
    133a:	a2 83       	std	Z+2, r26	; 0x02
    133c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    133e:	fe 01       	movw	r30, r28
    1340:	eb 5b       	subi	r30, 0xBB	; 187
    1342:	ff 4f       	sbci	r31, 0xFF	; 255
    1344:	60 81       	ld	r22, Z
    1346:	71 81       	ldd	r23, Z+1	; 0x01
    1348:	82 81       	ldd	r24, Z+2	; 0x02
    134a:	93 81       	ldd	r25, Z+3	; 0x03
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	40 e8       	ldi	r20, 0x80	; 128
    1352:	5f e3       	ldi	r21, 0x3F	; 63
    1354:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1358:	88 23       	and	r24, r24
    135a:	44 f4       	brge	.+16     	; 0x136c <HLCD_VoidInit+0xb2>
		__ticks = 1;
    135c:	fe 01       	movw	r30, r28
    135e:	ed 5b       	subi	r30, 0xBD	; 189
    1360:	ff 4f       	sbci	r31, 0xFF	; 255
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	91 83       	std	Z+1, r25	; 0x01
    1368:	80 83       	st	Z, r24
    136a:	64 c0       	rjmp	.+200    	; 0x1434 <HLCD_VoidInit+0x17a>
	else if (__tmp > 65535)
    136c:	fe 01       	movw	r30, r28
    136e:	eb 5b       	subi	r30, 0xBB	; 187
    1370:	ff 4f       	sbci	r31, 0xFF	; 255
    1372:	60 81       	ld	r22, Z
    1374:	71 81       	ldd	r23, Z+1	; 0x01
    1376:	82 81       	ldd	r24, Z+2	; 0x02
    1378:	93 81       	ldd	r25, Z+3	; 0x03
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	3f ef       	ldi	r19, 0xFF	; 255
    137e:	4f e7       	ldi	r20, 0x7F	; 127
    1380:	57 e4       	ldi	r21, 0x47	; 71
    1382:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1386:	18 16       	cp	r1, r24
    1388:	0c f0       	brlt	.+2      	; 0x138c <HLCD_VoidInit+0xd2>
    138a:	43 c0       	rjmp	.+134    	; 0x1412 <HLCD_VoidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    138c:	fe 01       	movw	r30, r28
    138e:	e7 5b       	subi	r30, 0xB7	; 183
    1390:	ff 4f       	sbci	r31, 0xFF	; 255
    1392:	60 81       	ld	r22, Z
    1394:	71 81       	ldd	r23, Z+1	; 0x01
    1396:	82 81       	ldd	r24, Z+2	; 0x02
    1398:	93 81       	ldd	r25, Z+3	; 0x03
    139a:	20 e0       	ldi	r18, 0x00	; 0
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	40 e2       	ldi	r20, 0x20	; 32
    13a0:	51 e4       	ldi	r21, 0x41	; 65
    13a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a6:	dc 01       	movw	r26, r24
    13a8:	cb 01       	movw	r24, r22
    13aa:	8e 01       	movw	r16, r28
    13ac:	0d 5b       	subi	r16, 0xBD	; 189
    13ae:	1f 4f       	sbci	r17, 0xFF	; 255
    13b0:	bc 01       	movw	r22, r24
    13b2:	cd 01       	movw	r24, r26
    13b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b8:	dc 01       	movw	r26, r24
    13ba:	cb 01       	movw	r24, r22
    13bc:	f8 01       	movw	r30, r16
    13be:	91 83       	std	Z+1, r25	; 0x01
    13c0:	80 83       	st	Z, r24
    13c2:	1f c0       	rjmp	.+62     	; 0x1402 <HLCD_VoidInit+0x148>
    13c4:	fe 01       	movw	r30, r28
    13c6:	ef 5b       	subi	r30, 0xBF	; 191
    13c8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ca:	88 ec       	ldi	r24, 0xC8	; 200
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	91 83       	std	Z+1, r25	; 0x01
    13d0:	80 83       	st	Z, r24
    13d2:	fe 01       	movw	r30, r28
    13d4:	ef 5b       	subi	r30, 0xBF	; 191
    13d6:	ff 4f       	sbci	r31, 0xFF	; 255
    13d8:	80 81       	ld	r24, Z
    13da:	91 81       	ldd	r25, Z+1	; 0x01
    13dc:	01 97       	sbiw	r24, 0x01	; 1
    13de:	f1 f7       	brne	.-4      	; 0x13dc <HLCD_VoidInit+0x122>
    13e0:	fe 01       	movw	r30, r28
    13e2:	ef 5b       	subi	r30, 0xBF	; 191
    13e4:	ff 4f       	sbci	r31, 0xFF	; 255
    13e6:	91 83       	std	Z+1, r25	; 0x01
    13e8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ea:	de 01       	movw	r26, r28
    13ec:	ad 5b       	subi	r26, 0xBD	; 189
    13ee:	bf 4f       	sbci	r27, 0xFF	; 255
    13f0:	fe 01       	movw	r30, r28
    13f2:	ed 5b       	subi	r30, 0xBD	; 189
    13f4:	ff 4f       	sbci	r31, 0xFF	; 255
    13f6:	80 81       	ld	r24, Z
    13f8:	91 81       	ldd	r25, Z+1	; 0x01
    13fa:	01 97       	sbiw	r24, 0x01	; 1
    13fc:	11 96       	adiw	r26, 0x01	; 1
    13fe:	9c 93       	st	X, r25
    1400:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1402:	fe 01       	movw	r30, r28
    1404:	ed 5b       	subi	r30, 0xBD	; 189
    1406:	ff 4f       	sbci	r31, 0xFF	; 255
    1408:	80 81       	ld	r24, Z
    140a:	91 81       	ldd	r25, Z+1	; 0x01
    140c:	00 97       	sbiw	r24, 0x00	; 0
    140e:	d1 f6       	brne	.-76     	; 0x13c4 <HLCD_VoidInit+0x10a>
    1410:	24 c0       	rjmp	.+72     	; 0x145a <HLCD_VoidInit+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1412:	8e 01       	movw	r16, r28
    1414:	0d 5b       	subi	r16, 0xBD	; 189
    1416:	1f 4f       	sbci	r17, 0xFF	; 255
    1418:	fe 01       	movw	r30, r28
    141a:	eb 5b       	subi	r30, 0xBB	; 187
    141c:	ff 4f       	sbci	r31, 0xFF	; 255
    141e:	60 81       	ld	r22, Z
    1420:	71 81       	ldd	r23, Z+1	; 0x01
    1422:	82 81       	ldd	r24, Z+2	; 0x02
    1424:	93 81       	ldd	r25, Z+3	; 0x03
    1426:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    142a:	dc 01       	movw	r26, r24
    142c:	cb 01       	movw	r24, r22
    142e:	f8 01       	movw	r30, r16
    1430:	91 83       	std	Z+1, r25	; 0x01
    1432:	80 83       	st	Z, r24
    1434:	fe 01       	movw	r30, r28
    1436:	ed 5b       	subi	r30, 0xBD	; 189
    1438:	ff 4f       	sbci	r31, 0xFF	; 255
    143a:	80 81       	ld	r24, Z
    143c:	91 81       	ldd	r25, Z+1	; 0x01
    143e:	fe 01       	movw	r30, r28
    1440:	ff 96       	adiw	r30, 0x3f	; 63
    1442:	91 83       	std	Z+1, r25	; 0x01
    1444:	80 83       	st	Z, r24
    1446:	fe 01       	movw	r30, r28
    1448:	ff 96       	adiw	r30, 0x3f	; 63
    144a:	80 81       	ld	r24, Z
    144c:	91 81       	ldd	r25, Z+1	; 0x01
    144e:	01 97       	sbiw	r24, 0x01	; 1
    1450:	f1 f7       	brne	.-4      	; 0x144e <HLCD_VoidInit+0x194>
    1452:	fe 01       	movw	r30, r28
    1454:	ff 96       	adiw	r30, 0x3f	; 63
    1456:	91 83       	std	Z+1, r25	; 0x01
    1458:	80 83       	st	Z, r24
	
		/*wait more than 30ms*/
	_delay_ms(40);
	
	/*Function Set (Set No.of Lines & Font Type*/
	HLCD_VoidSendCommand(0b00111000);
    145a:	88 e3       	ldi	r24, 0x38	; 56
    145c:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	a4 e3       	ldi	r26, 0x34	; 52
    1466:	b2 e4       	ldi	r27, 0x42	; 66
    1468:	8b af       	std	Y+59, r24	; 0x3b
    146a:	9c af       	std	Y+60, r25	; 0x3c
    146c:	ad af       	std	Y+61, r26	; 0x3d
    146e:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1470:	6b ad       	ldd	r22, Y+59	; 0x3b
    1472:	7c ad       	ldd	r23, Y+60	; 0x3c
    1474:	8d ad       	ldd	r24, Y+61	; 0x3d
    1476:	9e ad       	ldd	r25, Y+62	; 0x3e
    1478:	2b ea       	ldi	r18, 0xAB	; 171
    147a:	3a ea       	ldi	r19, 0xAA	; 170
    147c:	4a e2       	ldi	r20, 0x2A	; 42
    147e:	50 e4       	ldi	r21, 0x40	; 64
    1480:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	8f ab       	std	Y+55, r24	; 0x37
    148a:	98 af       	std	Y+56, r25	; 0x38
    148c:	a9 af       	std	Y+57, r26	; 0x39
    148e:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1490:	6f a9       	ldd	r22, Y+55	; 0x37
    1492:	78 ad       	ldd	r23, Y+56	; 0x38
    1494:	89 ad       	ldd	r24, Y+57	; 0x39
    1496:	9a ad       	ldd	r25, Y+58	; 0x3a
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	40 e8       	ldi	r20, 0x80	; 128
    149e:	5f e3       	ldi	r21, 0x3F	; 63
    14a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14a4:	88 23       	and	r24, r24
    14a6:	1c f4       	brge	.+6      	; 0x14ae <HLCD_VoidInit+0x1f4>
		__ticks = 1;
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	8e ab       	std	Y+54, r24	; 0x36
    14ac:	91 c0       	rjmp	.+290    	; 0x15d0 <HLCD_VoidInit+0x316>
	else if (__tmp > 255)
    14ae:	6f a9       	ldd	r22, Y+55	; 0x37
    14b0:	78 ad       	ldd	r23, Y+56	; 0x38
    14b2:	89 ad       	ldd	r24, Y+57	; 0x39
    14b4:	9a ad       	ldd	r25, Y+58	; 0x3a
    14b6:	20 e0       	ldi	r18, 0x00	; 0
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	4f e7       	ldi	r20, 0x7F	; 127
    14bc:	53 e4       	ldi	r21, 0x43	; 67
    14be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14c2:	18 16       	cp	r1, r24
    14c4:	0c f0       	brlt	.+2      	; 0x14c8 <HLCD_VoidInit+0x20e>
    14c6:	7b c0       	rjmp	.+246    	; 0x15be <HLCD_VoidInit+0x304>
	{
		_delay_ms(__us / 1000.0);
    14c8:	6b ad       	ldd	r22, Y+59	; 0x3b
    14ca:	7c ad       	ldd	r23, Y+60	; 0x3c
    14cc:	8d ad       	ldd	r24, Y+61	; 0x3d
    14ce:	9e ad       	ldd	r25, Y+62	; 0x3e
    14d0:	20 e0       	ldi	r18, 0x00	; 0
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	4a e7       	ldi	r20, 0x7A	; 122
    14d6:	54 e4       	ldi	r21, 0x44	; 68
    14d8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    14dc:	dc 01       	movw	r26, r24
    14de:	cb 01       	movw	r24, r22
    14e0:	8a ab       	std	Y+50, r24	; 0x32
    14e2:	9b ab       	std	Y+51, r25	; 0x33
    14e4:	ac ab       	std	Y+52, r26	; 0x34
    14e6:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14e8:	6a a9       	ldd	r22, Y+50	; 0x32
    14ea:	7b a9       	ldd	r23, Y+51	; 0x33
    14ec:	8c a9       	ldd	r24, Y+52	; 0x34
    14ee:	9d a9       	ldd	r25, Y+53	; 0x35
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	4a ef       	ldi	r20, 0xFA	; 250
    14f6:	54 e4       	ldi	r21, 0x44	; 68
    14f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14fc:	dc 01       	movw	r26, r24
    14fe:	cb 01       	movw	r24, r22
    1500:	8e a7       	std	Y+46, r24	; 0x2e
    1502:	9f a7       	std	Y+47, r25	; 0x2f
    1504:	a8 ab       	std	Y+48, r26	; 0x30
    1506:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1508:	6e a5       	ldd	r22, Y+46	; 0x2e
    150a:	7f a5       	ldd	r23, Y+47	; 0x2f
    150c:	88 a9       	ldd	r24, Y+48	; 0x30
    150e:	99 a9       	ldd	r25, Y+49	; 0x31
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	40 e8       	ldi	r20, 0x80	; 128
    1516:	5f e3       	ldi	r21, 0x3F	; 63
    1518:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    151c:	88 23       	and	r24, r24
    151e:	2c f4       	brge	.+10     	; 0x152a <HLCD_VoidInit+0x270>
		__ticks = 1;
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	9d a7       	std	Y+45, r25	; 0x2d
    1526:	8c a7       	std	Y+44, r24	; 0x2c
    1528:	3f c0       	rjmp	.+126    	; 0x15a8 <HLCD_VoidInit+0x2ee>
	else if (__tmp > 65535)
    152a:	6e a5       	ldd	r22, Y+46	; 0x2e
    152c:	7f a5       	ldd	r23, Y+47	; 0x2f
    152e:	88 a9       	ldd	r24, Y+48	; 0x30
    1530:	99 a9       	ldd	r25, Y+49	; 0x31
    1532:	20 e0       	ldi	r18, 0x00	; 0
    1534:	3f ef       	ldi	r19, 0xFF	; 255
    1536:	4f e7       	ldi	r20, 0x7F	; 127
    1538:	57 e4       	ldi	r21, 0x47	; 71
    153a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    153e:	18 16       	cp	r1, r24
    1540:	4c f5       	brge	.+82     	; 0x1594 <HLCD_VoidInit+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1542:	6a a9       	ldd	r22, Y+50	; 0x32
    1544:	7b a9       	ldd	r23, Y+51	; 0x33
    1546:	8c a9       	ldd	r24, Y+52	; 0x34
    1548:	9d a9       	ldd	r25, Y+53	; 0x35
    154a:	20 e0       	ldi	r18, 0x00	; 0
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	40 e2       	ldi	r20, 0x20	; 32
    1550:	51 e4       	ldi	r21, 0x41	; 65
    1552:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1556:	dc 01       	movw	r26, r24
    1558:	cb 01       	movw	r24, r22
    155a:	bc 01       	movw	r22, r24
    155c:	cd 01       	movw	r24, r26
    155e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1562:	dc 01       	movw	r26, r24
    1564:	cb 01       	movw	r24, r22
    1566:	9d a7       	std	Y+45, r25	; 0x2d
    1568:	8c a7       	std	Y+44, r24	; 0x2c
    156a:	0f c0       	rjmp	.+30     	; 0x158a <HLCD_VoidInit+0x2d0>
    156c:	88 ec       	ldi	r24, 0xC8	; 200
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	9b a7       	std	Y+43, r25	; 0x2b
    1572:	8a a7       	std	Y+42, r24	; 0x2a
    1574:	8a a5       	ldd	r24, Y+42	; 0x2a
    1576:	9b a5       	ldd	r25, Y+43	; 0x2b
    1578:	01 97       	sbiw	r24, 0x01	; 1
    157a:	f1 f7       	brne	.-4      	; 0x1578 <HLCD_VoidInit+0x2be>
    157c:	9b a7       	std	Y+43, r25	; 0x2b
    157e:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1580:	8c a5       	ldd	r24, Y+44	; 0x2c
    1582:	9d a5       	ldd	r25, Y+45	; 0x2d
    1584:	01 97       	sbiw	r24, 0x01	; 1
    1586:	9d a7       	std	Y+45, r25	; 0x2d
    1588:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    158a:	8c a5       	ldd	r24, Y+44	; 0x2c
    158c:	9d a5       	ldd	r25, Y+45	; 0x2d
    158e:	00 97       	sbiw	r24, 0x00	; 0
    1590:	69 f7       	brne	.-38     	; 0x156c <HLCD_VoidInit+0x2b2>
    1592:	24 c0       	rjmp	.+72     	; 0x15dc <HLCD_VoidInit+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1594:	6e a5       	ldd	r22, Y+46	; 0x2e
    1596:	7f a5       	ldd	r23, Y+47	; 0x2f
    1598:	88 a9       	ldd	r24, Y+48	; 0x30
    159a:	99 a9       	ldd	r25, Y+49	; 0x31
    159c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15a0:	dc 01       	movw	r26, r24
    15a2:	cb 01       	movw	r24, r22
    15a4:	9d a7       	std	Y+45, r25	; 0x2d
    15a6:	8c a7       	std	Y+44, r24	; 0x2c
    15a8:	8c a5       	ldd	r24, Y+44	; 0x2c
    15aa:	9d a5       	ldd	r25, Y+45	; 0x2d
    15ac:	99 a7       	std	Y+41, r25	; 0x29
    15ae:	88 a7       	std	Y+40, r24	; 0x28
    15b0:	88 a5       	ldd	r24, Y+40	; 0x28
    15b2:	99 a5       	ldd	r25, Y+41	; 0x29
    15b4:	01 97       	sbiw	r24, 0x01	; 1
    15b6:	f1 f7       	brne	.-4      	; 0x15b4 <HLCD_VoidInit+0x2fa>
    15b8:	99 a7       	std	Y+41, r25	; 0x29
    15ba:	88 a7       	std	Y+40, r24	; 0x28
    15bc:	0f c0       	rjmp	.+30     	; 0x15dc <HLCD_VoidInit+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    15be:	6f a9       	ldd	r22, Y+55	; 0x37
    15c0:	78 ad       	ldd	r23, Y+56	; 0x38
    15c2:	89 ad       	ldd	r24, Y+57	; 0x39
    15c4:	9a ad       	ldd	r25, Y+58	; 0x3a
    15c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ca:	dc 01       	movw	r26, r24
    15cc:	cb 01       	movw	r24, r22
    15ce:	8e ab       	std	Y+54, r24	; 0x36
    15d0:	8e a9       	ldd	r24, Y+54	; 0x36
    15d2:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    15d4:	8f a1       	ldd	r24, Y+39	; 0x27
    15d6:	8a 95       	dec	r24
    15d8:	f1 f7       	brne	.-4      	; 0x15d6 <HLCD_VoidInit+0x31c>
    15da:	8f a3       	std	Y+39, r24	; 0x27

    /*Wait More Than 39us*/
    _delay_us(45);
	
	/*Display ON/OFF Control*/
	HLCD_VoidSendCommand(0b00001110);
    15dc:	8e e0       	ldi	r24, 0x0E	; 14
    15de:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	a4 e3       	ldi	r26, 0x34	; 52
    15e8:	b2 e4       	ldi	r27, 0x42	; 66
    15ea:	8b a3       	std	Y+35, r24	; 0x23
    15ec:	9c a3       	std	Y+36, r25	; 0x24
    15ee:	ad a3       	std	Y+37, r26	; 0x25
    15f0:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    15f2:	6b a1       	ldd	r22, Y+35	; 0x23
    15f4:	7c a1       	ldd	r23, Y+36	; 0x24
    15f6:	8d a1       	ldd	r24, Y+37	; 0x25
    15f8:	9e a1       	ldd	r25, Y+38	; 0x26
    15fa:	2b ea       	ldi	r18, 0xAB	; 171
    15fc:	3a ea       	ldi	r19, 0xAA	; 170
    15fe:	4a e2       	ldi	r20, 0x2A	; 42
    1600:	50 e4       	ldi	r21, 0x40	; 64
    1602:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1606:	dc 01       	movw	r26, r24
    1608:	cb 01       	movw	r24, r22
    160a:	8f 8f       	std	Y+31, r24	; 0x1f
    160c:	98 a3       	std	Y+32, r25	; 0x20
    160e:	a9 a3       	std	Y+33, r26	; 0x21
    1610:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1612:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1614:	78 a1       	ldd	r23, Y+32	; 0x20
    1616:	89 a1       	ldd	r24, Y+33	; 0x21
    1618:	9a a1       	ldd	r25, Y+34	; 0x22
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	40 e8       	ldi	r20, 0x80	; 128
    1620:	5f e3       	ldi	r21, 0x3F	; 63
    1622:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1626:	88 23       	and	r24, r24
    1628:	1c f4       	brge	.+6      	; 0x1630 <HLCD_VoidInit+0x376>
		__ticks = 1;
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	8e 8f       	std	Y+30, r24	; 0x1e
    162e:	91 c0       	rjmp	.+290    	; 0x1752 <HLCD_VoidInit+0x498>
	else if (__tmp > 255)
    1630:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1632:	78 a1       	ldd	r23, Y+32	; 0x20
    1634:	89 a1       	ldd	r24, Y+33	; 0x21
    1636:	9a a1       	ldd	r25, Y+34	; 0x22
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	4f e7       	ldi	r20, 0x7F	; 127
    163e:	53 e4       	ldi	r21, 0x43	; 67
    1640:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1644:	18 16       	cp	r1, r24
    1646:	0c f0       	brlt	.+2      	; 0x164a <HLCD_VoidInit+0x390>
    1648:	7b c0       	rjmp	.+246    	; 0x1740 <HLCD_VoidInit+0x486>
	{
		_delay_ms(__us / 1000.0);
    164a:	6b a1       	ldd	r22, Y+35	; 0x23
    164c:	7c a1       	ldd	r23, Y+36	; 0x24
    164e:	8d a1       	ldd	r24, Y+37	; 0x25
    1650:	9e a1       	ldd	r25, Y+38	; 0x26
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	4a e7       	ldi	r20, 0x7A	; 122
    1658:	54 e4       	ldi	r21, 0x44	; 68
    165a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    165e:	dc 01       	movw	r26, r24
    1660:	cb 01       	movw	r24, r22
    1662:	8a 8f       	std	Y+26, r24	; 0x1a
    1664:	9b 8f       	std	Y+27, r25	; 0x1b
    1666:	ac 8f       	std	Y+28, r26	; 0x1c
    1668:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    166a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    166c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    166e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1670:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	4a ef       	ldi	r20, 0xFA	; 250
    1678:	54 e4       	ldi	r21, 0x44	; 68
    167a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    167e:	dc 01       	movw	r26, r24
    1680:	cb 01       	movw	r24, r22
    1682:	8e 8b       	std	Y+22, r24	; 0x16
    1684:	9f 8b       	std	Y+23, r25	; 0x17
    1686:	a8 8f       	std	Y+24, r26	; 0x18
    1688:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    168a:	6e 89       	ldd	r22, Y+22	; 0x16
    168c:	7f 89       	ldd	r23, Y+23	; 0x17
    168e:	88 8d       	ldd	r24, Y+24	; 0x18
    1690:	99 8d       	ldd	r25, Y+25	; 0x19
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	40 e8       	ldi	r20, 0x80	; 128
    1698:	5f e3       	ldi	r21, 0x3F	; 63
    169a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    169e:	88 23       	and	r24, r24
    16a0:	2c f4       	brge	.+10     	; 0x16ac <HLCD_VoidInit+0x3f2>
		__ticks = 1;
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	9d 8b       	std	Y+21, r25	; 0x15
    16a8:	8c 8b       	std	Y+20, r24	; 0x14
    16aa:	3f c0       	rjmp	.+126    	; 0x172a <HLCD_VoidInit+0x470>
	else if (__tmp > 65535)
    16ac:	6e 89       	ldd	r22, Y+22	; 0x16
    16ae:	7f 89       	ldd	r23, Y+23	; 0x17
    16b0:	88 8d       	ldd	r24, Y+24	; 0x18
    16b2:	99 8d       	ldd	r25, Y+25	; 0x19
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	3f ef       	ldi	r19, 0xFF	; 255
    16b8:	4f e7       	ldi	r20, 0x7F	; 127
    16ba:	57 e4       	ldi	r21, 0x47	; 71
    16bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16c0:	18 16       	cp	r1, r24
    16c2:	4c f5       	brge	.+82     	; 0x1716 <HLCD_VoidInit+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16c4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    16c6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    16c8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    16ca:	9d 8d       	ldd	r25, Y+29	; 0x1d
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	40 e2       	ldi	r20, 0x20	; 32
    16d2:	51 e4       	ldi	r21, 0x41	; 65
    16d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22
    16dc:	bc 01       	movw	r22, r24
    16de:	cd 01       	movw	r24, r26
    16e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	9d 8b       	std	Y+21, r25	; 0x15
    16ea:	8c 8b       	std	Y+20, r24	; 0x14
    16ec:	0f c0       	rjmp	.+30     	; 0x170c <HLCD_VoidInit+0x452>
    16ee:	88 ec       	ldi	r24, 0xC8	; 200
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	9b 8b       	std	Y+19, r25	; 0x13
    16f4:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16f6:	8a 89       	ldd	r24, Y+18	; 0x12
    16f8:	9b 89       	ldd	r25, Y+19	; 0x13
    16fa:	01 97       	sbiw	r24, 0x01	; 1
    16fc:	f1 f7       	brne	.-4      	; 0x16fa <HLCD_VoidInit+0x440>
    16fe:	9b 8b       	std	Y+19, r25	; 0x13
    1700:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1702:	8c 89       	ldd	r24, Y+20	; 0x14
    1704:	9d 89       	ldd	r25, Y+21	; 0x15
    1706:	01 97       	sbiw	r24, 0x01	; 1
    1708:	9d 8b       	std	Y+21, r25	; 0x15
    170a:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    170c:	8c 89       	ldd	r24, Y+20	; 0x14
    170e:	9d 89       	ldd	r25, Y+21	; 0x15
    1710:	00 97       	sbiw	r24, 0x00	; 0
    1712:	69 f7       	brne	.-38     	; 0x16ee <HLCD_VoidInit+0x434>
    1714:	24 c0       	rjmp	.+72     	; 0x175e <HLCD_VoidInit+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1716:	6e 89       	ldd	r22, Y+22	; 0x16
    1718:	7f 89       	ldd	r23, Y+23	; 0x17
    171a:	88 8d       	ldd	r24, Y+24	; 0x18
    171c:	99 8d       	ldd	r25, Y+25	; 0x19
    171e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1722:	dc 01       	movw	r26, r24
    1724:	cb 01       	movw	r24, r22
    1726:	9d 8b       	std	Y+21, r25	; 0x15
    1728:	8c 8b       	std	Y+20, r24	; 0x14
    172a:	8c 89       	ldd	r24, Y+20	; 0x14
    172c:	9d 89       	ldd	r25, Y+21	; 0x15
    172e:	99 8b       	std	Y+17, r25	; 0x11
    1730:	88 8b       	std	Y+16, r24	; 0x10
    1732:	88 89       	ldd	r24, Y+16	; 0x10
    1734:	99 89       	ldd	r25, Y+17	; 0x11
    1736:	01 97       	sbiw	r24, 0x01	; 1
    1738:	f1 f7       	brne	.-4      	; 0x1736 <HLCD_VoidInit+0x47c>
    173a:	99 8b       	std	Y+17, r25	; 0x11
    173c:	88 8b       	std	Y+16, r24	; 0x10
    173e:	0f c0       	rjmp	.+30     	; 0x175e <HLCD_VoidInit+0x4a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1740:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1742:	78 a1       	ldd	r23, Y+32	; 0x20
    1744:	89 a1       	ldd	r24, Y+33	; 0x21
    1746:	9a a1       	ldd	r25, Y+34	; 0x22
    1748:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    174c:	dc 01       	movw	r26, r24
    174e:	cb 01       	movw	r24, r22
    1750:	8e 8f       	std	Y+30, r24	; 0x1e
    1752:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1754:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1756:	8f 85       	ldd	r24, Y+15	; 0x0f
    1758:	8a 95       	dec	r24
    175a:	f1 f7       	brne	.-4      	; 0x1758 <HLCD_VoidInit+0x49e>
    175c:	8f 87       	std	Y+15, r24	; 0x0f
	
	/*Wait More Than 39us*/
    _delay_us(45);
	
	/*Display Clear*/
	HLCD_VoidSendCommand(0b00000001);
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
    1764:	80 e0       	ldi	r24, 0x00	; 0
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	a0 e0       	ldi	r26, 0x00	; 0
    176a:	b0 e4       	ldi	r27, 0x40	; 64
    176c:	8b 87       	std	Y+11, r24	; 0x0b
    176e:	9c 87       	std	Y+12, r25	; 0x0c
    1770:	ad 87       	std	Y+13, r26	; 0x0d
    1772:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1774:	6b 85       	ldd	r22, Y+11	; 0x0b
    1776:	7c 85       	ldd	r23, Y+12	; 0x0c
    1778:	8d 85       	ldd	r24, Y+13	; 0x0d
    177a:	9e 85       	ldd	r25, Y+14	; 0x0e
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	4a ef       	ldi	r20, 0xFA	; 250
    1782:	54 e4       	ldi	r21, 0x44	; 68
    1784:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	8f 83       	std	Y+7, r24	; 0x07
    178e:	98 87       	std	Y+8, r25	; 0x08
    1790:	a9 87       	std	Y+9, r26	; 0x09
    1792:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1794:	6f 81       	ldd	r22, Y+7	; 0x07
    1796:	78 85       	ldd	r23, Y+8	; 0x08
    1798:	89 85       	ldd	r24, Y+9	; 0x09
    179a:	9a 85       	ldd	r25, Y+10	; 0x0a
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	40 e8       	ldi	r20, 0x80	; 128
    17a2:	5f e3       	ldi	r21, 0x3F	; 63
    17a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17a8:	88 23       	and	r24, r24
    17aa:	2c f4       	brge	.+10     	; 0x17b6 <HLCD_VoidInit+0x4fc>
		__ticks = 1;
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	9e 83       	std	Y+6, r25	; 0x06
    17b2:	8d 83       	std	Y+5, r24	; 0x05
    17b4:	3f c0       	rjmp	.+126    	; 0x1834 <HLCD_VoidInit+0x57a>
	else if (__tmp > 65535)
    17b6:	6f 81       	ldd	r22, Y+7	; 0x07
    17b8:	78 85       	ldd	r23, Y+8	; 0x08
    17ba:	89 85       	ldd	r24, Y+9	; 0x09
    17bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	3f ef       	ldi	r19, 0xFF	; 255
    17c2:	4f e7       	ldi	r20, 0x7F	; 127
    17c4:	57 e4       	ldi	r21, 0x47	; 71
    17c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17ca:	18 16       	cp	r1, r24
    17cc:	4c f5       	brge	.+82     	; 0x1820 <HLCD_VoidInit+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    17d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    17d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    17d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	40 e2       	ldi	r20, 0x20	; 32
    17dc:	51 e4       	ldi	r21, 0x41	; 65
    17de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e2:	dc 01       	movw	r26, r24
    17e4:	cb 01       	movw	r24, r22
    17e6:	bc 01       	movw	r22, r24
    17e8:	cd 01       	movw	r24, r26
    17ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	9e 83       	std	Y+6, r25	; 0x06
    17f4:	8d 83       	std	Y+5, r24	; 0x05
    17f6:	0f c0       	rjmp	.+30     	; 0x1816 <HLCD_VoidInit+0x55c>
    17f8:	88 ec       	ldi	r24, 0xC8	; 200
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	9c 83       	std	Y+4, r25	; 0x04
    17fe:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	9c 81       	ldd	r25, Y+4	; 0x04
    1804:	01 97       	sbiw	r24, 0x01	; 1
    1806:	f1 f7       	brne	.-4      	; 0x1804 <HLCD_VoidInit+0x54a>
    1808:	9c 83       	std	Y+4, r25	; 0x04
    180a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    180c:	8d 81       	ldd	r24, Y+5	; 0x05
    180e:	9e 81       	ldd	r25, Y+6	; 0x06
    1810:	01 97       	sbiw	r24, 0x01	; 1
    1812:	9e 83       	std	Y+6, r25	; 0x06
    1814:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1816:	8d 81       	ldd	r24, Y+5	; 0x05
    1818:	9e 81       	ldd	r25, Y+6	; 0x06
    181a:	00 97       	sbiw	r24, 0x00	; 0
    181c:	69 f7       	brne	.-38     	; 0x17f8 <HLCD_VoidInit+0x53e>
    181e:	14 c0       	rjmp	.+40     	; 0x1848 <HLCD_VoidInit+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1820:	6f 81       	ldd	r22, Y+7	; 0x07
    1822:	78 85       	ldd	r23, Y+8	; 0x08
    1824:	89 85       	ldd	r24, Y+9	; 0x09
    1826:	9a 85       	ldd	r25, Y+10	; 0x0a
    1828:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    182c:	dc 01       	movw	r26, r24
    182e:	cb 01       	movw	r24, r22
    1830:	9e 83       	std	Y+6, r25	; 0x06
    1832:	8d 83       	std	Y+5, r24	; 0x05
    1834:	8d 81       	ldd	r24, Y+5	; 0x05
    1836:	9e 81       	ldd	r25, Y+6	; 0x06
    1838:	9a 83       	std	Y+2, r25	; 0x02
    183a:	89 83       	std	Y+1, r24	; 0x01
    183c:	89 81       	ldd	r24, Y+1	; 0x01
    183e:	9a 81       	ldd	r25, Y+2	; 0x02
    1840:	01 97       	sbiw	r24, 0x01	; 1
    1842:	f1 f7       	brne	.-4      	; 0x1840 <HLCD_VoidInit+0x586>
    1844:	9a 83       	std	Y+2, r25	; 0x02
    1846:	89 83       	std	Y+1, r24	; 0x01
	
	/*Entry Mode Set Ù…Ø´ Ù„Ø§Ø²Ù…*/
	/*HLCD_VoidSendCommand(0b000001IS);*/
	
	
}
    1848:	c4 5b       	subi	r28, 0xB4	; 180
    184a:	df 4f       	sbci	r29, 0xFF	; 255
    184c:	0f b6       	in	r0, 0x3f	; 63
    184e:	f8 94       	cli
    1850:	de bf       	out	0x3e, r29	; 62
    1852:	0f be       	out	0x3f, r0	; 63
    1854:	cd bf       	out	0x3d, r28	; 61
    1856:	cf 91       	pop	r28
    1858:	df 91       	pop	r29
    185a:	1f 91       	pop	r17
    185c:	0f 91       	pop	r16
    185e:	08 95       	ret

00001860 <HLCD_VoidInit4Bit>:

void HLCD_VoidInit4Bit(void)
{
    1860:	0f 93       	push	r16
    1862:	1f 93       	push	r17
    1864:	df 93       	push	r29
    1866:	cf 93       	push	r28
    1868:	cd b7       	in	r28, 0x3d	; 61
    186a:	de b7       	in	r29, 0x3e	; 62
    186c:	cc 54       	subi	r28, 0x4C	; 76
    186e:	d0 40       	sbci	r29, 0x00	; 0
    1870:	0f b6       	in	r0, 0x3f	; 63
    1872:	f8 94       	cli
    1874:	de bf       	out	0x3e, r29	; 62
    1876:	0f be       	out	0x3f, r0	; 63
    1878:	cd bf       	out	0x3d, r28	; 61
	/*Set Direction Of alla Pins*/
	
	MDIO_VoidSetPortDirection(HLCD_DataPort,0xff);
    187a:	82 e0       	ldi	r24, 0x02	; 2
    187c:	6f ef       	ldi	r22, 0xFF	; 255
    187e:	0e 94 11 13 	call	0x2622	; 0x2622 <MDIO_VoidSetPortDirection>
	MDIO_VoidSetPinDirection(HLCD_Rs_Port,0,1);
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	60 e0       	ldi	r22, 0x00	; 0
    1886:	41 e0       	ldi	r20, 0x01	; 1
    1888:	0e 94 98 10 	call	0x2130	; 0x2130 <MDIO_VoidSetPinDirection>
	MDIO_VoidSetPinDirection(HLCD_Rw_Port,1,1);
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	61 e0       	ldi	r22, 0x01	; 1
    1890:	41 e0       	ldi	r20, 0x01	; 1
    1892:	0e 94 98 10 	call	0x2130	; 0x2130 <MDIO_VoidSetPinDirection>
	MDIO_VoidSetPinDirection(HLCD_EN_Port,2,1);
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	62 e0       	ldi	r22, 0x02	; 2
    189a:	41 e0       	ldi	r20, 0x01	; 1
    189c:	0e 94 98 10 	call	0x2130	; 0x2130 <MDIO_VoidSetPinDirection>
    18a0:	fe 01       	movw	r30, r28
    18a2:	e7 5b       	subi	r30, 0xB7	; 183
    18a4:	ff 4f       	sbci	r31, 0xFF	; 255
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	a0 e2       	ldi	r26, 0x20	; 32
    18ac:	b2 e4       	ldi	r27, 0x42	; 66
    18ae:	80 83       	st	Z, r24
    18b0:	91 83       	std	Z+1, r25	; 0x01
    18b2:	a2 83       	std	Z+2, r26	; 0x02
    18b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b6:	8e 01       	movw	r16, r28
    18b8:	0b 5b       	subi	r16, 0xBB	; 187
    18ba:	1f 4f       	sbci	r17, 0xFF	; 255
    18bc:	fe 01       	movw	r30, r28
    18be:	e7 5b       	subi	r30, 0xB7	; 183
    18c0:	ff 4f       	sbci	r31, 0xFF	; 255
    18c2:	60 81       	ld	r22, Z
    18c4:	71 81       	ldd	r23, Z+1	; 0x01
    18c6:	82 81       	ldd	r24, Z+2	; 0x02
    18c8:	93 81       	ldd	r25, Z+3	; 0x03
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	4a ef       	ldi	r20, 0xFA	; 250
    18d0:	54 e4       	ldi	r21, 0x44	; 68
    18d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d6:	dc 01       	movw	r26, r24
    18d8:	cb 01       	movw	r24, r22
    18da:	f8 01       	movw	r30, r16
    18dc:	80 83       	st	Z, r24
    18de:	91 83       	std	Z+1, r25	; 0x01
    18e0:	a2 83       	std	Z+2, r26	; 0x02
    18e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18e4:	fe 01       	movw	r30, r28
    18e6:	eb 5b       	subi	r30, 0xBB	; 187
    18e8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ea:	60 81       	ld	r22, Z
    18ec:	71 81       	ldd	r23, Z+1	; 0x01
    18ee:	82 81       	ldd	r24, Z+2	; 0x02
    18f0:	93 81       	ldd	r25, Z+3	; 0x03
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	40 e8       	ldi	r20, 0x80	; 128
    18f8:	5f e3       	ldi	r21, 0x3F	; 63
    18fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18fe:	88 23       	and	r24, r24
    1900:	44 f4       	brge	.+16     	; 0x1912 <HLCD_VoidInit4Bit+0xb2>
		__ticks = 1;
    1902:	fe 01       	movw	r30, r28
    1904:	ed 5b       	subi	r30, 0xBD	; 189
    1906:	ff 4f       	sbci	r31, 0xFF	; 255
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	91 83       	std	Z+1, r25	; 0x01
    190e:	80 83       	st	Z, r24
    1910:	64 c0       	rjmp	.+200    	; 0x19da <HLCD_VoidInit4Bit+0x17a>
	else if (__tmp > 65535)
    1912:	fe 01       	movw	r30, r28
    1914:	eb 5b       	subi	r30, 0xBB	; 187
    1916:	ff 4f       	sbci	r31, 0xFF	; 255
    1918:	60 81       	ld	r22, Z
    191a:	71 81       	ldd	r23, Z+1	; 0x01
    191c:	82 81       	ldd	r24, Z+2	; 0x02
    191e:	93 81       	ldd	r25, Z+3	; 0x03
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	3f ef       	ldi	r19, 0xFF	; 255
    1924:	4f e7       	ldi	r20, 0x7F	; 127
    1926:	57 e4       	ldi	r21, 0x47	; 71
    1928:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    192c:	18 16       	cp	r1, r24
    192e:	0c f0       	brlt	.+2      	; 0x1932 <HLCD_VoidInit4Bit+0xd2>
    1930:	43 c0       	rjmp	.+134    	; 0x19b8 <HLCD_VoidInit4Bit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1932:	fe 01       	movw	r30, r28
    1934:	e7 5b       	subi	r30, 0xB7	; 183
    1936:	ff 4f       	sbci	r31, 0xFF	; 255
    1938:	60 81       	ld	r22, Z
    193a:	71 81       	ldd	r23, Z+1	; 0x01
    193c:	82 81       	ldd	r24, Z+2	; 0x02
    193e:	93 81       	ldd	r25, Z+3	; 0x03
    1940:	20 e0       	ldi	r18, 0x00	; 0
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	40 e2       	ldi	r20, 0x20	; 32
    1946:	51 e4       	ldi	r21, 0x41	; 65
    1948:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	8e 01       	movw	r16, r28
    1952:	0d 5b       	subi	r16, 0xBD	; 189
    1954:	1f 4f       	sbci	r17, 0xFF	; 255
    1956:	bc 01       	movw	r22, r24
    1958:	cd 01       	movw	r24, r26
    195a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    195e:	dc 01       	movw	r26, r24
    1960:	cb 01       	movw	r24, r22
    1962:	f8 01       	movw	r30, r16
    1964:	91 83       	std	Z+1, r25	; 0x01
    1966:	80 83       	st	Z, r24
    1968:	1f c0       	rjmp	.+62     	; 0x19a8 <HLCD_VoidInit4Bit+0x148>
    196a:	fe 01       	movw	r30, r28
    196c:	ef 5b       	subi	r30, 0xBF	; 191
    196e:	ff 4f       	sbci	r31, 0xFF	; 255
    1970:	88 ec       	ldi	r24, 0xC8	; 200
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	91 83       	std	Z+1, r25	; 0x01
    1976:	80 83       	st	Z, r24
    1978:	fe 01       	movw	r30, r28
    197a:	ef 5b       	subi	r30, 0xBF	; 191
    197c:	ff 4f       	sbci	r31, 0xFF	; 255
    197e:	80 81       	ld	r24, Z
    1980:	91 81       	ldd	r25, Z+1	; 0x01
    1982:	01 97       	sbiw	r24, 0x01	; 1
    1984:	f1 f7       	brne	.-4      	; 0x1982 <HLCD_VoidInit4Bit+0x122>
    1986:	fe 01       	movw	r30, r28
    1988:	ef 5b       	subi	r30, 0xBF	; 191
    198a:	ff 4f       	sbci	r31, 0xFF	; 255
    198c:	91 83       	std	Z+1, r25	; 0x01
    198e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1990:	de 01       	movw	r26, r28
    1992:	ad 5b       	subi	r26, 0xBD	; 189
    1994:	bf 4f       	sbci	r27, 0xFF	; 255
    1996:	fe 01       	movw	r30, r28
    1998:	ed 5b       	subi	r30, 0xBD	; 189
    199a:	ff 4f       	sbci	r31, 0xFF	; 255
    199c:	80 81       	ld	r24, Z
    199e:	91 81       	ldd	r25, Z+1	; 0x01
    19a0:	01 97       	sbiw	r24, 0x01	; 1
    19a2:	11 96       	adiw	r26, 0x01	; 1
    19a4:	9c 93       	st	X, r25
    19a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a8:	fe 01       	movw	r30, r28
    19aa:	ed 5b       	subi	r30, 0xBD	; 189
    19ac:	ff 4f       	sbci	r31, 0xFF	; 255
    19ae:	80 81       	ld	r24, Z
    19b0:	91 81       	ldd	r25, Z+1	; 0x01
    19b2:	00 97       	sbiw	r24, 0x00	; 0
    19b4:	d1 f6       	brne	.-76     	; 0x196a <HLCD_VoidInit4Bit+0x10a>
    19b6:	24 c0       	rjmp	.+72     	; 0x1a00 <HLCD_VoidInit4Bit+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b8:	8e 01       	movw	r16, r28
    19ba:	0d 5b       	subi	r16, 0xBD	; 189
    19bc:	1f 4f       	sbci	r17, 0xFF	; 255
    19be:	fe 01       	movw	r30, r28
    19c0:	eb 5b       	subi	r30, 0xBB	; 187
    19c2:	ff 4f       	sbci	r31, 0xFF	; 255
    19c4:	60 81       	ld	r22, Z
    19c6:	71 81       	ldd	r23, Z+1	; 0x01
    19c8:	82 81       	ldd	r24, Z+2	; 0x02
    19ca:	93 81       	ldd	r25, Z+3	; 0x03
    19cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d0:	dc 01       	movw	r26, r24
    19d2:	cb 01       	movw	r24, r22
    19d4:	f8 01       	movw	r30, r16
    19d6:	91 83       	std	Z+1, r25	; 0x01
    19d8:	80 83       	st	Z, r24
    19da:	fe 01       	movw	r30, r28
    19dc:	ed 5b       	subi	r30, 0xBD	; 189
    19de:	ff 4f       	sbci	r31, 0xFF	; 255
    19e0:	80 81       	ld	r24, Z
    19e2:	91 81       	ldd	r25, Z+1	; 0x01
    19e4:	fe 01       	movw	r30, r28
    19e6:	ff 96       	adiw	r30, 0x3f	; 63
    19e8:	91 83       	std	Z+1, r25	; 0x01
    19ea:	80 83       	st	Z, r24
    19ec:	fe 01       	movw	r30, r28
    19ee:	ff 96       	adiw	r30, 0x3f	; 63
    19f0:	80 81       	ld	r24, Z
    19f2:	91 81       	ldd	r25, Z+1	; 0x01
    19f4:	01 97       	sbiw	r24, 0x01	; 1
    19f6:	f1 f7       	brne	.-4      	; 0x19f4 <HLCD_VoidInit4Bit+0x194>
    19f8:	fe 01       	movw	r30, r28
    19fa:	ff 96       	adiw	r30, 0x3f	; 63
    19fc:	91 83       	std	Z+1, r25	; 0x01
    19fe:	80 83       	st	Z, r24
	
	/*wait more than 30ms*/
	_delay_ms(40);
	
	/*Function Set */
	HLCD_VoidSendCommand(0b00100000);
    1a00:	80 e2       	ldi	r24, 0x20	; 32
    1a02:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
	
	/*Function Set */
	HLCD_VoidSendCommand(0b00100000);
    1a06:	80 e2       	ldi	r24, 0x20	; 32
    1a08:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
    

	/*Function Set (Set No.of Lines & Font Type*/
	HLCD_VoidSendCommand(0b11000000);
    1a0c:	80 ec       	ldi	r24, 0xC0	; 192
    1a0e:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
    1a12:	80 e0       	ldi	r24, 0x00	; 0
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	a4 e3       	ldi	r26, 0x34	; 52
    1a18:	b2 e4       	ldi	r27, 0x42	; 66
    1a1a:	8b af       	std	Y+59, r24	; 0x3b
    1a1c:	9c af       	std	Y+60, r25	; 0x3c
    1a1e:	ad af       	std	Y+61, r26	; 0x3d
    1a20:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a22:	6b ad       	ldd	r22, Y+59	; 0x3b
    1a24:	7c ad       	ldd	r23, Y+60	; 0x3c
    1a26:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a28:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a2a:	2b ea       	ldi	r18, 0xAB	; 171
    1a2c:	3a ea       	ldi	r19, 0xAA	; 170
    1a2e:	4a e2       	ldi	r20, 0x2A	; 42
    1a30:	50 e4       	ldi	r21, 0x40	; 64
    1a32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a36:	dc 01       	movw	r26, r24
    1a38:	cb 01       	movw	r24, r22
    1a3a:	8f ab       	std	Y+55, r24	; 0x37
    1a3c:	98 af       	std	Y+56, r25	; 0x38
    1a3e:	a9 af       	std	Y+57, r26	; 0x39
    1a40:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1a42:	6f a9       	ldd	r22, Y+55	; 0x37
    1a44:	78 ad       	ldd	r23, Y+56	; 0x38
    1a46:	89 ad       	ldd	r24, Y+57	; 0x39
    1a48:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	40 e8       	ldi	r20, 0x80	; 128
    1a50:	5f e3       	ldi	r21, 0x3F	; 63
    1a52:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a56:	88 23       	and	r24, r24
    1a58:	1c f4       	brge	.+6      	; 0x1a60 <HLCD_VoidInit4Bit+0x200>
		__ticks = 1;
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	8e ab       	std	Y+54, r24	; 0x36
    1a5e:	91 c0       	rjmp	.+290    	; 0x1b82 <HLCD_VoidInit4Bit+0x322>
	else if (__tmp > 255)
    1a60:	6f a9       	ldd	r22, Y+55	; 0x37
    1a62:	78 ad       	ldd	r23, Y+56	; 0x38
    1a64:	89 ad       	ldd	r24, Y+57	; 0x39
    1a66:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	4f e7       	ldi	r20, 0x7F	; 127
    1a6e:	53 e4       	ldi	r21, 0x43	; 67
    1a70:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a74:	18 16       	cp	r1, r24
    1a76:	0c f0       	brlt	.+2      	; 0x1a7a <HLCD_VoidInit4Bit+0x21a>
    1a78:	7b c0       	rjmp	.+246    	; 0x1b70 <HLCD_VoidInit4Bit+0x310>
	{
		_delay_ms(__us / 1000.0);
    1a7a:	6b ad       	ldd	r22, Y+59	; 0x3b
    1a7c:	7c ad       	ldd	r23, Y+60	; 0x3c
    1a7e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a80:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	4a e7       	ldi	r20, 0x7A	; 122
    1a88:	54 e4       	ldi	r21, 0x44	; 68
    1a8a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	8a ab       	std	Y+50, r24	; 0x32
    1a94:	9b ab       	std	Y+51, r25	; 0x33
    1a96:	ac ab       	std	Y+52, r26	; 0x34
    1a98:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a9a:	6a a9       	ldd	r22, Y+50	; 0x32
    1a9c:	7b a9       	ldd	r23, Y+51	; 0x33
    1a9e:	8c a9       	ldd	r24, Y+52	; 0x34
    1aa0:	9d a9       	ldd	r25, Y+53	; 0x35
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	4a ef       	ldi	r20, 0xFA	; 250
    1aa8:	54 e4       	ldi	r21, 0x44	; 68
    1aaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	8e a7       	std	Y+46, r24	; 0x2e
    1ab4:	9f a7       	std	Y+47, r25	; 0x2f
    1ab6:	a8 ab       	std	Y+48, r26	; 0x30
    1ab8:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1aba:	6e a5       	ldd	r22, Y+46	; 0x2e
    1abc:	7f a5       	ldd	r23, Y+47	; 0x2f
    1abe:	88 a9       	ldd	r24, Y+48	; 0x30
    1ac0:	99 a9       	ldd	r25, Y+49	; 0x31
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	40 e8       	ldi	r20, 0x80	; 128
    1ac8:	5f e3       	ldi	r21, 0x3F	; 63
    1aca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ace:	88 23       	and	r24, r24
    1ad0:	2c f4       	brge	.+10     	; 0x1adc <HLCD_VoidInit4Bit+0x27c>
		__ticks = 1;
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	9d a7       	std	Y+45, r25	; 0x2d
    1ad8:	8c a7       	std	Y+44, r24	; 0x2c
    1ada:	3f c0       	rjmp	.+126    	; 0x1b5a <HLCD_VoidInit4Bit+0x2fa>
	else if (__tmp > 65535)
    1adc:	6e a5       	ldd	r22, Y+46	; 0x2e
    1ade:	7f a5       	ldd	r23, Y+47	; 0x2f
    1ae0:	88 a9       	ldd	r24, Y+48	; 0x30
    1ae2:	99 a9       	ldd	r25, Y+49	; 0x31
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	3f ef       	ldi	r19, 0xFF	; 255
    1ae8:	4f e7       	ldi	r20, 0x7F	; 127
    1aea:	57 e4       	ldi	r21, 0x47	; 71
    1aec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1af0:	18 16       	cp	r1, r24
    1af2:	4c f5       	brge	.+82     	; 0x1b46 <HLCD_VoidInit4Bit+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af4:	6a a9       	ldd	r22, Y+50	; 0x32
    1af6:	7b a9       	ldd	r23, Y+51	; 0x33
    1af8:	8c a9       	ldd	r24, Y+52	; 0x34
    1afa:	9d a9       	ldd	r25, Y+53	; 0x35
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	40 e2       	ldi	r20, 0x20	; 32
    1b02:	51 e4       	ldi	r21, 0x41	; 65
    1b04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	bc 01       	movw	r22, r24
    1b0e:	cd 01       	movw	r24, r26
    1b10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	9d a7       	std	Y+45, r25	; 0x2d
    1b1a:	8c a7       	std	Y+44, r24	; 0x2c
    1b1c:	0f c0       	rjmp	.+30     	; 0x1b3c <HLCD_VoidInit4Bit+0x2dc>
    1b1e:	88 ec       	ldi	r24, 0xC8	; 200
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	9b a7       	std	Y+43, r25	; 0x2b
    1b24:	8a a7       	std	Y+42, r24	; 0x2a
    1b26:	8a a5       	ldd	r24, Y+42	; 0x2a
    1b28:	9b a5       	ldd	r25, Y+43	; 0x2b
    1b2a:	01 97       	sbiw	r24, 0x01	; 1
    1b2c:	f1 f7       	brne	.-4      	; 0x1b2a <HLCD_VoidInit4Bit+0x2ca>
    1b2e:	9b a7       	std	Y+43, r25	; 0x2b
    1b30:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b32:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b34:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	9d a7       	std	Y+45, r25	; 0x2d
    1b3a:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b3c:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b3e:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b40:	00 97       	sbiw	r24, 0x00	; 0
    1b42:	69 f7       	brne	.-38     	; 0x1b1e <HLCD_VoidInit4Bit+0x2be>
    1b44:	24 c0       	rjmp	.+72     	; 0x1b8e <HLCD_VoidInit4Bit+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b46:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b48:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b4a:	88 a9       	ldd	r24, Y+48	; 0x30
    1b4c:	99 a9       	ldd	r25, Y+49	; 0x31
    1b4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b52:	dc 01       	movw	r26, r24
    1b54:	cb 01       	movw	r24, r22
    1b56:	9d a7       	std	Y+45, r25	; 0x2d
    1b58:	8c a7       	std	Y+44, r24	; 0x2c
    1b5a:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b5c:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b5e:	99 a7       	std	Y+41, r25	; 0x29
    1b60:	88 a7       	std	Y+40, r24	; 0x28
    1b62:	88 a5       	ldd	r24, Y+40	; 0x28
    1b64:	99 a5       	ldd	r25, Y+41	; 0x29
    1b66:	01 97       	sbiw	r24, 0x01	; 1
    1b68:	f1 f7       	brne	.-4      	; 0x1b66 <HLCD_VoidInit4Bit+0x306>
    1b6a:	99 a7       	std	Y+41, r25	; 0x29
    1b6c:	88 a7       	std	Y+40, r24	; 0x28
    1b6e:	0f c0       	rjmp	.+30     	; 0x1b8e <HLCD_VoidInit4Bit+0x32e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b70:	6f a9       	ldd	r22, Y+55	; 0x37
    1b72:	78 ad       	ldd	r23, Y+56	; 0x38
    1b74:	89 ad       	ldd	r24, Y+57	; 0x39
    1b76:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	8e ab       	std	Y+54, r24	; 0x36
    1b82:	8e a9       	ldd	r24, Y+54	; 0x36
    1b84:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b86:	8f a1       	ldd	r24, Y+39	; 0x27
    1b88:	8a 95       	dec	r24
    1b8a:	f1 f7       	brne	.-4      	; 0x1b88 <HLCD_VoidInit4Bit+0x328>
    1b8c:	8f a3       	std	Y+39, r24	; 0x27
	
	 /*Wait More Than 39us*/
    _delay_us(45);
	
	/*Display ON/OFF Control*/
    HLCD_VoidSendCommand(0b00000000);
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
    1b90:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b11110000);
    1b94:	80 ef       	ldi	r24, 0xF0	; 240
    1b96:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
    1b9a:	80 e0       	ldi	r24, 0x00	; 0
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	a4 e3       	ldi	r26, 0x34	; 52
    1ba0:	b2 e4       	ldi	r27, 0x42	; 66
    1ba2:	8b a3       	std	Y+35, r24	; 0x23
    1ba4:	9c a3       	std	Y+36, r25	; 0x24
    1ba6:	ad a3       	std	Y+37, r26	; 0x25
    1ba8:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1baa:	6b a1       	ldd	r22, Y+35	; 0x23
    1bac:	7c a1       	ldd	r23, Y+36	; 0x24
    1bae:	8d a1       	ldd	r24, Y+37	; 0x25
    1bb0:	9e a1       	ldd	r25, Y+38	; 0x26
    1bb2:	2b ea       	ldi	r18, 0xAB	; 171
    1bb4:	3a ea       	ldi	r19, 0xAA	; 170
    1bb6:	4a e2       	ldi	r20, 0x2A	; 42
    1bb8:	50 e4       	ldi	r21, 0x40	; 64
    1bba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	8f 8f       	std	Y+31, r24	; 0x1f
    1bc4:	98 a3       	std	Y+32, r25	; 0x20
    1bc6:	a9 a3       	std	Y+33, r26	; 0x21
    1bc8:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1bca:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1bcc:	78 a1       	ldd	r23, Y+32	; 0x20
    1bce:	89 a1       	ldd	r24, Y+33	; 0x21
    1bd0:	9a a1       	ldd	r25, Y+34	; 0x22
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	40 e8       	ldi	r20, 0x80	; 128
    1bd8:	5f e3       	ldi	r21, 0x3F	; 63
    1bda:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bde:	88 23       	and	r24, r24
    1be0:	1c f4       	brge	.+6      	; 0x1be8 <HLCD_VoidInit4Bit+0x388>
		__ticks = 1;
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	8e 8f       	std	Y+30, r24	; 0x1e
    1be6:	91 c0       	rjmp	.+290    	; 0x1d0a <HLCD_VoidInit4Bit+0x4aa>
	else if (__tmp > 255)
    1be8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1bea:	78 a1       	ldd	r23, Y+32	; 0x20
    1bec:	89 a1       	ldd	r24, Y+33	; 0x21
    1bee:	9a a1       	ldd	r25, Y+34	; 0x22
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	4f e7       	ldi	r20, 0x7F	; 127
    1bf6:	53 e4       	ldi	r21, 0x43	; 67
    1bf8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bfc:	18 16       	cp	r1, r24
    1bfe:	0c f0       	brlt	.+2      	; 0x1c02 <HLCD_VoidInit4Bit+0x3a2>
    1c00:	7b c0       	rjmp	.+246    	; 0x1cf8 <HLCD_VoidInit4Bit+0x498>
	{
		_delay_ms(__us / 1000.0);
    1c02:	6b a1       	ldd	r22, Y+35	; 0x23
    1c04:	7c a1       	ldd	r23, Y+36	; 0x24
    1c06:	8d a1       	ldd	r24, Y+37	; 0x25
    1c08:	9e a1       	ldd	r25, Y+38	; 0x26
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	4a e7       	ldi	r20, 0x7A	; 122
    1c10:	54 e4       	ldi	r21, 0x44	; 68
    1c12:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c16:	dc 01       	movw	r26, r24
    1c18:	cb 01       	movw	r24, r22
    1c1a:	8a 8f       	std	Y+26, r24	; 0x1a
    1c1c:	9b 8f       	std	Y+27, r25	; 0x1b
    1c1e:	ac 8f       	std	Y+28, r26	; 0x1c
    1c20:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c22:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c24:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c26:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c28:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	4a ef       	ldi	r20, 0xFA	; 250
    1c30:	54 e4       	ldi	r21, 0x44	; 68
    1c32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	8e 8b       	std	Y+22, r24	; 0x16
    1c3c:	9f 8b       	std	Y+23, r25	; 0x17
    1c3e:	a8 8f       	std	Y+24, r26	; 0x18
    1c40:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1c42:	6e 89       	ldd	r22, Y+22	; 0x16
    1c44:	7f 89       	ldd	r23, Y+23	; 0x17
    1c46:	88 8d       	ldd	r24, Y+24	; 0x18
    1c48:	99 8d       	ldd	r25, Y+25	; 0x19
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	40 e8       	ldi	r20, 0x80	; 128
    1c50:	5f e3       	ldi	r21, 0x3F	; 63
    1c52:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c56:	88 23       	and	r24, r24
    1c58:	2c f4       	brge	.+10     	; 0x1c64 <HLCD_VoidInit4Bit+0x404>
		__ticks = 1;
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	9d 8b       	std	Y+21, r25	; 0x15
    1c60:	8c 8b       	std	Y+20, r24	; 0x14
    1c62:	3f c0       	rjmp	.+126    	; 0x1ce2 <HLCD_VoidInit4Bit+0x482>
	else if (__tmp > 65535)
    1c64:	6e 89       	ldd	r22, Y+22	; 0x16
    1c66:	7f 89       	ldd	r23, Y+23	; 0x17
    1c68:	88 8d       	ldd	r24, Y+24	; 0x18
    1c6a:	99 8d       	ldd	r25, Y+25	; 0x19
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	3f ef       	ldi	r19, 0xFF	; 255
    1c70:	4f e7       	ldi	r20, 0x7F	; 127
    1c72:	57 e4       	ldi	r21, 0x47	; 71
    1c74:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c78:	18 16       	cp	r1, r24
    1c7a:	4c f5       	brge	.+82     	; 0x1cce <HLCD_VoidInit4Bit+0x46e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c7c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c7e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c80:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c82:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	40 e2       	ldi	r20, 0x20	; 32
    1c8a:	51 e4       	ldi	r21, 0x41	; 65
    1c8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c90:	dc 01       	movw	r26, r24
    1c92:	cb 01       	movw	r24, r22
    1c94:	bc 01       	movw	r22, r24
    1c96:	cd 01       	movw	r24, r26
    1c98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	9d 8b       	std	Y+21, r25	; 0x15
    1ca2:	8c 8b       	std	Y+20, r24	; 0x14
    1ca4:	0f c0       	rjmp	.+30     	; 0x1cc4 <HLCD_VoidInit4Bit+0x464>
    1ca6:	88 ec       	ldi	r24, 0xC8	; 200
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	9b 8b       	std	Y+19, r25	; 0x13
    1cac:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cae:	8a 89       	ldd	r24, Y+18	; 0x12
    1cb0:	9b 89       	ldd	r25, Y+19	; 0x13
    1cb2:	01 97       	sbiw	r24, 0x01	; 1
    1cb4:	f1 f7       	brne	.-4      	; 0x1cb2 <HLCD_VoidInit4Bit+0x452>
    1cb6:	9b 8b       	std	Y+19, r25	; 0x13
    1cb8:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cba:	8c 89       	ldd	r24, Y+20	; 0x14
    1cbc:	9d 89       	ldd	r25, Y+21	; 0x15
    1cbe:	01 97       	sbiw	r24, 0x01	; 1
    1cc0:	9d 8b       	std	Y+21, r25	; 0x15
    1cc2:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc4:	8c 89       	ldd	r24, Y+20	; 0x14
    1cc6:	9d 89       	ldd	r25, Y+21	; 0x15
    1cc8:	00 97       	sbiw	r24, 0x00	; 0
    1cca:	69 f7       	brne	.-38     	; 0x1ca6 <HLCD_VoidInit4Bit+0x446>
    1ccc:	24 c0       	rjmp	.+72     	; 0x1d16 <HLCD_VoidInit4Bit+0x4b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cce:	6e 89       	ldd	r22, Y+22	; 0x16
    1cd0:	7f 89       	ldd	r23, Y+23	; 0x17
    1cd2:	88 8d       	ldd	r24, Y+24	; 0x18
    1cd4:	99 8d       	ldd	r25, Y+25	; 0x19
    1cd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	9d 8b       	std	Y+21, r25	; 0x15
    1ce0:	8c 8b       	std	Y+20, r24	; 0x14
    1ce2:	8c 89       	ldd	r24, Y+20	; 0x14
    1ce4:	9d 89       	ldd	r25, Y+21	; 0x15
    1ce6:	99 8b       	std	Y+17, r25	; 0x11
    1ce8:	88 8b       	std	Y+16, r24	; 0x10
    1cea:	88 89       	ldd	r24, Y+16	; 0x10
    1cec:	99 89       	ldd	r25, Y+17	; 0x11
    1cee:	01 97       	sbiw	r24, 0x01	; 1
    1cf0:	f1 f7       	brne	.-4      	; 0x1cee <HLCD_VoidInit4Bit+0x48e>
    1cf2:	99 8b       	std	Y+17, r25	; 0x11
    1cf4:	88 8b       	std	Y+16, r24	; 0x10
    1cf6:	0f c0       	rjmp	.+30     	; 0x1d16 <HLCD_VoidInit4Bit+0x4b6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1cf8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1cfa:	78 a1       	ldd	r23, Y+32	; 0x20
    1cfc:	89 a1       	ldd	r24, Y+33	; 0x21
    1cfe:	9a a1       	ldd	r25, Y+34	; 0x22
    1d00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d04:	dc 01       	movw	r26, r24
    1d06:	cb 01       	movw	r24, r22
    1d08:	8e 8f       	std	Y+30, r24	; 0x1e
    1d0a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d0c:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d10:	8a 95       	dec	r24
    1d12:	f1 f7       	brne	.-4      	; 0x1d10 <HLCD_VoidInit4Bit+0x4b0>
    1d14:	8f 87       	std	Y+15, r24	; 0x0f
	
	/*Wait More Than 39us*/
    _delay_us(45);
	
	/*Display Clear*/
	HLCD_VoidSendCommand(0b00000000);
    1d16:	80 e0       	ldi	r24, 0x00	; 0
    1d18:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b00010000);
    1d1c:	80 e1       	ldi	r24, 0x10	; 16
    1d1e:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
    1d22:	80 e0       	ldi	r24, 0x00	; 0
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	a0 e2       	ldi	r26, 0x20	; 32
    1d28:	b1 e4       	ldi	r27, 0x41	; 65
    1d2a:	8b 87       	std	Y+11, r24	; 0x0b
    1d2c:	9c 87       	std	Y+12, r25	; 0x0c
    1d2e:	ad 87       	std	Y+13, r26	; 0x0d
    1d30:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d32:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d34:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d36:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d38:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	4a ef       	ldi	r20, 0xFA	; 250
    1d40:	54 e4       	ldi	r21, 0x44	; 68
    1d42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	8f 83       	std	Y+7, r24	; 0x07
    1d4c:	98 87       	std	Y+8, r25	; 0x08
    1d4e:	a9 87       	std	Y+9, r26	; 0x09
    1d50:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d52:	6f 81       	ldd	r22, Y+7	; 0x07
    1d54:	78 85       	ldd	r23, Y+8	; 0x08
    1d56:	89 85       	ldd	r24, Y+9	; 0x09
    1d58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	40 e8       	ldi	r20, 0x80	; 128
    1d60:	5f e3       	ldi	r21, 0x3F	; 63
    1d62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d66:	88 23       	and	r24, r24
    1d68:	2c f4       	brge	.+10     	; 0x1d74 <HLCD_VoidInit4Bit+0x514>
		__ticks = 1;
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	9e 83       	std	Y+6, r25	; 0x06
    1d70:	8d 83       	std	Y+5, r24	; 0x05
    1d72:	3f c0       	rjmp	.+126    	; 0x1df2 <HLCD_VoidInit4Bit+0x592>
	else if (__tmp > 65535)
    1d74:	6f 81       	ldd	r22, Y+7	; 0x07
    1d76:	78 85       	ldd	r23, Y+8	; 0x08
    1d78:	89 85       	ldd	r24, Y+9	; 0x09
    1d7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	3f ef       	ldi	r19, 0xFF	; 255
    1d80:	4f e7       	ldi	r20, 0x7F	; 127
    1d82:	57 e4       	ldi	r21, 0x47	; 71
    1d84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d88:	18 16       	cp	r1, r24
    1d8a:	4c f5       	brge	.+82     	; 0x1dde <HLCD_VoidInit4Bit+0x57e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d90:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d92:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	40 e2       	ldi	r20, 0x20	; 32
    1d9a:	51 e4       	ldi	r21, 0x41	; 65
    1d9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	bc 01       	movw	r22, r24
    1da6:	cd 01       	movw	r24, r26
    1da8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	9e 83       	std	Y+6, r25	; 0x06
    1db2:	8d 83       	std	Y+5, r24	; 0x05
    1db4:	0f c0       	rjmp	.+30     	; 0x1dd4 <HLCD_VoidInit4Bit+0x574>
    1db6:	88 ec       	ldi	r24, 0xC8	; 200
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	9c 83       	std	Y+4, r25	; 0x04
    1dbc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc2:	01 97       	sbiw	r24, 0x01	; 1
    1dc4:	f1 f7       	brne	.-4      	; 0x1dc2 <HLCD_VoidInit4Bit+0x562>
    1dc6:	9c 83       	std	Y+4, r25	; 0x04
    1dc8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dca:	8d 81       	ldd	r24, Y+5	; 0x05
    1dcc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dce:	01 97       	sbiw	r24, 0x01	; 1
    1dd0:	9e 83       	std	Y+6, r25	; 0x06
    1dd2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd8:	00 97       	sbiw	r24, 0x00	; 0
    1dda:	69 f7       	brne	.-38     	; 0x1db6 <HLCD_VoidInit4Bit+0x556>
    1ddc:	14 c0       	rjmp	.+40     	; 0x1e06 <HLCD_VoidInit4Bit+0x5a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dde:	6f 81       	ldd	r22, Y+7	; 0x07
    1de0:	78 85       	ldd	r23, Y+8	; 0x08
    1de2:	89 85       	ldd	r24, Y+9	; 0x09
    1de4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	9e 83       	std	Y+6, r25	; 0x06
    1df0:	8d 83       	std	Y+5, r24	; 0x05
    1df2:	8d 81       	ldd	r24, Y+5	; 0x05
    1df4:	9e 81       	ldd	r25, Y+6	; 0x06
    1df6:	9a 83       	std	Y+2, r25	; 0x02
    1df8:	89 83       	std	Y+1, r24	; 0x01
    1dfa:	89 81       	ldd	r24, Y+1	; 0x01
    1dfc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dfe:	01 97       	sbiw	r24, 0x01	; 1
    1e00:	f1 f7       	brne	.-4      	; 0x1dfe <HLCD_VoidInit4Bit+0x59e>
    1e02:	9a 83       	std	Y+2, r25	; 0x02
    1e04:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	
	
	
	
}
    1e06:	c4 5b       	subi	r28, 0xB4	; 180
    1e08:	df 4f       	sbci	r29, 0xFF	; 255
    1e0a:	0f b6       	in	r0, 0x3f	; 63
    1e0c:	f8 94       	cli
    1e0e:	de bf       	out	0x3e, r29	; 62
    1e10:	0f be       	out	0x3f, r0	; 63
    1e12:	cd bf       	out	0x3d, r28	; 61
    1e14:	cf 91       	pop	r28
    1e16:	df 91       	pop	r29
    1e18:	1f 91       	pop	r17
    1e1a:	0f 91       	pop	r16
    1e1c:	08 95       	ret

00001e1e <HLCD_VoidSendString>:

void HLCD_VoidSendString(u8* Coby_U8String)
{
    1e1e:	df 93       	push	r29
    1e20:	cf 93       	push	r28
    1e22:	00 d0       	rcall	.+0      	; 0x1e24 <HLCD_VoidSendString+0x6>
    1e24:	0f 92       	push	r0
    1e26:	cd b7       	in	r28, 0x3d	; 61
    1e28:	de b7       	in	r29, 0x3e	; 62
    1e2a:	9b 83       	std	Y+3, r25	; 0x03
    1e2c:	8a 83       	std	Y+2, r24	; 0x02
	/*Lentgh Of String*/
	u8 LOC_LENGTH = 0;
    1e2e:	19 82       	std	Y+1, r1	; 0x01
    1e30:	0e c0       	rjmp	.+28     	; 0x1e4e <HLCD_VoidSendString+0x30>
	while(Coby_U8String[LOC_LENGTH]!=('\0'))
	{
		
		
		/*Send Character as String*/
		HLCD_VoidSendChar(Coby_U8String[LOC_LENGTH]);
    1e32:	89 81       	ldd	r24, Y+1	; 0x01
    1e34:	28 2f       	mov	r18, r24
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e3c:	fc 01       	movw	r30, r24
    1e3e:	e2 0f       	add	r30, r18
    1e40:	f3 1f       	adc	r31, r19
    1e42:	80 81       	ld	r24, Z
    1e44:	0e 94 4f 06 	call	0xc9e	; 0xc9e <HLCD_VoidSendChar>
		
		/*Increment Length*/
		LOC_LENGTH++;
    1e48:	89 81       	ldd	r24, Y+1	; 0x01
    1e4a:	8f 5f       	subi	r24, 0xFF	; 255
    1e4c:	89 83       	std	Y+1, r24	; 0x01
	/*Lentgh Of String*/
	u8 LOC_LENGTH = 0;
	
	
	/*Do Until String End*/
	while(Coby_U8String[LOC_LENGTH]!=('\0'))
    1e4e:	89 81       	ldd	r24, Y+1	; 0x01
    1e50:	28 2f       	mov	r18, r24
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	8a 81       	ldd	r24, Y+2	; 0x02
    1e56:	9b 81       	ldd	r25, Y+3	; 0x03
    1e58:	fc 01       	movw	r30, r24
    1e5a:	e2 0f       	add	r30, r18
    1e5c:	f3 1f       	adc	r31, r19
    1e5e:	80 81       	ld	r24, Z
    1e60:	88 23       	and	r24, r24
    1e62:	39 f7       	brne	.-50     	; 0x1e32 <HLCD_VoidSendString+0x14>
		/*Increment Length*/
		LOC_LENGTH++;
	}
	
	
}
    1e64:	0f 90       	pop	r0
    1e66:	0f 90       	pop	r0
    1e68:	0f 90       	pop	r0
    1e6a:	cf 91       	pop	r28
    1e6c:	df 91       	pop	r29
    1e6e:	08 95       	ret

00001e70 <HLCD_VoidSetPostion>:

void HLCD_VoidSetPostion(u8 Copy_U8Row,u8 Copy_U8Colm)
{
    1e70:	df 93       	push	r29
    1e72:	cf 93       	push	r28
    1e74:	00 d0       	rcall	.+0      	; 0x1e76 <HLCD_VoidSetPostion+0x6>
    1e76:	cd b7       	in	r28, 0x3d	; 61
    1e78:	de b7       	in	r29, 0x3e	; 62
    1e7a:	89 83       	std	Y+1, r24	; 0x01
    1e7c:	6a 83       	std	Y+2, r22	; 0x02
	
	/*If U Want The First Row*/
	if(0==Copy_U8Row)
    1e7e:	89 81       	ldd	r24, Y+1	; 0x01
    1e80:	88 23       	and	r24, r24
    1e82:	29 f4       	brne	.+10     	; 0x1e8e <HLCD_VoidSetPostion+0x1e>
	{
	
        /*Enter Colm NO. U Want To Display On It*/	
		HLCD_VoidSendCommand(Copy_U8Colm+128);
    1e84:	8a 81       	ldd	r24, Y+2	; 0x02
    1e86:	80 58       	subi	r24, 0x80	; 128
    1e88:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
    1e8c:	07 c0       	rjmp	.+14     	; 0x1e9c <HLCD_VoidSetPostion+0x2c>
	
		
	}
	
	/*If U Want The Second Row*/
	else if(1==Copy_U8Row)
    1e8e:	89 81       	ldd	r24, Y+1	; 0x01
    1e90:	81 30       	cpi	r24, 0x01	; 1
    1e92:	21 f4       	brne	.+8      	; 0x1e9c <HLCD_VoidSetPostion+0x2c>
	{
		
		
        /*Enter Colm NO. U Want To Display On It*/	
			HLCD_VoidSendCommand(Copy_U8Colm+128+64);
    1e94:	8a 81       	ldd	r24, Y+2	; 0x02
    1e96:	80 54       	subi	r24, 0x40	; 64
    1e98:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
				

	}
	
	
}
    1e9c:	0f 90       	pop	r0
    1e9e:	0f 90       	pop	r0
    1ea0:	cf 91       	pop	r28
    1ea2:	df 91       	pop	r29
    1ea4:	08 95       	ret

00001ea6 <HLCD_VoidSendNumber>:
void HLCD_VoidSendNumber(u32 Copy_U8Number)
{
    1ea6:	ef 92       	push	r14
    1ea8:	ff 92       	push	r15
    1eaa:	0f 93       	push	r16
    1eac:	1f 93       	push	r17
    1eae:	df 93       	push	r29
    1eb0:	cf 93       	push	r28
    1eb2:	cd b7       	in	r28, 0x3d	; 61
    1eb4:	de b7       	in	r29, 0x3e	; 62
    1eb6:	28 97       	sbiw	r28, 0x08	; 8
    1eb8:	0f b6       	in	r0, 0x3f	; 63
    1eba:	f8 94       	cli
    1ebc:	de bf       	out	0x3e, r29	; 62
    1ebe:	0f be       	out	0x3f, r0	; 63
    1ec0:	cd bf       	out	0x3d, r28	; 61
    1ec2:	6d 83       	std	Y+5, r22	; 0x05
    1ec4:	7e 83       	std	Y+6, r23	; 0x06
    1ec6:	8f 83       	std	Y+7, r24	; 0x07
    1ec8:	98 87       	std	Y+8, r25	; 0x08
	if(0==Copy_U8Number)
    1eca:	8d 81       	ldd	r24, Y+5	; 0x05
    1ecc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ece:	af 81       	ldd	r26, Y+7	; 0x07
    1ed0:	b8 85       	ldd	r27, Y+8	; 0x08
    1ed2:	00 97       	sbiw	r24, 0x00	; 0
    1ed4:	a1 05       	cpc	r26, r1
    1ed6:	b1 05       	cpc	r27, r1
    1ed8:	21 f4       	brne	.+8      	; 0x1ee2 <HLCD_VoidSendNumber+0x3c>
	{
		HLCD_VoidSendChar(0+48);
    1eda:	80 e3       	ldi	r24, 0x30	; 48
    1edc:	0e 94 4f 06 	call	0xc9e	; 0xc9e <HLCD_VoidSendChar>
    1ee0:	79 c0       	rjmp	.+242    	; 0x1fd4 <HLCD_VoidSendNumber+0x12e>
	}
	else
	{
	u32 LOC_Rev =1;
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	a0 e0       	ldi	r26, 0x00	; 0
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	89 83       	std	Y+1, r24	; 0x01
    1eec:	9a 83       	std	Y+2, r25	; 0x02
    1eee:	ab 83       	std	Y+3, r26	; 0x03
    1ef0:	bc 83       	std	Y+4, r27	; 0x04
    1ef2:	36 c0       	rjmp	.+108    	; 0x1f60 <HLCD_VoidSendNumber+0xba>
	while(Copy_U8Number)
	{
		LOC_Rev = (LOC_Rev*10)+ Copy_U8Number%10;
    1ef4:	89 81       	ldd	r24, Y+1	; 0x01
    1ef6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef8:	ab 81       	ldd	r26, Y+3	; 0x03
    1efa:	bc 81       	ldd	r27, Y+4	; 0x04
    1efc:	2a e0       	ldi	r18, 0x0A	; 10
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	40 e0       	ldi	r20, 0x00	; 0
    1f02:	50 e0       	ldi	r21, 0x00	; 0
    1f04:	bc 01       	movw	r22, r24
    1f06:	cd 01       	movw	r24, r26
    1f08:	0e 94 d6 21 	call	0x43ac	; 0x43ac <__mulsi3>
    1f0c:	7b 01       	movw	r14, r22
    1f0e:	8c 01       	movw	r16, r24
    1f10:	8d 81       	ldd	r24, Y+5	; 0x05
    1f12:	9e 81       	ldd	r25, Y+6	; 0x06
    1f14:	af 81       	ldd	r26, Y+7	; 0x07
    1f16:	b8 85       	ldd	r27, Y+8	; 0x08
    1f18:	2a e0       	ldi	r18, 0x0A	; 10
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	40 e0       	ldi	r20, 0x00	; 0
    1f1e:	50 e0       	ldi	r21, 0x00	; 0
    1f20:	bc 01       	movw	r22, r24
    1f22:	cd 01       	movw	r24, r26
    1f24:	0e 94 09 22 	call	0x4412	; 0x4412 <__udivmodsi4>
    1f28:	dc 01       	movw	r26, r24
    1f2a:	cb 01       	movw	r24, r22
    1f2c:	8e 0d       	add	r24, r14
    1f2e:	9f 1d       	adc	r25, r15
    1f30:	a0 1f       	adc	r26, r16
    1f32:	b1 1f       	adc	r27, r17
    1f34:	89 83       	std	Y+1, r24	; 0x01
    1f36:	9a 83       	std	Y+2, r25	; 0x02
    1f38:	ab 83       	std	Y+3, r26	; 0x03
    1f3a:	bc 83       	std	Y+4, r27	; 0x04
		Copy_U8Number /=10 ;
    1f3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f40:	af 81       	ldd	r26, Y+7	; 0x07
    1f42:	b8 85       	ldd	r27, Y+8	; 0x08
    1f44:	2a e0       	ldi	r18, 0x0A	; 10
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	40 e0       	ldi	r20, 0x00	; 0
    1f4a:	50 e0       	ldi	r21, 0x00	; 0
    1f4c:	bc 01       	movw	r22, r24
    1f4e:	cd 01       	movw	r24, r26
    1f50:	0e 94 09 22 	call	0x4412	; 0x4412 <__udivmodsi4>
    1f54:	da 01       	movw	r26, r20
    1f56:	c9 01       	movw	r24, r18
    1f58:	8d 83       	std	Y+5, r24	; 0x05
    1f5a:	9e 83       	std	Y+6, r25	; 0x06
    1f5c:	af 83       	std	Y+7, r26	; 0x07
    1f5e:	b8 87       	std	Y+8, r27	; 0x08
		HLCD_VoidSendChar(0+48);
	}
	else
	{
	u32 LOC_Rev =1;
	while(Copy_U8Number)
    1f60:	8d 81       	ldd	r24, Y+5	; 0x05
    1f62:	9e 81       	ldd	r25, Y+6	; 0x06
    1f64:	af 81       	ldd	r26, Y+7	; 0x07
    1f66:	b8 85       	ldd	r27, Y+8	; 0x08
    1f68:	00 97       	sbiw	r24, 0x00	; 0
    1f6a:	a1 05       	cpc	r26, r1
    1f6c:	b1 05       	cpc	r27, r1
    1f6e:	11 f6       	brne	.-124    	; 0x1ef4 <HLCD_VoidSendNumber+0x4e>
    1f70:	28 c0       	rjmp	.+80     	; 0x1fc2 <HLCD_VoidSendNumber+0x11c>
		
		
	}
	while(LOC_Rev>1)
	{
		Copy_U8Number = LOC_Rev%10;
    1f72:	89 81       	ldd	r24, Y+1	; 0x01
    1f74:	9a 81       	ldd	r25, Y+2	; 0x02
    1f76:	ab 81       	ldd	r26, Y+3	; 0x03
    1f78:	bc 81       	ldd	r27, Y+4	; 0x04
    1f7a:	2a e0       	ldi	r18, 0x0A	; 10
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	40 e0       	ldi	r20, 0x00	; 0
    1f80:	50 e0       	ldi	r21, 0x00	; 0
    1f82:	bc 01       	movw	r22, r24
    1f84:	cd 01       	movw	r24, r26
    1f86:	0e 94 09 22 	call	0x4412	; 0x4412 <__udivmodsi4>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	8d 83       	std	Y+5, r24	; 0x05
    1f90:	9e 83       	std	Y+6, r25	; 0x06
    1f92:	af 83       	std	Y+7, r26	; 0x07
    1f94:	b8 87       	std	Y+8, r27	; 0x08
		HLCD_VoidSendChar(Copy_U8Number+48);
    1f96:	8d 81       	ldd	r24, Y+5	; 0x05
    1f98:	80 5d       	subi	r24, 0xD0	; 208
    1f9a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <HLCD_VoidSendChar>
		LOC_Rev = LOC_Rev /10;
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
    1fa0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa2:	ab 81       	ldd	r26, Y+3	; 0x03
    1fa4:	bc 81       	ldd	r27, Y+4	; 0x04
    1fa6:	2a e0       	ldi	r18, 0x0A	; 10
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	40 e0       	ldi	r20, 0x00	; 0
    1fac:	50 e0       	ldi	r21, 0x00	; 0
    1fae:	bc 01       	movw	r22, r24
    1fb0:	cd 01       	movw	r24, r26
    1fb2:	0e 94 09 22 	call	0x4412	; 0x4412 <__udivmodsi4>
    1fb6:	da 01       	movw	r26, r20
    1fb8:	c9 01       	movw	r24, r18
    1fba:	89 83       	std	Y+1, r24	; 0x01
    1fbc:	9a 83       	std	Y+2, r25	; 0x02
    1fbe:	ab 83       	std	Y+3, r26	; 0x03
    1fc0:	bc 83       	std	Y+4, r27	; 0x04
		LOC_Rev = (LOC_Rev*10)+ Copy_U8Number%10;
		Copy_U8Number /=10 ;
		
		
	}
	while(LOC_Rev>1)
    1fc2:	89 81       	ldd	r24, Y+1	; 0x01
    1fc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc6:	ab 81       	ldd	r26, Y+3	; 0x03
    1fc8:	bc 81       	ldd	r27, Y+4	; 0x04
    1fca:	82 30       	cpi	r24, 0x02	; 2
    1fcc:	91 05       	cpc	r25, r1
    1fce:	a1 05       	cpc	r26, r1
    1fd0:	b1 05       	cpc	r27, r1
    1fd2:	78 f6       	brcc	.-98     	; 0x1f72 <HLCD_VoidSendNumber+0xcc>
		
	}
		
	}
	
}
    1fd4:	28 96       	adiw	r28, 0x08	; 8
    1fd6:	0f b6       	in	r0, 0x3f	; 63
    1fd8:	f8 94       	cli
    1fda:	de bf       	out	0x3e, r29	; 62
    1fdc:	0f be       	out	0x3f, r0	; 63
    1fde:	cd bf       	out	0x3d, r28	; 61
    1fe0:	cf 91       	pop	r28
    1fe2:	df 91       	pop	r29
    1fe4:	1f 91       	pop	r17
    1fe6:	0f 91       	pop	r16
    1fe8:	ff 90       	pop	r15
    1fea:	ef 90       	pop	r14
    1fec:	08 95       	ret

00001fee <HLCD_VoidDrawChar>:

void HLCD_VoidDrawChar(void)
{
    1fee:	df 93       	push	r29
    1ff0:	cf 93       	push	r28
    1ff2:	cd b7       	in	r28, 0x3d	; 61
    1ff4:	de b7       	in	r29, 0x3e	; 62
	
	HLCD_VoidSendCommand(0b01000000);
    1ff6:	80 e4       	ldi	r24, 0x40	; 64
    1ff8:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
	HLCD_VoidSendChar(0b00111);
    1ffc:	87 e0       	ldi	r24, 0x07	; 7
    1ffe:	0e 94 4f 06 	call	0xc9e	; 0xc9e <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b01000);
    2002:	88 e0       	ldi	r24, 0x08	; 8
    2004:	0e 94 4f 06 	call	0xc9e	; 0xc9e <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b01000);
    2008:	88 e0       	ldi	r24, 0x08	; 8
    200a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b00111);
    200e:	87 e0       	ldi	r24, 0x07	; 7
    2010:	0e 94 4f 06 	call	0xc9e	; 0xc9e <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b00100);
    2014:	84 e0       	ldi	r24, 0x04	; 4
    2016:	0e 94 4f 06 	call	0xc9e	; 0xc9e <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b00100);
    201a:	84 e0       	ldi	r24, 0x04	; 4
    201c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b00111);
    2020:	87 e0       	ldi	r24, 0x07	; 7
    2022:	0e 94 4f 06 	call	0xc9e	; 0xc9e <HLCD_VoidSendChar>
	HLCD_VoidSendCommand(128+1);
    2026:	81 e8       	ldi	r24, 0x81	; 129
    2028:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
	HLCD_VoidSendChar(0b00000000);
    202c:	80 e0       	ldi	r24, 0x00	; 0
    202e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <HLCD_VoidSendChar>
	
	
	
	
}
    2032:	cf 91       	pop	r28
    2034:	df 91       	pop	r29
    2036:	08 95       	ret

00002038 <ADC_Init>:
#include "BIT_MATH.h"
#include "MADC_Private.h"


void ADC_Init(void)
{
    2038:	df 93       	push	r29
    203a:	cf 93       	push	r28
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
	/*Enable ADC*/
	SET_BIT(ADCSRA,7);
    2040:	a6 e2       	ldi	r26, 0x26	; 38
    2042:	b0 e0       	ldi	r27, 0x00	; 0
    2044:	e6 e2       	ldi	r30, 0x26	; 38
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	80 68       	ori	r24, 0x80	; 128
    204c:	8c 93       	st	X, r24
	
	/*Select VRef*/
	SET_BIT(ADMUX,6);
    204e:	a7 e2       	ldi	r26, 0x27	; 39
    2050:	b0 e0       	ldi	r27, 0x00	; 0
    2052:	e7 e2       	ldi	r30, 0x27	; 39
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	80 81       	ld	r24, Z
    2058:	80 64       	ori	r24, 0x40	; 64
    205a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,7);
    205c:	a7 e2       	ldi	r26, 0x27	; 39
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	e7 e2       	ldi	r30, 0x27	; 39
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
    2066:	8f 77       	andi	r24, 0x7F	; 127
    2068:	8c 93       	st	X, r24
	
	/*Disable Auto Trigger*/
	CLR_BIT(ADCSRA,5);
    206a:	a6 e2       	ldi	r26, 0x26	; 38
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	e6 e2       	ldi	r30, 0x26	; 38
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	8f 7d       	andi	r24, 0xDF	; 223
    2076:	8c 93       	st	X, r24
	
	/*Disable Interrupt*/
	CLR_BIT(ADCSRA,3);
    2078:	a6 e2       	ldi	r26, 0x26	; 38
    207a:	b0 e0       	ldi	r27, 0x00	; 0
    207c:	e6 e2       	ldi	r30, 0x26	; 38
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	80 81       	ld	r24, Z
    2082:	87 7f       	andi	r24, 0xF7	; 247
    2084:	8c 93       	st	X, r24
	
	/*ADLR (Right Adjustment)*/
	CLR_BIT(ADMUX,5);
    2086:	a7 e2       	ldi	r26, 0x27	; 39
    2088:	b0 e0       	ldi	r27, 0x00	; 0
    208a:	e7 e2       	ldi	r30, 0x27	; 39
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	8f 7d       	andi	r24, 0xDF	; 223
    2092:	8c 93       	st	X, r24
	
	/*Configure Prescaler (/128)*/
	SET_BIT(ADCSRA,2);
    2094:	a6 e2       	ldi	r26, 0x26	; 38
    2096:	b0 e0       	ldi	r27, 0x00	; 0
    2098:	e6 e2       	ldi	r30, 0x26	; 38
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	80 81       	ld	r24, Z
    209e:	84 60       	ori	r24, 0x04	; 4
    20a0:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,1);
    20a2:	a6 e2       	ldi	r26, 0x26	; 38
    20a4:	b0 e0       	ldi	r27, 0x00	; 0
    20a6:	e6 e2       	ldi	r30, 0x26	; 38
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	80 81       	ld	r24, Z
    20ac:	82 60       	ori	r24, 0x02	; 2
    20ae:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,0);
    20b0:	a6 e2       	ldi	r26, 0x26	; 38
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	e6 e2       	ldi	r30, 0x26	; 38
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	81 60       	ori	r24, 0x01	; 1
    20bc:	8c 93       	st	X, r24
	
	
}
    20be:	cf 91       	pop	r28
    20c0:	df 91       	pop	r29
    20c2:	08 95       	ret

000020c4 <ADC_ReadData>:

u16 ADC_ReadData(u8 Copy_U8Channel_Number)
{
    20c4:	df 93       	push	r29
    20c6:	cf 93       	push	r28
    20c8:	0f 92       	push	r0
    20ca:	cd b7       	in	r28, 0x3d	; 61
    20cc:	de b7       	in	r29, 0x3e	; 62
    20ce:	89 83       	std	Y+1, r24	; 0x01
	/*Channel Selection*/
	ADMUX&=0b11100000;
    20d0:	a7 e2       	ldi	r26, 0x27	; 39
    20d2:	b0 e0       	ldi	r27, 0x00	; 0
    20d4:	e7 e2       	ldi	r30, 0x27	; 39
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	80 81       	ld	r24, Z
    20da:	80 7e       	andi	r24, 0xE0	; 224
    20dc:	8c 93       	st	X, r24
	ADMUX|=Copy_U8Channel_Number;
    20de:	a7 e2       	ldi	r26, 0x27	; 39
    20e0:	b0 e0       	ldi	r27, 0x00	; 0
    20e2:	e7 e2       	ldi	r30, 0x27	; 39
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	90 81       	ld	r25, Z
    20e8:	89 81       	ldd	r24, Y+1	; 0x01
    20ea:	89 2b       	or	r24, r25
    20ec:	8c 93       	st	X, r24
	
	/*Start Single Conversion*/
	SET_BIT(ADCSRA,6);
    20ee:	a6 e2       	ldi	r26, 0x26	; 38
    20f0:	b0 e0       	ldi	r27, 0x00	; 0
    20f2:	e6 e2       	ldi	r30, 0x26	; 38
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	80 81       	ld	r24, Z
    20f8:	80 64       	ori	r24, 0x40	; 64
    20fa:	8c 93       	st	X, r24
	
	/*Waiting For Interrupt Flag When Conversion End*/
	while(GET_BIT(ADCSRA,4)==0);
    20fc:	e6 e2       	ldi	r30, 0x26	; 38
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	80 81       	ld	r24, Z
    2102:	82 95       	swap	r24
    2104:	8f 70       	andi	r24, 0x0F	; 15
    2106:	88 2f       	mov	r24, r24
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	81 70       	andi	r24, 0x01	; 1
    210c:	90 70       	andi	r25, 0x00	; 0
    210e:	00 97       	sbiw	r24, 0x00	; 0
    2110:	a9 f3       	breq	.-22     	; 0x20fc <ADC_ReadData+0x38>
	
	/*Clear Interrupt Flag*/
	SET_BIT(ADCSRA,4);
    2112:	a6 e2       	ldi	r26, 0x26	; 38
    2114:	b0 e0       	ldi	r27, 0x00	; 0
    2116:	e6 e2       	ldi	r30, 0x26	; 38
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	80 81       	ld	r24, Z
    211c:	80 61       	ori	r24, 0x10	; 16
    211e:	8c 93       	st	X, r24
	LOC_Digital_ADC=(LOC_Digital_ADC<<8)|LOW_Value;
	
	return LOC_Digital_ADC;*/
	
	
	return ADCData ;
    2120:	e4 e2       	ldi	r30, 0x24	; 36
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	80 81       	ld	r24, Z
    2126:	91 81       	ldd	r25, Z+1	; 0x01
	

	
	
	
    2128:	0f 90       	pop	r0
    212a:	cf 91       	pop	r28
    212c:	df 91       	pop	r29
    212e:	08 95       	ret

00002130 <MDIO_VoidSetPinDirection>:




void MDIO_VoidSetPinDirection(u8 Copy_U8Port ,u8 Copy_U8Pin ,u8 Copy_U8Direction)
{
    2130:	df 93       	push	r29
    2132:	cf 93       	push	r28
    2134:	cd b7       	in	r28, 0x3d	; 61
    2136:	de b7       	in	r29, 0x3e	; 62
    2138:	27 97       	sbiw	r28, 0x07	; 7
    213a:	0f b6       	in	r0, 0x3f	; 63
    213c:	f8 94       	cli
    213e:	de bf       	out	0x3e, r29	; 62
    2140:	0f be       	out	0x3f, r0	; 63
    2142:	cd bf       	out	0x3d, r28	; 61
    2144:	89 83       	std	Y+1, r24	; 0x01
    2146:	6a 83       	std	Y+2, r22	; 0x02
    2148:	4b 83       	std	Y+3, r20	; 0x03
	if(1== Copy_U8Direction)
    214a:	8b 81       	ldd	r24, Y+3	; 0x03
    214c:	81 30       	cpi	r24, 0x01	; 1
    214e:	09 f0       	breq	.+2      	; 0x2152 <MDIO_VoidSetPinDirection+0x22>
    2150:	6f c0       	rjmp	.+222    	; 0x2230 <MDIO_VoidSetPinDirection+0x100>
	{
		switch(Copy_U8Port)
    2152:	89 81       	ldd	r24, Y+1	; 0x01
    2154:	28 2f       	mov	r18, r24
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	3f 83       	std	Y+7, r19	; 0x07
    215a:	2e 83       	std	Y+6, r18	; 0x06
    215c:	8e 81       	ldd	r24, Y+6	; 0x06
    215e:	9f 81       	ldd	r25, Y+7	; 0x07
    2160:	81 30       	cpi	r24, 0x01	; 1
    2162:	91 05       	cpc	r25, r1
    2164:	49 f1       	breq	.+82     	; 0x21b8 <MDIO_VoidSetPinDirection+0x88>
    2166:	2e 81       	ldd	r18, Y+6	; 0x06
    2168:	3f 81       	ldd	r19, Y+7	; 0x07
    216a:	22 30       	cpi	r18, 0x02	; 2
    216c:	31 05       	cpc	r19, r1
    216e:	2c f4       	brge	.+10     	; 0x217a <MDIO_VoidSetPinDirection+0x4a>
    2170:	8e 81       	ldd	r24, Y+6	; 0x06
    2172:	9f 81       	ldd	r25, Y+7	; 0x07
    2174:	00 97       	sbiw	r24, 0x00	; 0
    2176:	61 f0       	breq	.+24     	; 0x2190 <MDIO_VoidSetPinDirection+0x60>
    2178:	d2 c0       	rjmp	.+420    	; 0x231e <MDIO_VoidSetPinDirection+0x1ee>
    217a:	2e 81       	ldd	r18, Y+6	; 0x06
    217c:	3f 81       	ldd	r19, Y+7	; 0x07
    217e:	22 30       	cpi	r18, 0x02	; 2
    2180:	31 05       	cpc	r19, r1
    2182:	71 f1       	breq	.+92     	; 0x21e0 <MDIO_VoidSetPinDirection+0xb0>
    2184:	8e 81       	ldd	r24, Y+6	; 0x06
    2186:	9f 81       	ldd	r25, Y+7	; 0x07
    2188:	83 30       	cpi	r24, 0x03	; 3
    218a:	91 05       	cpc	r25, r1
    218c:	e9 f1       	breq	.+122    	; 0x2208 <MDIO_VoidSetPinDirection+0xd8>
    218e:	c7 c0       	rjmp	.+398    	; 0x231e <MDIO_VoidSetPinDirection+0x1ee>
		{
			case 0 : SET_BIT(DDRA_REG,Copy_U8Pin);
    2190:	aa e3       	ldi	r26, 0x3A	; 58
    2192:	b0 e0       	ldi	r27, 0x00	; 0
    2194:	ea e3       	ldi	r30, 0x3A	; 58
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	80 81       	ld	r24, Z
    219a:	48 2f       	mov	r20, r24
    219c:	8a 81       	ldd	r24, Y+2	; 0x02
    219e:	28 2f       	mov	r18, r24
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	02 2e       	mov	r0, r18
    21a8:	02 c0       	rjmp	.+4      	; 0x21ae <MDIO_VoidSetPinDirection+0x7e>
    21aa:	88 0f       	add	r24, r24
    21ac:	99 1f       	adc	r25, r25
    21ae:	0a 94       	dec	r0
    21b0:	e2 f7       	brpl	.-8      	; 0x21aa <MDIO_VoidSetPinDirection+0x7a>
    21b2:	84 2b       	or	r24, r20
    21b4:	8c 93       	st	X, r24
    21b6:	b3 c0       	rjmp	.+358    	; 0x231e <MDIO_VoidSetPinDirection+0x1ee>
			break;
			case 1 : SET_BIT(DDRB_REG,Copy_U8Pin);
    21b8:	a7 e3       	ldi	r26, 0x37	; 55
    21ba:	b0 e0       	ldi	r27, 0x00	; 0
    21bc:	e7 e3       	ldi	r30, 0x37	; 55
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	80 81       	ld	r24, Z
    21c2:	48 2f       	mov	r20, r24
    21c4:	8a 81       	ldd	r24, Y+2	; 0x02
    21c6:	28 2f       	mov	r18, r24
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	81 e0       	ldi	r24, 0x01	; 1
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	02 2e       	mov	r0, r18
    21d0:	02 c0       	rjmp	.+4      	; 0x21d6 <MDIO_VoidSetPinDirection+0xa6>
    21d2:	88 0f       	add	r24, r24
    21d4:	99 1f       	adc	r25, r25
    21d6:	0a 94       	dec	r0
    21d8:	e2 f7       	brpl	.-8      	; 0x21d2 <MDIO_VoidSetPinDirection+0xa2>
    21da:	84 2b       	or	r24, r20
    21dc:	8c 93       	st	X, r24
    21de:	9f c0       	rjmp	.+318    	; 0x231e <MDIO_VoidSetPinDirection+0x1ee>
			break;
			case 2 : SET_BIT(DDRC_REG,Copy_U8Pin);
    21e0:	a4 e3       	ldi	r26, 0x34	; 52
    21e2:	b0 e0       	ldi	r27, 0x00	; 0
    21e4:	e4 e3       	ldi	r30, 0x34	; 52
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	80 81       	ld	r24, Z
    21ea:	48 2f       	mov	r20, r24
    21ec:	8a 81       	ldd	r24, Y+2	; 0x02
    21ee:	28 2f       	mov	r18, r24
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	81 e0       	ldi	r24, 0x01	; 1
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	02 2e       	mov	r0, r18
    21f8:	02 c0       	rjmp	.+4      	; 0x21fe <MDIO_VoidSetPinDirection+0xce>
    21fa:	88 0f       	add	r24, r24
    21fc:	99 1f       	adc	r25, r25
    21fe:	0a 94       	dec	r0
    2200:	e2 f7       	brpl	.-8      	; 0x21fa <MDIO_VoidSetPinDirection+0xca>
    2202:	84 2b       	or	r24, r20
    2204:	8c 93       	st	X, r24
    2206:	8b c0       	rjmp	.+278    	; 0x231e <MDIO_VoidSetPinDirection+0x1ee>
			break;
			case 3 : SET_BIT(DDRD_REG,Copy_U8Pin);
    2208:	a1 e3       	ldi	r26, 0x31	; 49
    220a:	b0 e0       	ldi	r27, 0x00	; 0
    220c:	e1 e3       	ldi	r30, 0x31	; 49
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	80 81       	ld	r24, Z
    2212:	48 2f       	mov	r20, r24
    2214:	8a 81       	ldd	r24, Y+2	; 0x02
    2216:	28 2f       	mov	r18, r24
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	02 2e       	mov	r0, r18
    2220:	02 c0       	rjmp	.+4      	; 0x2226 <MDIO_VoidSetPinDirection+0xf6>
    2222:	88 0f       	add	r24, r24
    2224:	99 1f       	adc	r25, r25
    2226:	0a 94       	dec	r0
    2228:	e2 f7       	brpl	.-8      	; 0x2222 <MDIO_VoidSetPinDirection+0xf2>
    222a:	84 2b       	or	r24, r20
    222c:	8c 93       	st	X, r24
    222e:	77 c0       	rjmp	.+238    	; 0x231e <MDIO_VoidSetPinDirection+0x1ee>
			
			
			
		}
	}
	else if(0== Copy_U8Direction)
    2230:	8b 81       	ldd	r24, Y+3	; 0x03
    2232:	88 23       	and	r24, r24
    2234:	09 f0       	breq	.+2      	; 0x2238 <MDIO_VoidSetPinDirection+0x108>
    2236:	73 c0       	rjmp	.+230    	; 0x231e <MDIO_VoidSetPinDirection+0x1ee>
	{
				switch(Copy_U8Port)
    2238:	89 81       	ldd	r24, Y+1	; 0x01
    223a:	28 2f       	mov	r18, r24
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	3d 83       	std	Y+5, r19	; 0x05
    2240:	2c 83       	std	Y+4, r18	; 0x04
    2242:	8c 81       	ldd	r24, Y+4	; 0x04
    2244:	9d 81       	ldd	r25, Y+5	; 0x05
    2246:	81 30       	cpi	r24, 0x01	; 1
    2248:	91 05       	cpc	r25, r1
    224a:	59 f1       	breq	.+86     	; 0x22a2 <MDIO_VoidSetPinDirection+0x172>
    224c:	2c 81       	ldd	r18, Y+4	; 0x04
    224e:	3d 81       	ldd	r19, Y+5	; 0x05
    2250:	22 30       	cpi	r18, 0x02	; 2
    2252:	31 05       	cpc	r19, r1
    2254:	2c f4       	brge	.+10     	; 0x2260 <MDIO_VoidSetPinDirection+0x130>
    2256:	8c 81       	ldd	r24, Y+4	; 0x04
    2258:	9d 81       	ldd	r25, Y+5	; 0x05
    225a:	00 97       	sbiw	r24, 0x00	; 0
    225c:	69 f0       	breq	.+26     	; 0x2278 <MDIO_VoidSetPinDirection+0x148>
    225e:	5f c0       	rjmp	.+190    	; 0x231e <MDIO_VoidSetPinDirection+0x1ee>
    2260:	2c 81       	ldd	r18, Y+4	; 0x04
    2262:	3d 81       	ldd	r19, Y+5	; 0x05
    2264:	22 30       	cpi	r18, 0x02	; 2
    2266:	31 05       	cpc	r19, r1
    2268:	89 f1       	breq	.+98     	; 0x22cc <MDIO_VoidSetPinDirection+0x19c>
    226a:	8c 81       	ldd	r24, Y+4	; 0x04
    226c:	9d 81       	ldd	r25, Y+5	; 0x05
    226e:	83 30       	cpi	r24, 0x03	; 3
    2270:	91 05       	cpc	r25, r1
    2272:	09 f4       	brne	.+2      	; 0x2276 <MDIO_VoidSetPinDirection+0x146>
    2274:	40 c0       	rjmp	.+128    	; 0x22f6 <MDIO_VoidSetPinDirection+0x1c6>
    2276:	53 c0       	rjmp	.+166    	; 0x231e <MDIO_VoidSetPinDirection+0x1ee>
		{
			case 0 : CLR_BIT(DDRA_REG,Copy_U8Pin);break;
    2278:	aa e3       	ldi	r26, 0x3A	; 58
    227a:	b0 e0       	ldi	r27, 0x00	; 0
    227c:	ea e3       	ldi	r30, 0x3A	; 58
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	48 2f       	mov	r20, r24
    2284:	8a 81       	ldd	r24, Y+2	; 0x02
    2286:	28 2f       	mov	r18, r24
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	02 2e       	mov	r0, r18
    2290:	02 c0       	rjmp	.+4      	; 0x2296 <MDIO_VoidSetPinDirection+0x166>
    2292:	88 0f       	add	r24, r24
    2294:	99 1f       	adc	r25, r25
    2296:	0a 94       	dec	r0
    2298:	e2 f7       	brpl	.-8      	; 0x2292 <MDIO_VoidSetPinDirection+0x162>
    229a:	80 95       	com	r24
    229c:	84 23       	and	r24, r20
    229e:	8c 93       	st	X, r24
    22a0:	3e c0       	rjmp	.+124    	; 0x231e <MDIO_VoidSetPinDirection+0x1ee>
			case 1 : CLR_BIT(DDRB_REG,Copy_U8Pin);break;
    22a2:	a7 e3       	ldi	r26, 0x37	; 55
    22a4:	b0 e0       	ldi	r27, 0x00	; 0
    22a6:	e7 e3       	ldi	r30, 0x37	; 55
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
    22ac:	48 2f       	mov	r20, r24
    22ae:	8a 81       	ldd	r24, Y+2	; 0x02
    22b0:	28 2f       	mov	r18, r24
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	02 2e       	mov	r0, r18
    22ba:	02 c0       	rjmp	.+4      	; 0x22c0 <MDIO_VoidSetPinDirection+0x190>
    22bc:	88 0f       	add	r24, r24
    22be:	99 1f       	adc	r25, r25
    22c0:	0a 94       	dec	r0
    22c2:	e2 f7       	brpl	.-8      	; 0x22bc <MDIO_VoidSetPinDirection+0x18c>
    22c4:	80 95       	com	r24
    22c6:	84 23       	and	r24, r20
    22c8:	8c 93       	st	X, r24
    22ca:	29 c0       	rjmp	.+82     	; 0x231e <MDIO_VoidSetPinDirection+0x1ee>
			case 2 : CLR_BIT(DDRC_REG,Copy_U8Pin);break;
    22cc:	a4 e3       	ldi	r26, 0x34	; 52
    22ce:	b0 e0       	ldi	r27, 0x00	; 0
    22d0:	e4 e3       	ldi	r30, 0x34	; 52
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	80 81       	ld	r24, Z
    22d6:	48 2f       	mov	r20, r24
    22d8:	8a 81       	ldd	r24, Y+2	; 0x02
    22da:	28 2f       	mov	r18, r24
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	02 2e       	mov	r0, r18
    22e4:	02 c0       	rjmp	.+4      	; 0x22ea <MDIO_VoidSetPinDirection+0x1ba>
    22e6:	88 0f       	add	r24, r24
    22e8:	99 1f       	adc	r25, r25
    22ea:	0a 94       	dec	r0
    22ec:	e2 f7       	brpl	.-8      	; 0x22e6 <MDIO_VoidSetPinDirection+0x1b6>
    22ee:	80 95       	com	r24
    22f0:	84 23       	and	r24, r20
    22f2:	8c 93       	st	X, r24
    22f4:	14 c0       	rjmp	.+40     	; 0x231e <MDIO_VoidSetPinDirection+0x1ee>
			case 3 : CLR_BIT(DDRD_REG,Copy_U8Pin);break;
    22f6:	a1 e3       	ldi	r26, 0x31	; 49
    22f8:	b0 e0       	ldi	r27, 0x00	; 0
    22fa:	e1 e3       	ldi	r30, 0x31	; 49
    22fc:	f0 e0       	ldi	r31, 0x00	; 0
    22fe:	80 81       	ld	r24, Z
    2300:	48 2f       	mov	r20, r24
    2302:	8a 81       	ldd	r24, Y+2	; 0x02
    2304:	28 2f       	mov	r18, r24
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	02 2e       	mov	r0, r18
    230e:	02 c0       	rjmp	.+4      	; 0x2314 <MDIO_VoidSetPinDirection+0x1e4>
    2310:	88 0f       	add	r24, r24
    2312:	99 1f       	adc	r25, r25
    2314:	0a 94       	dec	r0
    2316:	e2 f7       	brpl	.-8      	; 0x2310 <MDIO_VoidSetPinDirection+0x1e0>
    2318:	80 95       	com	r24
    231a:	84 23       	and	r24, r20
    231c:	8c 93       	st	X, r24
	{
		
	/*Do Nothing*/	
	}
	
}
    231e:	27 96       	adiw	r28, 0x07	; 7
    2320:	0f b6       	in	r0, 0x3f	; 63
    2322:	f8 94       	cli
    2324:	de bf       	out	0x3e, r29	; 62
    2326:	0f be       	out	0x3f, r0	; 63
    2328:	cd bf       	out	0x3d, r28	; 61
    232a:	cf 91       	pop	r28
    232c:	df 91       	pop	r29
    232e:	08 95       	ret

00002330 <MDIO_u8GetPinValue>:
u8 MDIO_u8GetPinValue(u8 Copy_U8Port ,u8 Copy_U8Pin )
{
    2330:	df 93       	push	r29
    2332:	cf 93       	push	r28
    2334:	00 d0       	rcall	.+0      	; 0x2336 <MDIO_u8GetPinValue+0x6>
    2336:	00 d0       	rcall	.+0      	; 0x2338 <MDIO_u8GetPinValue+0x8>
    2338:	0f 92       	push	r0
    233a:	cd b7       	in	r28, 0x3d	; 61
    233c:	de b7       	in	r29, 0x3e	; 62
    233e:	8a 83       	std	Y+2, r24	; 0x02
    2340:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_U8RetValue;
	
	switch(Copy_U8Port)
    2342:	8a 81       	ldd	r24, Y+2	; 0x02
    2344:	28 2f       	mov	r18, r24
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	3d 83       	std	Y+5, r19	; 0x05
    234a:	2c 83       	std	Y+4, r18	; 0x04
    234c:	4c 81       	ldd	r20, Y+4	; 0x04
    234e:	5d 81       	ldd	r21, Y+5	; 0x05
    2350:	41 30       	cpi	r20, 0x01	; 1
    2352:	51 05       	cpc	r21, r1
    2354:	41 f1       	breq	.+80     	; 0x23a6 <MDIO_u8GetPinValue+0x76>
    2356:	8c 81       	ldd	r24, Y+4	; 0x04
    2358:	9d 81       	ldd	r25, Y+5	; 0x05
    235a:	82 30       	cpi	r24, 0x02	; 2
    235c:	91 05       	cpc	r25, r1
    235e:	34 f4       	brge	.+12     	; 0x236c <MDIO_u8GetPinValue+0x3c>
    2360:	2c 81       	ldd	r18, Y+4	; 0x04
    2362:	3d 81       	ldd	r19, Y+5	; 0x05
    2364:	21 15       	cp	r18, r1
    2366:	31 05       	cpc	r19, r1
    2368:	61 f0       	breq	.+24     	; 0x2382 <MDIO_u8GetPinValue+0x52>
    236a:	52 c0       	rjmp	.+164    	; 0x2410 <MDIO_u8GetPinValue+0xe0>
    236c:	4c 81       	ldd	r20, Y+4	; 0x04
    236e:	5d 81       	ldd	r21, Y+5	; 0x05
    2370:	42 30       	cpi	r20, 0x02	; 2
    2372:	51 05       	cpc	r21, r1
    2374:	51 f1       	breq	.+84     	; 0x23ca <MDIO_u8GetPinValue+0x9a>
    2376:	8c 81       	ldd	r24, Y+4	; 0x04
    2378:	9d 81       	ldd	r25, Y+5	; 0x05
    237a:	83 30       	cpi	r24, 0x03	; 3
    237c:	91 05       	cpc	r25, r1
    237e:	b9 f1       	breq	.+110    	; 0x23ee <MDIO_u8GetPinValue+0xbe>
    2380:	47 c0       	rjmp	.+142    	; 0x2410 <MDIO_u8GetPinValue+0xe0>
	{
		case 0: Loc_U8RetValue=GET_BIT(PINA_REG,Copy_U8Pin);break;
    2382:	e9 e3       	ldi	r30, 0x39	; 57
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	80 81       	ld	r24, Z
    2388:	28 2f       	mov	r18, r24
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	8b 81       	ldd	r24, Y+3	; 0x03
    238e:	88 2f       	mov	r24, r24
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	a9 01       	movw	r20, r18
    2394:	02 c0       	rjmp	.+4      	; 0x239a <MDIO_u8GetPinValue+0x6a>
    2396:	55 95       	asr	r21
    2398:	47 95       	ror	r20
    239a:	8a 95       	dec	r24
    239c:	e2 f7       	brpl	.-8      	; 0x2396 <MDIO_u8GetPinValue+0x66>
    239e:	ca 01       	movw	r24, r20
    23a0:	81 70       	andi	r24, 0x01	; 1
    23a2:	89 83       	std	Y+1, r24	; 0x01
    23a4:	35 c0       	rjmp	.+106    	; 0x2410 <MDIO_u8GetPinValue+0xe0>
		case 1: Loc_U8RetValue=GET_BIT(PINB_REG,Copy_U8Pin);break;
    23a6:	e6 e3       	ldi	r30, 0x36	; 54
    23a8:	f0 e0       	ldi	r31, 0x00	; 0
    23aa:	80 81       	ld	r24, Z
    23ac:	28 2f       	mov	r18, r24
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	8b 81       	ldd	r24, Y+3	; 0x03
    23b2:	88 2f       	mov	r24, r24
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	a9 01       	movw	r20, r18
    23b8:	02 c0       	rjmp	.+4      	; 0x23be <MDIO_u8GetPinValue+0x8e>
    23ba:	55 95       	asr	r21
    23bc:	47 95       	ror	r20
    23be:	8a 95       	dec	r24
    23c0:	e2 f7       	brpl	.-8      	; 0x23ba <MDIO_u8GetPinValue+0x8a>
    23c2:	ca 01       	movw	r24, r20
    23c4:	81 70       	andi	r24, 0x01	; 1
    23c6:	89 83       	std	Y+1, r24	; 0x01
    23c8:	23 c0       	rjmp	.+70     	; 0x2410 <MDIO_u8GetPinValue+0xe0>
		case 2: Loc_U8RetValue=GET_BIT(PINC_REG,Copy_U8Pin);break;
    23ca:	e3 e3       	ldi	r30, 0x33	; 51
    23cc:	f0 e0       	ldi	r31, 0x00	; 0
    23ce:	80 81       	ld	r24, Z
    23d0:	28 2f       	mov	r18, r24
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	8b 81       	ldd	r24, Y+3	; 0x03
    23d6:	88 2f       	mov	r24, r24
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	a9 01       	movw	r20, r18
    23dc:	02 c0       	rjmp	.+4      	; 0x23e2 <MDIO_u8GetPinValue+0xb2>
    23de:	55 95       	asr	r21
    23e0:	47 95       	ror	r20
    23e2:	8a 95       	dec	r24
    23e4:	e2 f7       	brpl	.-8      	; 0x23de <MDIO_u8GetPinValue+0xae>
    23e6:	ca 01       	movw	r24, r20
    23e8:	81 70       	andi	r24, 0x01	; 1
    23ea:	89 83       	std	Y+1, r24	; 0x01
    23ec:	11 c0       	rjmp	.+34     	; 0x2410 <MDIO_u8GetPinValue+0xe0>
		case 3: Loc_U8RetValue=GET_BIT(PIND_REG,Copy_U8Pin);break;
    23ee:	e0 e3       	ldi	r30, 0x30	; 48
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	80 81       	ld	r24, Z
    23f4:	28 2f       	mov	r18, r24
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	8b 81       	ldd	r24, Y+3	; 0x03
    23fa:	88 2f       	mov	r24, r24
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	a9 01       	movw	r20, r18
    2400:	02 c0       	rjmp	.+4      	; 0x2406 <MDIO_u8GetPinValue+0xd6>
    2402:	55 95       	asr	r21
    2404:	47 95       	ror	r20
    2406:	8a 95       	dec	r24
    2408:	e2 f7       	brpl	.-8      	; 0x2402 <MDIO_u8GetPinValue+0xd2>
    240a:	ca 01       	movw	r24, r20
    240c:	81 70       	andi	r24, 0x01	; 1
    240e:	89 83       	std	Y+1, r24	; 0x01
	
		
	}
	return Loc_U8RetValue;
    2410:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    2412:	0f 90       	pop	r0
    2414:	0f 90       	pop	r0
    2416:	0f 90       	pop	r0
    2418:	0f 90       	pop	r0
    241a:	0f 90       	pop	r0
    241c:	cf 91       	pop	r28
    241e:	df 91       	pop	r29
    2420:	08 95       	ret

00002422 <MDIO_VoidSetPinValue>:
void MDIO_VoidSetPinValue(u8 Copy_U8Port ,u8 Copy_U8Pin ,u8 Copy_U8Value)
{
    2422:	df 93       	push	r29
    2424:	cf 93       	push	r28
    2426:	cd b7       	in	r28, 0x3d	; 61
    2428:	de b7       	in	r29, 0x3e	; 62
    242a:	27 97       	sbiw	r28, 0x07	; 7
    242c:	0f b6       	in	r0, 0x3f	; 63
    242e:	f8 94       	cli
    2430:	de bf       	out	0x3e, r29	; 62
    2432:	0f be       	out	0x3f, r0	; 63
    2434:	cd bf       	out	0x3d, r28	; 61
    2436:	89 83       	std	Y+1, r24	; 0x01
    2438:	6a 83       	std	Y+2, r22	; 0x02
    243a:	4b 83       	std	Y+3, r20	; 0x03
	
	if(0==Copy_U8Value)
    243c:	8b 81       	ldd	r24, Y+3	; 0x03
    243e:	88 23       	and	r24, r24
    2440:	09 f0       	breq	.+2      	; 0x2444 <MDIO_VoidSetPinValue+0x22>
    2442:	74 c0       	rjmp	.+232    	; 0x252c <MDIO_VoidSetPinValue+0x10a>
	{
		switch(Copy_U8Port)
    2444:	89 81       	ldd	r24, Y+1	; 0x01
    2446:	28 2f       	mov	r18, r24
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	3f 83       	std	Y+7, r19	; 0x07
    244c:	2e 83       	std	Y+6, r18	; 0x06
    244e:	8e 81       	ldd	r24, Y+6	; 0x06
    2450:	9f 81       	ldd	r25, Y+7	; 0x07
    2452:	81 30       	cpi	r24, 0x01	; 1
    2454:	91 05       	cpc	r25, r1
    2456:	59 f1       	breq	.+86     	; 0x24ae <MDIO_VoidSetPinValue+0x8c>
    2458:	2e 81       	ldd	r18, Y+6	; 0x06
    245a:	3f 81       	ldd	r19, Y+7	; 0x07
    245c:	22 30       	cpi	r18, 0x02	; 2
    245e:	31 05       	cpc	r19, r1
    2460:	2c f4       	brge	.+10     	; 0x246c <MDIO_VoidSetPinValue+0x4a>
    2462:	8e 81       	ldd	r24, Y+6	; 0x06
    2464:	9f 81       	ldd	r25, Y+7	; 0x07
    2466:	00 97       	sbiw	r24, 0x00	; 0
    2468:	69 f0       	breq	.+26     	; 0x2484 <MDIO_VoidSetPinValue+0x62>
    246a:	d2 c0       	rjmp	.+420    	; 0x2610 <MDIO_VoidSetPinValue+0x1ee>
    246c:	2e 81       	ldd	r18, Y+6	; 0x06
    246e:	3f 81       	ldd	r19, Y+7	; 0x07
    2470:	22 30       	cpi	r18, 0x02	; 2
    2472:	31 05       	cpc	r19, r1
    2474:	89 f1       	breq	.+98     	; 0x24d8 <MDIO_VoidSetPinValue+0xb6>
    2476:	8e 81       	ldd	r24, Y+6	; 0x06
    2478:	9f 81       	ldd	r25, Y+7	; 0x07
    247a:	83 30       	cpi	r24, 0x03	; 3
    247c:	91 05       	cpc	r25, r1
    247e:	09 f4       	brne	.+2      	; 0x2482 <MDIO_VoidSetPinValue+0x60>
    2480:	40 c0       	rjmp	.+128    	; 0x2502 <MDIO_VoidSetPinValue+0xe0>
    2482:	c6 c0       	rjmp	.+396    	; 0x2610 <MDIO_VoidSetPinValue+0x1ee>
		{
			case 0 : CLR_BIT(PORTA_REG,Copy_U8Pin);break;
    2484:	ab e3       	ldi	r26, 0x3B	; 59
    2486:	b0 e0       	ldi	r27, 0x00	; 0
    2488:	eb e3       	ldi	r30, 0x3B	; 59
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	80 81       	ld	r24, Z
    248e:	48 2f       	mov	r20, r24
    2490:	8a 81       	ldd	r24, Y+2	; 0x02
    2492:	28 2f       	mov	r18, r24
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	02 2e       	mov	r0, r18
    249c:	02 c0       	rjmp	.+4      	; 0x24a2 <MDIO_VoidSetPinValue+0x80>
    249e:	88 0f       	add	r24, r24
    24a0:	99 1f       	adc	r25, r25
    24a2:	0a 94       	dec	r0
    24a4:	e2 f7       	brpl	.-8      	; 0x249e <MDIO_VoidSetPinValue+0x7c>
    24a6:	80 95       	com	r24
    24a8:	84 23       	and	r24, r20
    24aa:	8c 93       	st	X, r24
    24ac:	b1 c0       	rjmp	.+354    	; 0x2610 <MDIO_VoidSetPinValue+0x1ee>
			case 1 : CLR_BIT(PORTB_REG,Copy_U8Pin);break;
    24ae:	a8 e3       	ldi	r26, 0x38	; 56
    24b0:	b0 e0       	ldi	r27, 0x00	; 0
    24b2:	e8 e3       	ldi	r30, 0x38	; 56
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	80 81       	ld	r24, Z
    24b8:	48 2f       	mov	r20, r24
    24ba:	8a 81       	ldd	r24, Y+2	; 0x02
    24bc:	28 2f       	mov	r18, r24
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	02 2e       	mov	r0, r18
    24c6:	02 c0       	rjmp	.+4      	; 0x24cc <MDIO_VoidSetPinValue+0xaa>
    24c8:	88 0f       	add	r24, r24
    24ca:	99 1f       	adc	r25, r25
    24cc:	0a 94       	dec	r0
    24ce:	e2 f7       	brpl	.-8      	; 0x24c8 <MDIO_VoidSetPinValue+0xa6>
    24d0:	80 95       	com	r24
    24d2:	84 23       	and	r24, r20
    24d4:	8c 93       	st	X, r24
    24d6:	9c c0       	rjmp	.+312    	; 0x2610 <MDIO_VoidSetPinValue+0x1ee>
			case 2 : CLR_BIT(PORTC_REG,Copy_U8Pin);break;
    24d8:	a5 e3       	ldi	r26, 0x35	; 53
    24da:	b0 e0       	ldi	r27, 0x00	; 0
    24dc:	e5 e3       	ldi	r30, 0x35	; 53
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	80 81       	ld	r24, Z
    24e2:	48 2f       	mov	r20, r24
    24e4:	8a 81       	ldd	r24, Y+2	; 0x02
    24e6:	28 2f       	mov	r18, r24
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	02 2e       	mov	r0, r18
    24f0:	02 c0       	rjmp	.+4      	; 0x24f6 <MDIO_VoidSetPinValue+0xd4>
    24f2:	88 0f       	add	r24, r24
    24f4:	99 1f       	adc	r25, r25
    24f6:	0a 94       	dec	r0
    24f8:	e2 f7       	brpl	.-8      	; 0x24f2 <MDIO_VoidSetPinValue+0xd0>
    24fa:	80 95       	com	r24
    24fc:	84 23       	and	r24, r20
    24fe:	8c 93       	st	X, r24
    2500:	87 c0       	rjmp	.+270    	; 0x2610 <MDIO_VoidSetPinValue+0x1ee>
			case 3 : CLR_BIT(PORTD_REG,Copy_U8Pin);break;
    2502:	a2 e3       	ldi	r26, 0x32	; 50
    2504:	b0 e0       	ldi	r27, 0x00	; 0
    2506:	e2 e3       	ldi	r30, 0x32	; 50
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	80 81       	ld	r24, Z
    250c:	48 2f       	mov	r20, r24
    250e:	8a 81       	ldd	r24, Y+2	; 0x02
    2510:	28 2f       	mov	r18, r24
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	81 e0       	ldi	r24, 0x01	; 1
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	02 2e       	mov	r0, r18
    251a:	02 c0       	rjmp	.+4      	; 0x2520 <MDIO_VoidSetPinValue+0xfe>
    251c:	88 0f       	add	r24, r24
    251e:	99 1f       	adc	r25, r25
    2520:	0a 94       	dec	r0
    2522:	e2 f7       	brpl	.-8      	; 0x251c <MDIO_VoidSetPinValue+0xfa>
    2524:	80 95       	com	r24
    2526:	84 23       	and	r24, r20
    2528:	8c 93       	st	X, r24
    252a:	72 c0       	rjmp	.+228    	; 0x2610 <MDIO_VoidSetPinValue+0x1ee>
			default:/*Do Nothing*/;
			
		}
		
	}
	else if(1==Copy_U8Value)
    252c:	8b 81       	ldd	r24, Y+3	; 0x03
    252e:	81 30       	cpi	r24, 0x01	; 1
    2530:	09 f0       	breq	.+2      	; 0x2534 <MDIO_VoidSetPinValue+0x112>
    2532:	6e c0       	rjmp	.+220    	; 0x2610 <MDIO_VoidSetPinValue+0x1ee>
	{
				switch(Copy_U8Port)
    2534:	89 81       	ldd	r24, Y+1	; 0x01
    2536:	28 2f       	mov	r18, r24
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	3d 83       	std	Y+5, r19	; 0x05
    253c:	2c 83       	std	Y+4, r18	; 0x04
    253e:	8c 81       	ldd	r24, Y+4	; 0x04
    2540:	9d 81       	ldd	r25, Y+5	; 0x05
    2542:	81 30       	cpi	r24, 0x01	; 1
    2544:	91 05       	cpc	r25, r1
    2546:	49 f1       	breq	.+82     	; 0x259a <MDIO_VoidSetPinValue+0x178>
    2548:	2c 81       	ldd	r18, Y+4	; 0x04
    254a:	3d 81       	ldd	r19, Y+5	; 0x05
    254c:	22 30       	cpi	r18, 0x02	; 2
    254e:	31 05       	cpc	r19, r1
    2550:	2c f4       	brge	.+10     	; 0x255c <MDIO_VoidSetPinValue+0x13a>
    2552:	8c 81       	ldd	r24, Y+4	; 0x04
    2554:	9d 81       	ldd	r25, Y+5	; 0x05
    2556:	00 97       	sbiw	r24, 0x00	; 0
    2558:	61 f0       	breq	.+24     	; 0x2572 <MDIO_VoidSetPinValue+0x150>
    255a:	5a c0       	rjmp	.+180    	; 0x2610 <MDIO_VoidSetPinValue+0x1ee>
    255c:	2c 81       	ldd	r18, Y+4	; 0x04
    255e:	3d 81       	ldd	r19, Y+5	; 0x05
    2560:	22 30       	cpi	r18, 0x02	; 2
    2562:	31 05       	cpc	r19, r1
    2564:	71 f1       	breq	.+92     	; 0x25c2 <MDIO_VoidSetPinValue+0x1a0>
    2566:	8c 81       	ldd	r24, Y+4	; 0x04
    2568:	9d 81       	ldd	r25, Y+5	; 0x05
    256a:	83 30       	cpi	r24, 0x03	; 3
    256c:	91 05       	cpc	r25, r1
    256e:	e9 f1       	breq	.+122    	; 0x25ea <MDIO_VoidSetPinValue+0x1c8>
    2570:	4f c0       	rjmp	.+158    	; 0x2610 <MDIO_VoidSetPinValue+0x1ee>
		{
			case 0 : SET_BIT(PORTA_REG,Copy_U8Pin);break;
    2572:	ab e3       	ldi	r26, 0x3B	; 59
    2574:	b0 e0       	ldi	r27, 0x00	; 0
    2576:	eb e3       	ldi	r30, 0x3B	; 59
    2578:	f0 e0       	ldi	r31, 0x00	; 0
    257a:	80 81       	ld	r24, Z
    257c:	48 2f       	mov	r20, r24
    257e:	8a 81       	ldd	r24, Y+2	; 0x02
    2580:	28 2f       	mov	r18, r24
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	02 2e       	mov	r0, r18
    258a:	02 c0       	rjmp	.+4      	; 0x2590 <MDIO_VoidSetPinValue+0x16e>
    258c:	88 0f       	add	r24, r24
    258e:	99 1f       	adc	r25, r25
    2590:	0a 94       	dec	r0
    2592:	e2 f7       	brpl	.-8      	; 0x258c <MDIO_VoidSetPinValue+0x16a>
    2594:	84 2b       	or	r24, r20
    2596:	8c 93       	st	X, r24
    2598:	3b c0       	rjmp	.+118    	; 0x2610 <MDIO_VoidSetPinValue+0x1ee>
			case 1 : SET_BIT(PORTB_REG,Copy_U8Pin);break;
    259a:	a8 e3       	ldi	r26, 0x38	; 56
    259c:	b0 e0       	ldi	r27, 0x00	; 0
    259e:	e8 e3       	ldi	r30, 0x38	; 56
    25a0:	f0 e0       	ldi	r31, 0x00	; 0
    25a2:	80 81       	ld	r24, Z
    25a4:	48 2f       	mov	r20, r24
    25a6:	8a 81       	ldd	r24, Y+2	; 0x02
    25a8:	28 2f       	mov	r18, r24
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	81 e0       	ldi	r24, 0x01	; 1
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	02 2e       	mov	r0, r18
    25b2:	02 c0       	rjmp	.+4      	; 0x25b8 <MDIO_VoidSetPinValue+0x196>
    25b4:	88 0f       	add	r24, r24
    25b6:	99 1f       	adc	r25, r25
    25b8:	0a 94       	dec	r0
    25ba:	e2 f7       	brpl	.-8      	; 0x25b4 <MDIO_VoidSetPinValue+0x192>
    25bc:	84 2b       	or	r24, r20
    25be:	8c 93       	st	X, r24
    25c0:	27 c0       	rjmp	.+78     	; 0x2610 <MDIO_VoidSetPinValue+0x1ee>
			case 2 : SET_BIT(PORTC_REG,Copy_U8Pin);break;
    25c2:	a5 e3       	ldi	r26, 0x35	; 53
    25c4:	b0 e0       	ldi	r27, 0x00	; 0
    25c6:	e5 e3       	ldi	r30, 0x35	; 53
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	80 81       	ld	r24, Z
    25cc:	48 2f       	mov	r20, r24
    25ce:	8a 81       	ldd	r24, Y+2	; 0x02
    25d0:	28 2f       	mov	r18, r24
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	02 2e       	mov	r0, r18
    25da:	02 c0       	rjmp	.+4      	; 0x25e0 <MDIO_VoidSetPinValue+0x1be>
    25dc:	88 0f       	add	r24, r24
    25de:	99 1f       	adc	r25, r25
    25e0:	0a 94       	dec	r0
    25e2:	e2 f7       	brpl	.-8      	; 0x25dc <MDIO_VoidSetPinValue+0x1ba>
    25e4:	84 2b       	or	r24, r20
    25e6:	8c 93       	st	X, r24
    25e8:	13 c0       	rjmp	.+38     	; 0x2610 <MDIO_VoidSetPinValue+0x1ee>
			case 3 : SET_BIT(PORTD_REG,Copy_U8Pin);break;
    25ea:	a2 e3       	ldi	r26, 0x32	; 50
    25ec:	b0 e0       	ldi	r27, 0x00	; 0
    25ee:	e2 e3       	ldi	r30, 0x32	; 50
    25f0:	f0 e0       	ldi	r31, 0x00	; 0
    25f2:	80 81       	ld	r24, Z
    25f4:	48 2f       	mov	r20, r24
    25f6:	8a 81       	ldd	r24, Y+2	; 0x02
    25f8:	28 2f       	mov	r18, r24
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	02 2e       	mov	r0, r18
    2602:	02 c0       	rjmp	.+4      	; 0x2608 <MDIO_VoidSetPinValue+0x1e6>
    2604:	88 0f       	add	r24, r24
    2606:	99 1f       	adc	r25, r25
    2608:	0a 94       	dec	r0
    260a:	e2 f7       	brpl	.-8      	; 0x2604 <MDIO_VoidSetPinValue+0x1e2>
    260c:	84 2b       	or	r24, r20
    260e:	8c 93       	st	X, r24
		/*Do Nothing*/
	}
	
	
	
}
    2610:	27 96       	adiw	r28, 0x07	; 7
    2612:	0f b6       	in	r0, 0x3f	; 63
    2614:	f8 94       	cli
    2616:	de bf       	out	0x3e, r29	; 62
    2618:	0f be       	out	0x3f, r0	; 63
    261a:	cd bf       	out	0x3d, r28	; 61
    261c:	cf 91       	pop	r28
    261e:	df 91       	pop	r29
    2620:	08 95       	ret

00002622 <MDIO_VoidSetPortDirection>:
void MDIO_VoidSetPortDirection(u8 Copy_U8Port ,u8 Copy_U8Direction)
{
    2622:	df 93       	push	r29
    2624:	cf 93       	push	r28
    2626:	00 d0       	rcall	.+0      	; 0x2628 <MDIO_VoidSetPortDirection+0x6>
    2628:	00 d0       	rcall	.+0      	; 0x262a <MDIO_VoidSetPortDirection+0x8>
    262a:	cd b7       	in	r28, 0x3d	; 61
    262c:	de b7       	in	r29, 0x3e	; 62
    262e:	89 83       	std	Y+1, r24	; 0x01
    2630:	6a 83       	std	Y+2, r22	; 0x02
	
	
		switch(Copy_U8Port)
    2632:	89 81       	ldd	r24, Y+1	; 0x01
    2634:	28 2f       	mov	r18, r24
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	3c 83       	std	Y+4, r19	; 0x04
    263a:	2b 83       	std	Y+3, r18	; 0x03
    263c:	8b 81       	ldd	r24, Y+3	; 0x03
    263e:	9c 81       	ldd	r25, Y+4	; 0x04
    2640:	81 30       	cpi	r24, 0x01	; 1
    2642:	91 05       	cpc	r25, r1
    2644:	d1 f0       	breq	.+52     	; 0x267a <MDIO_VoidSetPortDirection+0x58>
    2646:	2b 81       	ldd	r18, Y+3	; 0x03
    2648:	3c 81       	ldd	r19, Y+4	; 0x04
    264a:	22 30       	cpi	r18, 0x02	; 2
    264c:	31 05       	cpc	r19, r1
    264e:	2c f4       	brge	.+10     	; 0x265a <MDIO_VoidSetPortDirection+0x38>
    2650:	8b 81       	ldd	r24, Y+3	; 0x03
    2652:	9c 81       	ldd	r25, Y+4	; 0x04
    2654:	00 97       	sbiw	r24, 0x00	; 0
    2656:	61 f0       	breq	.+24     	; 0x2670 <MDIO_VoidSetPortDirection+0x4e>
    2658:	1e c0       	rjmp	.+60     	; 0x2696 <MDIO_VoidSetPortDirection+0x74>
    265a:	2b 81       	ldd	r18, Y+3	; 0x03
    265c:	3c 81       	ldd	r19, Y+4	; 0x04
    265e:	22 30       	cpi	r18, 0x02	; 2
    2660:	31 05       	cpc	r19, r1
    2662:	81 f0       	breq	.+32     	; 0x2684 <MDIO_VoidSetPortDirection+0x62>
    2664:	8b 81       	ldd	r24, Y+3	; 0x03
    2666:	9c 81       	ldd	r25, Y+4	; 0x04
    2668:	83 30       	cpi	r24, 0x03	; 3
    266a:	91 05       	cpc	r25, r1
    266c:	81 f0       	breq	.+32     	; 0x268e <MDIO_VoidSetPortDirection+0x6c>
    266e:	13 c0       	rjmp	.+38     	; 0x2696 <MDIO_VoidSetPortDirection+0x74>
		{
			
			case 0 : DDRA_REG=Copy_U8Direction;break;
    2670:	ea e3       	ldi	r30, 0x3A	; 58
    2672:	f0 e0       	ldi	r31, 0x00	; 0
    2674:	8a 81       	ldd	r24, Y+2	; 0x02
    2676:	80 83       	st	Z, r24
    2678:	0e c0       	rjmp	.+28     	; 0x2696 <MDIO_VoidSetPortDirection+0x74>
			case 1 : DDRB_REG=Copy_U8Direction;break;
    267a:	e7 e3       	ldi	r30, 0x37	; 55
    267c:	f0 e0       	ldi	r31, 0x00	; 0
    267e:	8a 81       	ldd	r24, Y+2	; 0x02
    2680:	80 83       	st	Z, r24
    2682:	09 c0       	rjmp	.+18     	; 0x2696 <MDIO_VoidSetPortDirection+0x74>
			case 2 : DDRC_REG=Copy_U8Direction;break;
    2684:	e4 e3       	ldi	r30, 0x34	; 52
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	8a 81       	ldd	r24, Y+2	; 0x02
    268a:	80 83       	st	Z, r24
    268c:	04 c0       	rjmp	.+8      	; 0x2696 <MDIO_VoidSetPortDirection+0x74>
			case 3 : DDRD_REG=Copy_U8Direction;break;
    268e:	e1 e3       	ldi	r30, 0x31	; 49
    2690:	f0 e0       	ldi	r31, 0x00	; 0
    2692:	8a 81       	ldd	r24, Y+2	; 0x02
    2694:	80 83       	st	Z, r24
	
	
	
	
	
}
    2696:	0f 90       	pop	r0
    2698:	0f 90       	pop	r0
    269a:	0f 90       	pop	r0
    269c:	0f 90       	pop	r0
    269e:	cf 91       	pop	r28
    26a0:	df 91       	pop	r29
    26a2:	08 95       	ret

000026a4 <MDIO_VoidSetPortValue>:
void MDIO_VoidSetPortValue(u8 Copy_U8Port ,u8 Copy_U8Value)
{
    26a4:	df 93       	push	r29
    26a6:	cf 93       	push	r28
    26a8:	00 d0       	rcall	.+0      	; 0x26aa <MDIO_VoidSetPortValue+0x6>
    26aa:	00 d0       	rcall	.+0      	; 0x26ac <MDIO_VoidSetPortValue+0x8>
    26ac:	cd b7       	in	r28, 0x3d	; 61
    26ae:	de b7       	in	r29, 0x3e	; 62
    26b0:	89 83       	std	Y+1, r24	; 0x01
    26b2:	6a 83       	std	Y+2, r22	; 0x02
	
		switch(Copy_U8Port)
    26b4:	89 81       	ldd	r24, Y+1	; 0x01
    26b6:	28 2f       	mov	r18, r24
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	3c 83       	std	Y+4, r19	; 0x04
    26bc:	2b 83       	std	Y+3, r18	; 0x03
    26be:	8b 81       	ldd	r24, Y+3	; 0x03
    26c0:	9c 81       	ldd	r25, Y+4	; 0x04
    26c2:	81 30       	cpi	r24, 0x01	; 1
    26c4:	91 05       	cpc	r25, r1
    26c6:	d1 f0       	breq	.+52     	; 0x26fc <MDIO_VoidSetPortValue+0x58>
    26c8:	2b 81       	ldd	r18, Y+3	; 0x03
    26ca:	3c 81       	ldd	r19, Y+4	; 0x04
    26cc:	22 30       	cpi	r18, 0x02	; 2
    26ce:	31 05       	cpc	r19, r1
    26d0:	2c f4       	brge	.+10     	; 0x26dc <MDIO_VoidSetPortValue+0x38>
    26d2:	8b 81       	ldd	r24, Y+3	; 0x03
    26d4:	9c 81       	ldd	r25, Y+4	; 0x04
    26d6:	00 97       	sbiw	r24, 0x00	; 0
    26d8:	61 f0       	breq	.+24     	; 0x26f2 <MDIO_VoidSetPortValue+0x4e>
    26da:	1e c0       	rjmp	.+60     	; 0x2718 <MDIO_VoidSetPortValue+0x74>
    26dc:	2b 81       	ldd	r18, Y+3	; 0x03
    26de:	3c 81       	ldd	r19, Y+4	; 0x04
    26e0:	22 30       	cpi	r18, 0x02	; 2
    26e2:	31 05       	cpc	r19, r1
    26e4:	81 f0       	breq	.+32     	; 0x2706 <MDIO_VoidSetPortValue+0x62>
    26e6:	8b 81       	ldd	r24, Y+3	; 0x03
    26e8:	9c 81       	ldd	r25, Y+4	; 0x04
    26ea:	83 30       	cpi	r24, 0x03	; 3
    26ec:	91 05       	cpc	r25, r1
    26ee:	81 f0       	breq	.+32     	; 0x2710 <MDIO_VoidSetPortValue+0x6c>
    26f0:	13 c0       	rjmp	.+38     	; 0x2718 <MDIO_VoidSetPortValue+0x74>
		{
			case 0 : PORTA_REG =Copy_U8Value;break;
    26f2:	eb e3       	ldi	r30, 0x3B	; 59
    26f4:	f0 e0       	ldi	r31, 0x00	; 0
    26f6:	8a 81       	ldd	r24, Y+2	; 0x02
    26f8:	80 83       	st	Z, r24
    26fa:	0e c0       	rjmp	.+28     	; 0x2718 <MDIO_VoidSetPortValue+0x74>
			case 1 : PORTB_REG =Copy_U8Value;break;
    26fc:	e8 e3       	ldi	r30, 0x38	; 56
    26fe:	f0 e0       	ldi	r31, 0x00	; 0
    2700:	8a 81       	ldd	r24, Y+2	; 0x02
    2702:	80 83       	st	Z, r24
    2704:	09 c0       	rjmp	.+18     	; 0x2718 <MDIO_VoidSetPortValue+0x74>
			case 2 : PORTC_REG =Copy_U8Value;break;
    2706:	e5 e3       	ldi	r30, 0x35	; 53
    2708:	f0 e0       	ldi	r31, 0x00	; 0
    270a:	8a 81       	ldd	r24, Y+2	; 0x02
    270c:	80 83       	st	Z, r24
    270e:	04 c0       	rjmp	.+8      	; 0x2718 <MDIO_VoidSetPortValue+0x74>
			case 3 : PORTD_REG =Copy_U8Value;break;
    2710:	e2 e3       	ldi	r30, 0x32	; 50
    2712:	f0 e0       	ldi	r31, 0x00	; 0
    2714:	8a 81       	ldd	r24, Y+2	; 0x02
    2716:	80 83       	st	Z, r24
		
		
	
	
	
}
    2718:	0f 90       	pop	r0
    271a:	0f 90       	pop	r0
    271c:	0f 90       	pop	r0
    271e:	0f 90       	pop	r0
    2720:	cf 91       	pop	r28
    2722:	df 91       	pop	r29
    2724:	08 95       	ret

00002726 <MDIO_VoidTogglePin>:

void MDIO_VoidTogglePin(u8 Copy_U8Port ,u8 Copy_U8Pin )
{
    2726:	df 93       	push	r29
    2728:	cf 93       	push	r28
    272a:	00 d0       	rcall	.+0      	; 0x272c <MDIO_VoidTogglePin+0x6>
    272c:	00 d0       	rcall	.+0      	; 0x272e <MDIO_VoidTogglePin+0x8>
    272e:	cd b7       	in	r28, 0x3d	; 61
    2730:	de b7       	in	r29, 0x3e	; 62
    2732:	89 83       	std	Y+1, r24	; 0x01
    2734:	6a 83       	std	Y+2, r22	; 0x02
	
	switch(Copy_U8Port)
    2736:	89 81       	ldd	r24, Y+1	; 0x01
    2738:	28 2f       	mov	r18, r24
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	3c 83       	std	Y+4, r19	; 0x04
    273e:	2b 83       	std	Y+3, r18	; 0x03
    2740:	8b 81       	ldd	r24, Y+3	; 0x03
    2742:	9c 81       	ldd	r25, Y+4	; 0x04
    2744:	81 30       	cpi	r24, 0x01	; 1
    2746:	91 05       	cpc	r25, r1
    2748:	49 f1       	breq	.+82     	; 0x279c <MDIO_VoidTogglePin+0x76>
    274a:	2b 81       	ldd	r18, Y+3	; 0x03
    274c:	3c 81       	ldd	r19, Y+4	; 0x04
    274e:	22 30       	cpi	r18, 0x02	; 2
    2750:	31 05       	cpc	r19, r1
    2752:	2c f4       	brge	.+10     	; 0x275e <MDIO_VoidTogglePin+0x38>
    2754:	8b 81       	ldd	r24, Y+3	; 0x03
    2756:	9c 81       	ldd	r25, Y+4	; 0x04
    2758:	00 97       	sbiw	r24, 0x00	; 0
    275a:	61 f0       	breq	.+24     	; 0x2774 <MDIO_VoidTogglePin+0x4e>
    275c:	5a c0       	rjmp	.+180    	; 0x2812 <MDIO_VoidTogglePin+0xec>
    275e:	2b 81       	ldd	r18, Y+3	; 0x03
    2760:	3c 81       	ldd	r19, Y+4	; 0x04
    2762:	22 30       	cpi	r18, 0x02	; 2
    2764:	31 05       	cpc	r19, r1
    2766:	71 f1       	breq	.+92     	; 0x27c4 <MDIO_VoidTogglePin+0x9e>
    2768:	8b 81       	ldd	r24, Y+3	; 0x03
    276a:	9c 81       	ldd	r25, Y+4	; 0x04
    276c:	83 30       	cpi	r24, 0x03	; 3
    276e:	91 05       	cpc	r25, r1
    2770:	e9 f1       	breq	.+122    	; 0x27ec <MDIO_VoidTogglePin+0xc6>
    2772:	4f c0       	rjmp	.+158    	; 0x2812 <MDIO_VoidTogglePin+0xec>
	{
		case 0 : TOGGLE_BIT(PORTA_REG,Copy_U8Pin);break;
    2774:	ab e3       	ldi	r26, 0x3B	; 59
    2776:	b0 e0       	ldi	r27, 0x00	; 0
    2778:	eb e3       	ldi	r30, 0x3B	; 59
    277a:	f0 e0       	ldi	r31, 0x00	; 0
    277c:	80 81       	ld	r24, Z
    277e:	48 2f       	mov	r20, r24
    2780:	8a 81       	ldd	r24, Y+2	; 0x02
    2782:	28 2f       	mov	r18, r24
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	02 2e       	mov	r0, r18
    278c:	02 c0       	rjmp	.+4      	; 0x2792 <MDIO_VoidTogglePin+0x6c>
    278e:	88 0f       	add	r24, r24
    2790:	99 1f       	adc	r25, r25
    2792:	0a 94       	dec	r0
    2794:	e2 f7       	brpl	.-8      	; 0x278e <MDIO_VoidTogglePin+0x68>
    2796:	84 27       	eor	r24, r20
    2798:	8c 93       	st	X, r24
    279a:	3b c0       	rjmp	.+118    	; 0x2812 <MDIO_VoidTogglePin+0xec>
		case 1 : TOGGLE_BIT(PORTB_REG,Copy_U8Pin);break;
    279c:	a8 e3       	ldi	r26, 0x38	; 56
    279e:	b0 e0       	ldi	r27, 0x00	; 0
    27a0:	e8 e3       	ldi	r30, 0x38	; 56
    27a2:	f0 e0       	ldi	r31, 0x00	; 0
    27a4:	80 81       	ld	r24, Z
    27a6:	48 2f       	mov	r20, r24
    27a8:	8a 81       	ldd	r24, Y+2	; 0x02
    27aa:	28 2f       	mov	r18, r24
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	02 2e       	mov	r0, r18
    27b4:	02 c0       	rjmp	.+4      	; 0x27ba <MDIO_VoidTogglePin+0x94>
    27b6:	88 0f       	add	r24, r24
    27b8:	99 1f       	adc	r25, r25
    27ba:	0a 94       	dec	r0
    27bc:	e2 f7       	brpl	.-8      	; 0x27b6 <MDIO_VoidTogglePin+0x90>
    27be:	84 27       	eor	r24, r20
    27c0:	8c 93       	st	X, r24
    27c2:	27 c0       	rjmp	.+78     	; 0x2812 <MDIO_VoidTogglePin+0xec>
		case 2 : TOGGLE_BIT(PORTC_REG,Copy_U8Pin);break;
    27c4:	a5 e3       	ldi	r26, 0x35	; 53
    27c6:	b0 e0       	ldi	r27, 0x00	; 0
    27c8:	e5 e3       	ldi	r30, 0x35	; 53
    27ca:	f0 e0       	ldi	r31, 0x00	; 0
    27cc:	80 81       	ld	r24, Z
    27ce:	48 2f       	mov	r20, r24
    27d0:	8a 81       	ldd	r24, Y+2	; 0x02
    27d2:	28 2f       	mov	r18, r24
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	81 e0       	ldi	r24, 0x01	; 1
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	02 2e       	mov	r0, r18
    27dc:	02 c0       	rjmp	.+4      	; 0x27e2 <MDIO_VoidTogglePin+0xbc>
    27de:	88 0f       	add	r24, r24
    27e0:	99 1f       	adc	r25, r25
    27e2:	0a 94       	dec	r0
    27e4:	e2 f7       	brpl	.-8      	; 0x27de <MDIO_VoidTogglePin+0xb8>
    27e6:	84 27       	eor	r24, r20
    27e8:	8c 93       	st	X, r24
    27ea:	13 c0       	rjmp	.+38     	; 0x2812 <MDIO_VoidTogglePin+0xec>
		case 3 : TOGGLE_BIT(PORTD_REG,Copy_U8Pin);break;
    27ec:	a2 e3       	ldi	r26, 0x32	; 50
    27ee:	b0 e0       	ldi	r27, 0x00	; 0
    27f0:	e2 e3       	ldi	r30, 0x32	; 50
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	80 81       	ld	r24, Z
    27f6:	48 2f       	mov	r20, r24
    27f8:	8a 81       	ldd	r24, Y+2	; 0x02
    27fa:	28 2f       	mov	r18, r24
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	02 2e       	mov	r0, r18
    2804:	02 c0       	rjmp	.+4      	; 0x280a <MDIO_VoidTogglePin+0xe4>
    2806:	88 0f       	add	r24, r24
    2808:	99 1f       	adc	r25, r25
    280a:	0a 94       	dec	r0
    280c:	e2 f7       	brpl	.-8      	; 0x2806 <MDIO_VoidTogglePin+0xe0>
    280e:	84 27       	eor	r24, r20
    2810:	8c 93       	st	X, r24
		
		
		
	}
	
}
    2812:	0f 90       	pop	r0
    2814:	0f 90       	pop	r0
    2816:	0f 90       	pop	r0
    2818:	0f 90       	pop	r0
    281a:	cf 91       	pop	r28
    281c:	df 91       	pop	r29
    281e:	08 95       	ret

00002820 <MINT0_VoidInit>:
#include<avr/delay.h>


/*Initialize External Interrupt 0*/
void MINT0_VoidInit(void)
{
    2820:	df 93       	push	r29
    2822:	cf 93       	push	r28
    2824:	cd b7       	in	r28, 0x3d	; 61
    2826:	de b7       	in	r29, 0x3e	; 62
	
	SET_BIT(MCUCR,1);
    2828:	a5 e5       	ldi	r26, 0x55	; 85
    282a:	b0 e0       	ldi	r27, 0x00	; 0
    282c:	e5 e5       	ldi	r30, 0x55	; 85
    282e:	f0 e0       	ldi	r31, 0x00	; 0
    2830:	80 81       	ld	r24, Z
    2832:	82 60       	ori	r24, 0x02	; 2
    2834:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,0);
    2836:	a5 e5       	ldi	r26, 0x55	; 85
    2838:	b0 e0       	ldi	r27, 0x00	; 0
    283a:	e5 e5       	ldi	r30, 0x55	; 85
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	80 81       	ld	r24, Z
    2840:	8e 7f       	andi	r24, 0xFE	; 254
    2842:	8c 93       	st	X, r24

}
    2844:	cf 91       	pop	r28
    2846:	df 91       	pop	r29
    2848:	08 95       	ret

0000284a <MINT0_VoidEn>:


/*Enable External Interrupt 0*/
void MINT0_VoidEn(void)
{
    284a:	df 93       	push	r29
    284c:	cf 93       	push	r28
    284e:	cd b7       	in	r28, 0x3d	; 61
    2850:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,6);
    2852:	ab e5       	ldi	r26, 0x5B	; 91
    2854:	b0 e0       	ldi	r27, 0x00	; 0
    2856:	eb e5       	ldi	r30, 0x5B	; 91
    2858:	f0 e0       	ldi	r31, 0x00	; 0
    285a:	80 81       	ld	r24, Z
    285c:	80 64       	ori	r24, 0x40	; 64
    285e:	8c 93       	st	X, r24
	
}
    2860:	cf 91       	pop	r28
    2862:	df 91       	pop	r29
    2864:	08 95       	ret

00002866 <MINT0_VoidDis>:


/*Disable External Interrupt 0*/
void MINT0_VoidDis(void)
{
    2866:	df 93       	push	r29
    2868:	cf 93       	push	r28
    286a:	cd b7       	in	r28, 0x3d	; 61
    286c:	de b7       	in	r29, 0x3e	; 62
	
	CLR_BIT(GICR,6);
    286e:	ab e5       	ldi	r26, 0x5B	; 91
    2870:	b0 e0       	ldi	r27, 0x00	; 0
    2872:	eb e5       	ldi	r30, 0x5B	; 91
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	80 81       	ld	r24, Z
    2878:	8f 7b       	andi	r24, 0xBF	; 191
    287a:	8c 93       	st	X, r24
}
    287c:	cf 91       	pop	r28
    287e:	df 91       	pop	r29
    2880:	08 95       	ret

00002882 <__vector_1>:
/*Interrupt Function 1 */
void __vector_1(void)
{
    2882:	1f 92       	push	r1
    2884:	0f 92       	push	r0
    2886:	0f b6       	in	r0, 0x3f	; 63
    2888:	0f 92       	push	r0
    288a:	11 24       	eor	r1, r1
    288c:	2f 93       	push	r18
    288e:	3f 93       	push	r19
    2890:	4f 93       	push	r20
    2892:	5f 93       	push	r21
    2894:	6f 93       	push	r22
    2896:	7f 93       	push	r23
    2898:	8f 93       	push	r24
    289a:	9f 93       	push	r25
    289c:	af 93       	push	r26
    289e:	bf 93       	push	r27
    28a0:	ef 93       	push	r30
    28a2:	ff 93       	push	r31
    28a4:	df 93       	push	r29
    28a6:	cf 93       	push	r28
    28a8:	cd b7       	in	r28, 0x3d	; 61
    28aa:	de b7       	in	r29, 0x3e	; 62
    28ac:	2f 97       	sbiw	r28, 0x0f	; 15
    28ae:	de bf       	out	0x3e, r29	; 62
    28b0:	cd bf       	out	0x3d, r28	; 61
	for(u8 i=0;i<=3;i++)
    28b2:	1f 86       	std	Y+15, r1	; 0x0f
    28b4:	79 c0       	rjmp	.+242    	; 0x29a8 <__vector_1+0x126>
{
	MDIO_VoidTogglePin(3,0);
    28b6:	83 e0       	ldi	r24, 0x03	; 3
    28b8:	60 e0       	ldi	r22, 0x00	; 0
    28ba:	0e 94 93 13 	call	0x2726	; 0x2726 <MDIO_VoidTogglePin>
    28be:	80 e0       	ldi	r24, 0x00	; 0
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	aa e7       	ldi	r26, 0x7A	; 122
    28c4:	b4 e4       	ldi	r27, 0x44	; 68
    28c6:	8b 87       	std	Y+11, r24	; 0x0b
    28c8:	9c 87       	std	Y+12, r25	; 0x0c
    28ca:	ad 87       	std	Y+13, r26	; 0x0d
    28cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    28d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    28d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    28d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    28d6:	20 e0       	ldi	r18, 0x00	; 0
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	4a ef       	ldi	r20, 0xFA	; 250
    28dc:	54 e4       	ldi	r21, 0x44	; 68
    28de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	8f 83       	std	Y+7, r24	; 0x07
    28e8:	98 87       	std	Y+8, r25	; 0x08
    28ea:	a9 87       	std	Y+9, r26	; 0x09
    28ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28ee:	6f 81       	ldd	r22, Y+7	; 0x07
    28f0:	78 85       	ldd	r23, Y+8	; 0x08
    28f2:	89 85       	ldd	r24, Y+9	; 0x09
    28f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f6:	20 e0       	ldi	r18, 0x00	; 0
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	40 e8       	ldi	r20, 0x80	; 128
    28fc:	5f e3       	ldi	r21, 0x3F	; 63
    28fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2902:	88 23       	and	r24, r24
    2904:	2c f4       	brge	.+10     	; 0x2910 <__vector_1+0x8e>
		__ticks = 1;
    2906:	81 e0       	ldi	r24, 0x01	; 1
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	9e 83       	std	Y+6, r25	; 0x06
    290c:	8d 83       	std	Y+5, r24	; 0x05
    290e:	3f c0       	rjmp	.+126    	; 0x298e <__vector_1+0x10c>
	else if (__tmp > 65535)
    2910:	6f 81       	ldd	r22, Y+7	; 0x07
    2912:	78 85       	ldd	r23, Y+8	; 0x08
    2914:	89 85       	ldd	r24, Y+9	; 0x09
    2916:	9a 85       	ldd	r25, Y+10	; 0x0a
    2918:	20 e0       	ldi	r18, 0x00	; 0
    291a:	3f ef       	ldi	r19, 0xFF	; 255
    291c:	4f e7       	ldi	r20, 0x7F	; 127
    291e:	57 e4       	ldi	r21, 0x47	; 71
    2920:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2924:	18 16       	cp	r1, r24
    2926:	4c f5       	brge	.+82     	; 0x297a <__vector_1+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2928:	6b 85       	ldd	r22, Y+11	; 0x0b
    292a:	7c 85       	ldd	r23, Y+12	; 0x0c
    292c:	8d 85       	ldd	r24, Y+13	; 0x0d
    292e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	40 e2       	ldi	r20, 0x20	; 32
    2936:	51 e4       	ldi	r21, 0x41	; 65
    2938:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    293c:	dc 01       	movw	r26, r24
    293e:	cb 01       	movw	r24, r22
    2940:	bc 01       	movw	r22, r24
    2942:	cd 01       	movw	r24, r26
    2944:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2948:	dc 01       	movw	r26, r24
    294a:	cb 01       	movw	r24, r22
    294c:	9e 83       	std	Y+6, r25	; 0x06
    294e:	8d 83       	std	Y+5, r24	; 0x05
    2950:	0f c0       	rjmp	.+30     	; 0x2970 <__vector_1+0xee>
    2952:	88 ec       	ldi	r24, 0xC8	; 200
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	9c 83       	std	Y+4, r25	; 0x04
    2958:	8b 83       	std	Y+3, r24	; 0x03
    295a:	8b 81       	ldd	r24, Y+3	; 0x03
    295c:	9c 81       	ldd	r25, Y+4	; 0x04
    295e:	01 97       	sbiw	r24, 0x01	; 1
    2960:	f1 f7       	brne	.-4      	; 0x295e <__vector_1+0xdc>
    2962:	9c 83       	std	Y+4, r25	; 0x04
    2964:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2966:	8d 81       	ldd	r24, Y+5	; 0x05
    2968:	9e 81       	ldd	r25, Y+6	; 0x06
    296a:	01 97       	sbiw	r24, 0x01	; 1
    296c:	9e 83       	std	Y+6, r25	; 0x06
    296e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2970:	8d 81       	ldd	r24, Y+5	; 0x05
    2972:	9e 81       	ldd	r25, Y+6	; 0x06
    2974:	00 97       	sbiw	r24, 0x00	; 0
    2976:	69 f7       	brne	.-38     	; 0x2952 <__vector_1+0xd0>
    2978:	14 c0       	rjmp	.+40     	; 0x29a2 <__vector_1+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    297a:	6f 81       	ldd	r22, Y+7	; 0x07
    297c:	78 85       	ldd	r23, Y+8	; 0x08
    297e:	89 85       	ldd	r24, Y+9	; 0x09
    2980:	9a 85       	ldd	r25, Y+10	; 0x0a
    2982:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	9e 83       	std	Y+6, r25	; 0x06
    298c:	8d 83       	std	Y+5, r24	; 0x05
    298e:	8d 81       	ldd	r24, Y+5	; 0x05
    2990:	9e 81       	ldd	r25, Y+6	; 0x06
    2992:	9a 83       	std	Y+2, r25	; 0x02
    2994:	89 83       	std	Y+1, r24	; 0x01
    2996:	89 81       	ldd	r24, Y+1	; 0x01
    2998:	9a 81       	ldd	r25, Y+2	; 0x02
    299a:	01 97       	sbiw	r24, 0x01	; 1
    299c:	f1 f7       	brne	.-4      	; 0x299a <__vector_1+0x118>
    299e:	9a 83       	std	Y+2, r25	; 0x02
    29a0:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(GICR,6);
}
/*Interrupt Function 1 */
void __vector_1(void)
{
	for(u8 i=0;i<=3;i++)
    29a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    29a4:	8f 5f       	subi	r24, 0xFF	; 255
    29a6:	8f 87       	std	Y+15, r24	; 0x0f
    29a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    29aa:	84 30       	cpi	r24, 0x04	; 4
    29ac:	08 f4       	brcc	.+2      	; 0x29b0 <__vector_1+0x12e>
    29ae:	83 cf       	rjmp	.-250    	; 0x28b6 <__vector_1+0x34>
{
	MDIO_VoidTogglePin(3,0);
	_delay_ms(1000);
}
}
    29b0:	2f 96       	adiw	r28, 0x0f	; 15
    29b2:	de bf       	out	0x3e, r29	; 62
    29b4:	cd bf       	out	0x3d, r28	; 61
    29b6:	cf 91       	pop	r28
    29b8:	df 91       	pop	r29
    29ba:	ff 91       	pop	r31
    29bc:	ef 91       	pop	r30
    29be:	bf 91       	pop	r27
    29c0:	af 91       	pop	r26
    29c2:	9f 91       	pop	r25
    29c4:	8f 91       	pop	r24
    29c6:	7f 91       	pop	r23
    29c8:	6f 91       	pop	r22
    29ca:	5f 91       	pop	r21
    29cc:	4f 91       	pop	r20
    29ce:	3f 91       	pop	r19
    29d0:	2f 91       	pop	r18
    29d2:	0f 90       	pop	r0
    29d4:	0f be       	out	0x3f, r0	; 63
    29d6:	0f 90       	pop	r0
    29d8:	1f 90       	pop	r1
    29da:	18 95       	reti

000029dc <MINT1_VoidInit>:
/*Initialize External Interrupt 1*/
void MINT1_VoidInit(void)
{
    29dc:	df 93       	push	r29
    29de:	cf 93       	push	r28
    29e0:	cd b7       	in	r28, 0x3d	; 61
    29e2:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(MCUCR,3);
    29e4:	a5 e5       	ldi	r26, 0x55	; 85
    29e6:	b0 e0       	ldi	r27, 0x00	; 0
    29e8:	e5 e5       	ldi	r30, 0x55	; 85
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	80 81       	ld	r24, Z
    29ee:	88 60       	ori	r24, 0x08	; 8
    29f0:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,2);
    29f2:	a5 e5       	ldi	r26, 0x55	; 85
    29f4:	b0 e0       	ldi	r27, 0x00	; 0
    29f6:	e5 e5       	ldi	r30, 0x55	; 85
    29f8:	f0 e0       	ldi	r31, 0x00	; 0
    29fa:	80 81       	ld	r24, Z
    29fc:	8b 7f       	andi	r24, 0xFB	; 251
    29fe:	8c 93       	st	X, r24

}
    2a00:	cf 91       	pop	r28
    2a02:	df 91       	pop	r29
    2a04:	08 95       	ret

00002a06 <MINT1_VoidEn>:

/*Enable External Interrupt 1*/
void MINT1_VoidEn(void)
{
    2a06:	df 93       	push	r29
    2a08:	cf 93       	push	r28
    2a0a:	cd b7       	in	r28, 0x3d	; 61
    2a0c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,7);
    2a0e:	ab e5       	ldi	r26, 0x5B	; 91
    2a10:	b0 e0       	ldi	r27, 0x00	; 0
    2a12:	eb e5       	ldi	r30, 0x5B	; 91
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	80 81       	ld	r24, Z
    2a18:	80 68       	ori	r24, 0x80	; 128
    2a1a:	8c 93       	st	X, r24

}
    2a1c:	cf 91       	pop	r28
    2a1e:	df 91       	pop	r29
    2a20:	08 95       	ret

00002a22 <MINT1_VoidDis>:

/*Disable External Interrupt 0*/
void MINT1_VoidDis(void)
{
    2a22:	df 93       	push	r29
    2a24:	cf 93       	push	r28
    2a26:	cd b7       	in	r28, 0x3d	; 61
    2a28:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(GICR,7);
    2a2a:	ab e5       	ldi	r26, 0x5B	; 91
    2a2c:	b0 e0       	ldi	r27, 0x00	; 0
    2a2e:	eb e5       	ldi	r30, 0x5B	; 91
    2a30:	f0 e0       	ldi	r31, 0x00	; 0
    2a32:	80 81       	ld	r24, Z
    2a34:	8f 77       	andi	r24, 0x7F	; 127
    2a36:	8c 93       	st	X, r24
}
    2a38:	cf 91       	pop	r28
    2a3a:	df 91       	pop	r29
    2a3c:	08 95       	ret

00002a3e <__vector_2>:


/*Interrupt Function 2 */
void __vector_2(void)
{
    2a3e:	1f 92       	push	r1
    2a40:	0f 92       	push	r0
    2a42:	0f b6       	in	r0, 0x3f	; 63
    2a44:	0f 92       	push	r0
    2a46:	11 24       	eor	r1, r1
    2a48:	2f 93       	push	r18
    2a4a:	3f 93       	push	r19
    2a4c:	4f 93       	push	r20
    2a4e:	5f 93       	push	r21
    2a50:	6f 93       	push	r22
    2a52:	7f 93       	push	r23
    2a54:	8f 93       	push	r24
    2a56:	9f 93       	push	r25
    2a58:	af 93       	push	r26
    2a5a:	bf 93       	push	r27
    2a5c:	ef 93       	push	r30
    2a5e:	ff 93       	push	r31
    2a60:	df 93       	push	r29
    2a62:	cf 93       	push	r28
    2a64:	cd b7       	in	r28, 0x3d	; 61
    2a66:	de b7       	in	r29, 0x3e	; 62
    2a68:	2f 97       	sbiw	r28, 0x0f	; 15
    2a6a:	de bf       	out	0x3e, r29	; 62
    2a6c:	cd bf       	out	0x3d, r28	; 61
for(u8 y=0;y<=3;y++)
    2a6e:	1f 86       	std	Y+15, r1	; 0x0f
    2a70:	79 c0       	rjmp	.+242    	; 0x2b64 <__vector_2+0x126>
{
	MDIO_VoidTogglePin(3,4);
    2a72:	83 e0       	ldi	r24, 0x03	; 3
    2a74:	64 e0       	ldi	r22, 0x04	; 4
    2a76:	0e 94 93 13 	call	0x2726	; 0x2726 <MDIO_VoidTogglePin>
    2a7a:	80 e0       	ldi	r24, 0x00	; 0
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	aa e7       	ldi	r26, 0x7A	; 122
    2a80:	b4 e4       	ldi	r27, 0x44	; 68
    2a82:	8b 87       	std	Y+11, r24	; 0x0b
    2a84:	9c 87       	std	Y+12, r25	; 0x0c
    2a86:	ad 87       	std	Y+13, r26	; 0x0d
    2a88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a90:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a92:	20 e0       	ldi	r18, 0x00	; 0
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	4a ef       	ldi	r20, 0xFA	; 250
    2a98:	54 e4       	ldi	r21, 0x44	; 68
    2a9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a9e:	dc 01       	movw	r26, r24
    2aa0:	cb 01       	movw	r24, r22
    2aa2:	8f 83       	std	Y+7, r24	; 0x07
    2aa4:	98 87       	std	Y+8, r25	; 0x08
    2aa6:	a9 87       	std	Y+9, r26	; 0x09
    2aa8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2aaa:	6f 81       	ldd	r22, Y+7	; 0x07
    2aac:	78 85       	ldd	r23, Y+8	; 0x08
    2aae:	89 85       	ldd	r24, Y+9	; 0x09
    2ab0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	40 e8       	ldi	r20, 0x80	; 128
    2ab8:	5f e3       	ldi	r21, 0x3F	; 63
    2aba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2abe:	88 23       	and	r24, r24
    2ac0:	2c f4       	brge	.+10     	; 0x2acc <__vector_2+0x8e>
		__ticks = 1;
    2ac2:	81 e0       	ldi	r24, 0x01	; 1
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	9e 83       	std	Y+6, r25	; 0x06
    2ac8:	8d 83       	std	Y+5, r24	; 0x05
    2aca:	3f c0       	rjmp	.+126    	; 0x2b4a <__vector_2+0x10c>
	else if (__tmp > 65535)
    2acc:	6f 81       	ldd	r22, Y+7	; 0x07
    2ace:	78 85       	ldd	r23, Y+8	; 0x08
    2ad0:	89 85       	ldd	r24, Y+9	; 0x09
    2ad2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	3f ef       	ldi	r19, 0xFF	; 255
    2ad8:	4f e7       	ldi	r20, 0x7F	; 127
    2ada:	57 e4       	ldi	r21, 0x47	; 71
    2adc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ae0:	18 16       	cp	r1, r24
    2ae2:	4c f5       	brge	.+82     	; 0x2b36 <__vector_2+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ae4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ae6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ae8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aea:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aec:	20 e0       	ldi	r18, 0x00	; 0
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	40 e2       	ldi	r20, 0x20	; 32
    2af2:	51 e4       	ldi	r21, 0x41	; 65
    2af4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	bc 01       	movw	r22, r24
    2afe:	cd 01       	movw	r24, r26
    2b00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b04:	dc 01       	movw	r26, r24
    2b06:	cb 01       	movw	r24, r22
    2b08:	9e 83       	std	Y+6, r25	; 0x06
    2b0a:	8d 83       	std	Y+5, r24	; 0x05
    2b0c:	0f c0       	rjmp	.+30     	; 0x2b2c <__vector_2+0xee>
    2b0e:	88 ec       	ldi	r24, 0xC8	; 200
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	9c 83       	std	Y+4, r25	; 0x04
    2b14:	8b 83       	std	Y+3, r24	; 0x03
    2b16:	8b 81       	ldd	r24, Y+3	; 0x03
    2b18:	9c 81       	ldd	r25, Y+4	; 0x04
    2b1a:	01 97       	sbiw	r24, 0x01	; 1
    2b1c:	f1 f7       	brne	.-4      	; 0x2b1a <__vector_2+0xdc>
    2b1e:	9c 83       	std	Y+4, r25	; 0x04
    2b20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b22:	8d 81       	ldd	r24, Y+5	; 0x05
    2b24:	9e 81       	ldd	r25, Y+6	; 0x06
    2b26:	01 97       	sbiw	r24, 0x01	; 1
    2b28:	9e 83       	std	Y+6, r25	; 0x06
    2b2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b30:	00 97       	sbiw	r24, 0x00	; 0
    2b32:	69 f7       	brne	.-38     	; 0x2b0e <__vector_2+0xd0>
    2b34:	14 c0       	rjmp	.+40     	; 0x2b5e <__vector_2+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b36:	6f 81       	ldd	r22, Y+7	; 0x07
    2b38:	78 85       	ldd	r23, Y+8	; 0x08
    2b3a:	89 85       	ldd	r24, Y+9	; 0x09
    2b3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b42:	dc 01       	movw	r26, r24
    2b44:	cb 01       	movw	r24, r22
    2b46:	9e 83       	std	Y+6, r25	; 0x06
    2b48:	8d 83       	std	Y+5, r24	; 0x05
    2b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b4e:	9a 83       	std	Y+2, r25	; 0x02
    2b50:	89 83       	std	Y+1, r24	; 0x01
    2b52:	89 81       	ldd	r24, Y+1	; 0x01
    2b54:	9a 81       	ldd	r25, Y+2	; 0x02
    2b56:	01 97       	sbiw	r24, 0x01	; 1
    2b58:	f1 f7       	brne	.-4      	; 0x2b56 <__vector_2+0x118>
    2b5a:	9a 83       	std	Y+2, r25	; 0x02
    2b5c:	89 83       	std	Y+1, r24	; 0x01


/*Interrupt Function 2 */
void __vector_2(void)
{
for(u8 y=0;y<=3;y++)
    2b5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b60:	8f 5f       	subi	r24, 0xFF	; 255
    2b62:	8f 87       	std	Y+15, r24	; 0x0f
    2b64:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b66:	84 30       	cpi	r24, 0x04	; 4
    2b68:	08 f4       	brcc	.+2      	; 0x2b6c <__vector_2+0x12e>
    2b6a:	83 cf       	rjmp	.-250    	; 0x2a72 <__vector_2+0x34>
{
	MDIO_VoidTogglePin(3,4);
	_delay_ms(1000);
}
}
    2b6c:	2f 96       	adiw	r28, 0x0f	; 15
    2b6e:	de bf       	out	0x3e, r29	; 62
    2b70:	cd bf       	out	0x3d, r28	; 61
    2b72:	cf 91       	pop	r28
    2b74:	df 91       	pop	r29
    2b76:	ff 91       	pop	r31
    2b78:	ef 91       	pop	r30
    2b7a:	bf 91       	pop	r27
    2b7c:	af 91       	pop	r26
    2b7e:	9f 91       	pop	r25
    2b80:	8f 91       	pop	r24
    2b82:	7f 91       	pop	r23
    2b84:	6f 91       	pop	r22
    2b86:	5f 91       	pop	r21
    2b88:	4f 91       	pop	r20
    2b8a:	3f 91       	pop	r19
    2b8c:	2f 91       	pop	r18
    2b8e:	0f 90       	pop	r0
    2b90:	0f be       	out	0x3f, r0	; 63
    2b92:	0f 90       	pop	r0
    2b94:	1f 90       	pop	r1
    2b96:	18 95       	reti

00002b98 <GIE_VoidEn>:
#include"MGIE_Private.h"



void GIE_VoidEn(void)
{
    2b98:	df 93       	push	r29
    2b9a:	cf 93       	push	r28
    2b9c:	cd b7       	in	r28, 0x3d	; 61
    2b9e:	de b7       	in	r29, 0x3e	; 62
	
	SET_BIT(SREG,7);
    2ba0:	af e5       	ldi	r26, 0x5F	; 95
    2ba2:	b0 e0       	ldi	r27, 0x00	; 0
    2ba4:	ef e5       	ldi	r30, 0x5F	; 95
    2ba6:	f0 e0       	ldi	r31, 0x00	; 0
    2ba8:	80 81       	ld	r24, Z
    2baa:	80 68       	ori	r24, 0x80	; 128
    2bac:	8c 93       	st	X, r24
	
}
    2bae:	cf 91       	pop	r28
    2bb0:	df 91       	pop	r29
    2bb2:	08 95       	ret

00002bb4 <GIE_VoidDis>:
void GIE_VoidDis(void)
{
    2bb4:	df 93       	push	r29
    2bb6:	cf 93       	push	r28
    2bb8:	cd b7       	in	r28, 0x3d	; 61
    2bba:	de b7       	in	r29, 0x3e	; 62
	
	CLR_BIT(SREG,7);
    2bbc:	af e5       	ldi	r26, 0x5F	; 95
    2bbe:	b0 e0       	ldi	r27, 0x00	; 0
    2bc0:	ef e5       	ldi	r30, 0x5F	; 95
    2bc2:	f0 e0       	ldi	r31, 0x00	; 0
    2bc4:	80 81       	ld	r24, Z
    2bc6:	8f 77       	andi	r24, 0x7F	; 127
    2bc8:	8c 93       	st	X, r24
	
}
    2bca:	cf 91       	pop	r28
    2bcc:	df 91       	pop	r29
    2bce:	08 95       	ret

00002bd0 <TIM0_Init>:
u8 Flag=0;
u16 Snap1=0;
u32 Snap2=0;
u32 Snap3=0;
void TIM0_Init(void)
{
    2bd0:	df 93       	push	r29
    2bd2:	cf 93       	push	r28
    2bd4:	cd b7       	in	r28, 0x3d	; 61
    2bd6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,1);
	
	#endif
	#elif TIMER0_MODE==PWM_MODE
		/*Select Mode(PWM) */
	SET_BIT(TCCR0,6);
    2bd8:	a3 e5       	ldi	r26, 0x53	; 83
    2bda:	b0 e0       	ldi	r27, 0x00	; 0
    2bdc:	e3 e5       	ldi	r30, 0x53	; 83
    2bde:	f0 e0       	ldi	r31, 0x00	; 0
    2be0:	80 81       	ld	r24, Z
    2be2:	80 64       	ori	r24, 0x40	; 64
    2be4:	8c 93       	st	X, r24
	SET_BIT(TCCR0,3);
    2be6:	a3 e5       	ldi	r26, 0x53	; 83
    2be8:	b0 e0       	ldi	r27, 0x00	; 0
    2bea:	e3 e5       	ldi	r30, 0x53	; 83
    2bec:	f0 e0       	ldi	r31, 0x00	; 0
    2bee:	80 81       	ld	r24, Z
    2bf0:	88 60       	ori	r24, 0x08	; 8
    2bf2:	8c 93       	st	X, r24
	
	/*Select Non Inverting Mode*/
	SET_BIT(TCCR0,5);
    2bf4:	a3 e5       	ldi	r26, 0x53	; 83
    2bf6:	b0 e0       	ldi	r27, 0x00	; 0
    2bf8:	e3 e5       	ldi	r30, 0x53	; 83
    2bfa:	f0 e0       	ldi	r31, 0x00	; 0
    2bfc:	80 81       	ld	r24, Z
    2bfe:	80 62       	ori	r24, 0x20	; 32
    2c00:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,4);
    2c02:	a3 e5       	ldi	r26, 0x53	; 83
    2c04:	b0 e0       	ldi	r27, 0x00	; 0
    2c06:	e3 e5       	ldi	r30, 0x53	; 83
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	80 81       	ld	r24, Z
    2c0c:	8f 7e       	andi	r24, 0xEF	; 239
    2c0e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,2);
	SET_BIT(TCCR0,0);
	SET_BIT(TCCR0,1);
	
	#elif TIMER0_PRESCALLING==DIV_256
	SET_BIT(TCCR0,2);
    2c10:	a3 e5       	ldi	r26, 0x53	; 83
    2c12:	b0 e0       	ldi	r27, 0x00	; 0
    2c14:	e3 e5       	ldi	r30, 0x53	; 83
    2c16:	f0 e0       	ldi	r31, 0x00	; 0
    2c18:	80 81       	ld	r24, Z
    2c1a:	84 60       	ori	r24, 0x04	; 4
    2c1c:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,0);
    2c1e:	a3 e5       	ldi	r26, 0x53	; 83
    2c20:	b0 e0       	ldi	r27, 0x00	; 0
    2c22:	e3 e5       	ldi	r30, 0x53	; 83
    2c24:	f0 e0       	ldi	r31, 0x00	; 0
    2c26:	80 81       	ld	r24, Z
    2c28:	8e 7f       	andi	r24, 0xFE	; 254
    2c2a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,1);
    2c2c:	a3 e5       	ldi	r26, 0x53	; 83
    2c2e:	b0 e0       	ldi	r27, 0x00	; 0
    2c30:	e3 e5       	ldi	r30, 0x53	; 83
    2c32:	f0 e0       	ldi	r31, 0x00	; 0
    2c34:	80 81       	ld	r24, Z
    2c36:	8d 7f       	andi	r24, 0xFD	; 253
    2c38:	8c 93       	st	X, r24
	#endif

	
	
	
}
    2c3a:	cf 91       	pop	r28
    2c3c:	df 91       	pop	r29
    2c3e:	08 95       	ret

00002c40 <TIM0_PrelaodValue>:

void TIM0_PrelaodValue(u8 Copy_U8PV0)
{
    2c40:	df 93       	push	r29
    2c42:	cf 93       	push	r28
    2c44:	0f 92       	push	r0
    2c46:	cd b7       	in	r28, 0x3d	; 61
    2c48:	de b7       	in	r29, 0x3e	; 62
    2c4a:	89 83       	std	Y+1, r24	; 0x01
	
	/*Preload Value*/
	TCNT0=Copy_U8PV0 ;
    2c4c:	e2 e5       	ldi	r30, 0x52	; 82
    2c4e:	f0 e0       	ldi	r31, 0x00	; 0
    2c50:	89 81       	ldd	r24, Y+1	; 0x01
    2c52:	80 83       	st	Z, r24
	
}
    2c54:	0f 90       	pop	r0
    2c56:	cf 91       	pop	r28
    2c58:	df 91       	pop	r29
    2c5a:	08 95       	ret

00002c5c <TIM0_CompareValue>:


void TIM0_CompareValue(u8 Copy_U8CV0)
{
    2c5c:	df 93       	push	r29
    2c5e:	cf 93       	push	r28
    2c60:	0f 92       	push	r0
    2c62:	cd b7       	in	r28, 0x3d	; 61
    2c64:	de b7       	in	r29, 0x3e	; 62
    2c66:	89 83       	std	Y+1, r24	; 0x01
	/*Set Compare Value*/
	OCR0=Copy_U8CV0;
    2c68:	ec e5       	ldi	r30, 0x5C	; 92
    2c6a:	f0 e0       	ldi	r31, 0x00	; 0
    2c6c:	89 81       	ldd	r24, Y+1	; 0x01
    2c6e:	80 83       	st	Z, r24
}
    2c70:	0f 90       	pop	r0
    2c72:	cf 91       	pop	r28
    2c74:	df 91       	pop	r29
    2c76:	08 95       	ret

00002c78 <TIM0_FastPWM_Set_DutyCycle>:


void TIM0_FastPWM_Set_DutyCycle(u8 Copy_U8DC)
{
    2c78:	df 93       	push	r29
    2c7a:	cf 93       	push	r28
    2c7c:	0f 92       	push	r0
    2c7e:	cd b7       	in	r28, 0x3d	; 61
    2c80:	de b7       	in	r29, 0x3e	; 62
    2c82:	89 83       	std	Y+1, r24	; 0x01
	/*Set Duty Cycle*/
	OCR0=Copy_U8DC;
    2c84:	ec e5       	ldi	r30, 0x5C	; 92
    2c86:	f0 e0       	ldi	r31, 0x00	; 0
    2c88:	89 81       	ldd	r24, Y+1	; 0x01
    2c8a:	80 83       	st	Z, r24
}
    2c8c:	0f 90       	pop	r0
    2c8e:	cf 91       	pop	r28
    2c90:	df 91       	pop	r29
    2c92:	08 95       	ret

00002c94 <TIM1_Init_OV>:

void TIM1_Init_OV(void)
{
    2c94:	df 93       	push	r29
    2c96:	cf 93       	push	r28
    2c98:	cd b7       	in	r28, 0x3d	; 61
    2c9a:	de b7       	in	r29, 0x3e	; 62
	/*Select Normal Mode*/
	CLR_BIT(TCCR1A,0);
    2c9c:	af e4       	ldi	r26, 0x4F	; 79
    2c9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ca0:	ef e4       	ldi	r30, 0x4F	; 79
    2ca2:	f0 e0       	ldi	r31, 0x00	; 0
    2ca4:	80 81       	ld	r24, Z
    2ca6:	8e 7f       	andi	r24, 0xFE	; 254
    2ca8:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,1);
    2caa:	af e4       	ldi	r26, 0x4F	; 79
    2cac:	b0 e0       	ldi	r27, 0x00	; 0
    2cae:	ef e4       	ldi	r30, 0x4F	; 79
    2cb0:	f0 e0       	ldi	r31, 0x00	; 0
    2cb2:	80 81       	ld	r24, Z
    2cb4:	8d 7f       	andi	r24, 0xFD	; 253
    2cb6:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,3);
    2cb8:	ae e4       	ldi	r26, 0x4E	; 78
    2cba:	b0 e0       	ldi	r27, 0x00	; 0
    2cbc:	ee e4       	ldi	r30, 0x4E	; 78
    2cbe:	f0 e0       	ldi	r31, 0x00	; 0
    2cc0:	80 81       	ld	r24, Z
    2cc2:	87 7f       	andi	r24, 0xF7	; 247
    2cc4:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,4);
    2cc6:	ae e4       	ldi	r26, 0x4E	; 78
    2cc8:	b0 e0       	ldi	r27, 0x00	; 0
    2cca:	ee e4       	ldi	r30, 0x4E	; 78
    2ccc:	f0 e0       	ldi	r31, 0x00	; 0
    2cce:	80 81       	ld	r24, Z
    2cd0:	8f 7e       	andi	r24, 0xEF	; 239
    2cd2:	8c 93       	st	X, r24
	
	/*Select Prescaler (256)*/
	SET_BIT(TCCR1B,2);
    2cd4:	ae e4       	ldi	r26, 0x4E	; 78
    2cd6:	b0 e0       	ldi	r27, 0x00	; 0
    2cd8:	ee e4       	ldi	r30, 0x4E	; 78
    2cda:	f0 e0       	ldi	r31, 0x00	; 0
    2cdc:	80 81       	ld	r24, Z
    2cde:	84 60       	ori	r24, 0x04	; 4
    2ce0:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,1);
    2ce2:	ae e4       	ldi	r26, 0x4E	; 78
    2ce4:	b0 e0       	ldi	r27, 0x00	; 0
    2ce6:	ee e4       	ldi	r30, 0x4E	; 78
    2ce8:	f0 e0       	ldi	r31, 0x00	; 0
    2cea:	80 81       	ld	r24, Z
    2cec:	8d 7f       	andi	r24, 0xFD	; 253
    2cee:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,0);
    2cf0:	ae e4       	ldi	r26, 0x4E	; 78
    2cf2:	b0 e0       	ldi	r27, 0x00	; 0
    2cf4:	ee e4       	ldi	r30, 0x4E	; 78
    2cf6:	f0 e0       	ldi	r31, 0x00	; 0
    2cf8:	80 81       	ld	r24, Z
    2cfa:	8e 7f       	andi	r24, 0xFE	; 254
    2cfc:	8c 93       	st	X, r24
	
	/*Enable OVER Flow Interrupt (PIE) */
	SET_BIT(TIMSK,2);
    2cfe:	a9 e5       	ldi	r26, 0x59	; 89
    2d00:	b0 e0       	ldi	r27, 0x00	; 0
    2d02:	e9 e5       	ldi	r30, 0x59	; 89
    2d04:	f0 e0       	ldi	r31, 0x00	; 0
    2d06:	80 81       	ld	r24, Z
    2d08:	84 60       	ori	r24, 0x04	; 4
    2d0a:	8c 93       	st	X, r24
	
	/*Enable ICU Interrupt (PIE)*/
	SET_BIT(TIMSK,5);
    2d0c:	a9 e5       	ldi	r26, 0x59	; 89
    2d0e:	b0 e0       	ldi	r27, 0x00	; 0
    2d10:	e9 e5       	ldi	r30, 0x59	; 89
    2d12:	f0 e0       	ldi	r31, 0x00	; 0
    2d14:	80 81       	ld	r24, Z
    2d16:	80 62       	ori	r24, 0x20	; 32
    2d18:	8c 93       	st	X, r24
	
}
    2d1a:	cf 91       	pop	r28
    2d1c:	df 91       	pop	r29
    2d1e:	08 95       	ret

00002d20 <__vector_9>:
//
}
#endif

void __vector_9(void) /*TIM1_Over Flow Int*/
{
    2d20:	1f 92       	push	r1
    2d22:	0f 92       	push	r0
    2d24:	0f b6       	in	r0, 0x3f	; 63
    2d26:	0f 92       	push	r0
    2d28:	11 24       	eor	r1, r1
    2d2a:	8f 93       	push	r24
    2d2c:	df 93       	push	r29
    2d2e:	cf 93       	push	r28
    2d30:	cd b7       	in	r28, 0x3d	; 61
    2d32:	de b7       	in	r29, 0x3e	; 62
	
	OV_Count1++;
    2d34:	80 91 30 01 	lds	r24, 0x0130
    2d38:	8f 5f       	subi	r24, 0xFF	; 255
    2d3a:	80 93 30 01 	sts	0x0130, r24
}
    2d3e:	cf 91       	pop	r28
    2d40:	df 91       	pop	r29
    2d42:	8f 91       	pop	r24
    2d44:	0f 90       	pop	r0
    2d46:	0f be       	out	0x3f, r0	; 63
    2d48:	0f 90       	pop	r0
    2d4a:	1f 90       	pop	r1
    2d4c:	18 95       	reti

00002d4e <__vector_6>:

void __vector_6(void) /*TIM_ICU Int*/
{
    2d4e:	1f 92       	push	r1
    2d50:	0f 92       	push	r0
    2d52:	0f b6       	in	r0, 0x3f	; 63
    2d54:	0f 92       	push	r0
    2d56:	11 24       	eor	r1, r1
    2d58:	2f 93       	push	r18
    2d5a:	3f 93       	push	r19
    2d5c:	4f 93       	push	r20
    2d5e:	5f 93       	push	r21
    2d60:	8f 93       	push	r24
    2d62:	9f 93       	push	r25
    2d64:	af 93       	push	r26
    2d66:	bf 93       	push	r27
    2d68:	ef 93       	push	r30
    2d6a:	ff 93       	push	r31
    2d6c:	df 93       	push	r29
    2d6e:	cf 93       	push	r28
    2d70:	cd b7       	in	r28, 0x3d	; 61
    2d72:	de b7       	in	r29, 0x3e	; 62
	if(Flag==0)
    2d74:	80 91 31 01 	lds	r24, 0x0131
    2d78:	88 23       	and	r24, r24
    2d7a:	a9 f4       	brne	.+42     	; 0x2da6 <__vector_6+0x58>
	{
		/*Capture First Change*/
		Snap1=ICR1;
    2d7c:	e6 e4       	ldi	r30, 0x46	; 70
    2d7e:	f0 e0       	ldi	r31, 0x00	; 0
    2d80:	80 81       	ld	r24, Z
    2d82:	91 81       	ldd	r25, Z+1	; 0x01
    2d84:	90 93 33 01 	sts	0x0133, r25
    2d88:	80 93 32 01 	sts	0x0132, r24
		
		/*Select Sense Control(ICES) :Falling_Edge */
		CLR_BIT(TCCR1B,6); 
    2d8c:	ae e4       	ldi	r26, 0x4E	; 78
    2d8e:	b0 e0       	ldi	r27, 0x00	; 0
    2d90:	ee e4       	ldi	r30, 0x4E	; 78
    2d92:	f0 e0       	ldi	r31, 0x00	; 0
    2d94:	80 81       	ld	r24, Z
    2d96:	8f 7b       	andi	r24, 0xBF	; 191
    2d98:	8c 93       	st	X, r24
		
		Flag=1;
    2d9a:	81 e0       	ldi	r24, 0x01	; 1
    2d9c:	80 93 31 01 	sts	0x0131, r24
		OV_Count1=0;
    2da0:	10 92 30 01 	sts	0x0130, r1
    2da4:	58 c0       	rjmp	.+176    	; 0x2e56 <__vector_6+0x108>
		
	}
	
	else if(Flag==1)
    2da6:	80 91 31 01 	lds	r24, 0x0131
    2daa:	81 30       	cpi	r24, 0x01	; 1
    2dac:	61 f5       	brne	.+88     	; 0x2e06 <__vector_6+0xb8>
	{
		/*Capture Second Change*/
		Snap2=ICR1+(OV_Count1*(2^16));
    2dae:	e6 e4       	ldi	r30, 0x46	; 70
    2db0:	f0 e0       	ldi	r31, 0x00	; 0
    2db2:	40 81       	ld	r20, Z
    2db4:	51 81       	ldd	r21, Z+1	; 0x01
    2db6:	80 91 30 01 	lds	r24, 0x0130
    2dba:	88 2f       	mov	r24, r24
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	9c 01       	movw	r18, r24
    2dc0:	22 0f       	add	r18, r18
    2dc2:	33 1f       	adc	r19, r19
    2dc4:	c9 01       	movw	r24, r18
    2dc6:	88 0f       	add	r24, r24
    2dc8:	99 1f       	adc	r25, r25
    2dca:	88 0f       	add	r24, r24
    2dcc:	99 1f       	adc	r25, r25
    2dce:	88 0f       	add	r24, r24
    2dd0:	99 1f       	adc	r25, r25
    2dd2:	82 0f       	add	r24, r18
    2dd4:	93 1f       	adc	r25, r19
    2dd6:	84 0f       	add	r24, r20
    2dd8:	95 1f       	adc	r25, r21
    2dda:	cc 01       	movw	r24, r24
    2ddc:	a0 e0       	ldi	r26, 0x00	; 0
    2dde:	b0 e0       	ldi	r27, 0x00	; 0
    2de0:	80 93 34 01 	sts	0x0134, r24
    2de4:	90 93 35 01 	sts	0x0135, r25
    2de8:	a0 93 36 01 	sts	0x0136, r26
    2dec:	b0 93 37 01 	sts	0x0137, r27
		
		/*Select Sense Control(ICES) :Rising_Edge */
		SET_BIT(TCCR1B,6); 
    2df0:	ae e4       	ldi	r26, 0x4E	; 78
    2df2:	b0 e0       	ldi	r27, 0x00	; 0
    2df4:	ee e4       	ldi	r30, 0x4E	; 78
    2df6:	f0 e0       	ldi	r31, 0x00	; 0
    2df8:	80 81       	ld	r24, Z
    2dfa:	80 64       	ori	r24, 0x40	; 64
    2dfc:	8c 93       	st	X, r24
		
		Flag=2;
    2dfe:	82 e0       	ldi	r24, 0x02	; 2
    2e00:	80 93 31 01 	sts	0x0131, r24
    2e04:	28 c0       	rjmp	.+80     	; 0x2e56 <__vector_6+0x108>
		
		
	}
	
	else if(Flag==2)
    2e06:	80 91 31 01 	lds	r24, 0x0131
    2e0a:	82 30       	cpi	r24, 0x02	; 2
    2e0c:	21 f5       	brne	.+72     	; 0x2e56 <__vector_6+0x108>
	{
		/*Capture 3rd Change*/
		Snap3=ICR1+(OV_Count1*(2^16));
    2e0e:	e6 e4       	ldi	r30, 0x46	; 70
    2e10:	f0 e0       	ldi	r31, 0x00	; 0
    2e12:	40 81       	ld	r20, Z
    2e14:	51 81       	ldd	r21, Z+1	; 0x01
    2e16:	80 91 30 01 	lds	r24, 0x0130
    2e1a:	88 2f       	mov	r24, r24
    2e1c:	90 e0       	ldi	r25, 0x00	; 0
    2e1e:	9c 01       	movw	r18, r24
    2e20:	22 0f       	add	r18, r18
    2e22:	33 1f       	adc	r19, r19
    2e24:	c9 01       	movw	r24, r18
    2e26:	88 0f       	add	r24, r24
    2e28:	99 1f       	adc	r25, r25
    2e2a:	88 0f       	add	r24, r24
    2e2c:	99 1f       	adc	r25, r25
    2e2e:	88 0f       	add	r24, r24
    2e30:	99 1f       	adc	r25, r25
    2e32:	82 0f       	add	r24, r18
    2e34:	93 1f       	adc	r25, r19
    2e36:	84 0f       	add	r24, r20
    2e38:	95 1f       	adc	r25, r21
    2e3a:	cc 01       	movw	r24, r24
    2e3c:	a0 e0       	ldi	r26, 0x00	; 0
    2e3e:	b0 e0       	ldi	r27, 0x00	; 0
    2e40:	80 93 38 01 	sts	0x0138, r24
    2e44:	90 93 39 01 	sts	0x0139, r25
    2e48:	a0 93 3a 01 	sts	0x013A, r26
    2e4c:	b0 93 3b 01 	sts	0x013B, r27
		
		Flag=3;
    2e50:	83 e0       	ldi	r24, 0x03	; 3
    2e52:	80 93 31 01 	sts	0x0131, r24
	}
}
    2e56:	cf 91       	pop	r28
    2e58:	df 91       	pop	r29
    2e5a:	ff 91       	pop	r31
    2e5c:	ef 91       	pop	r30
    2e5e:	bf 91       	pop	r27
    2e60:	af 91       	pop	r26
    2e62:	9f 91       	pop	r25
    2e64:	8f 91       	pop	r24
    2e66:	5f 91       	pop	r21
    2e68:	4f 91       	pop	r20
    2e6a:	3f 91       	pop	r19
    2e6c:	2f 91       	pop	r18
    2e6e:	0f 90       	pop	r0
    2e70:	0f be       	out	0x3f, r0	; 63
    2e72:	0f 90       	pop	r0
    2e74:	1f 90       	pop	r1
    2e76:	18 95       	reti

00002e78 <URT_Init>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "MURT_Private.h"

void URT_Init(void)
{
    2e78:	df 93       	push	r29
    2e7a:	cf 93       	push	r28
    2e7c:	cd b7       	in	r28, 0x3d	; 61
    2e7e:	de b7       	in	r29, 0x3e	; 62
	static u8 LOC_UBRR_Help=0;
	/*Select Register */
	SET_BIT(LOC_UBRR_Help,7);
    2e80:	80 91 3e 01 	lds	r24, 0x013E
    2e84:	80 68       	ori	r24, 0x80	; 128
    2e86:	80 93 3e 01 	sts	0x013E, r24
	
	/*Enable Recevier*/
	SET_BIT(UCSRB,4);
    2e8a:	aa e2       	ldi	r26, 0x2A	; 42
    2e8c:	b0 e0       	ldi	r27, 0x00	; 0
    2e8e:	ea e2       	ldi	r30, 0x2A	; 42
    2e90:	f0 e0       	ldi	r31, 0x00	; 0
    2e92:	80 81       	ld	r24, Z
    2e94:	80 61       	ori	r24, 0x10	; 16
    2e96:	8c 93       	st	X, r24
	
	/*Enable Transmitter*/
	SET_BIT(UCSRB,3);
    2e98:	aa e2       	ldi	r26, 0x2A	; 42
    2e9a:	b0 e0       	ldi	r27, 0x00	; 0
    2e9c:	ea e2       	ldi	r30, 0x2A	; 42
    2e9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ea0:	80 81       	ld	r24, Z
    2ea2:	88 60       	ori	r24, 0x08	; 8
    2ea4:	8c 93       	st	X, r24
	
	/*Select Mode (A Synch)*/
	CLR_BIT(LOC_UBRR_Help,6);
    2ea6:	80 91 3e 01 	lds	r24, 0x013E
    2eaa:	8f 7b       	andi	r24, 0xBF	; 191
    2eac:	80 93 3e 01 	sts	0x013E, r24
	
	/*Select Parity Mode(Disable)*/
	CLR_BIT(LOC_UBRR_Help,5);
    2eb0:	80 91 3e 01 	lds	r24, 0x013E
    2eb4:	8f 7d       	andi	r24, 0xDF	; 223
    2eb6:	80 93 3e 01 	sts	0x013E, r24
	CLR_BIT(LOC_UBRR_Help,4);
    2eba:	80 91 3e 01 	lds	r24, 0x013E
    2ebe:	8f 7e       	andi	r24, 0xEF	; 239
    2ec0:	80 93 3e 01 	sts	0x013E, r24
	
	/*Stop Bit Select (1 Bit)*/
	CLR_BIT(LOC_UBRR_Help,3);
    2ec4:	80 91 3e 01 	lds	r24, 0x013E
    2ec8:	87 7f       	andi	r24, 0xF7	; 247
    2eca:	80 93 3e 01 	sts	0x013E, r24
	
	/*Select Character Size (8 Bit)*/
	CLR_BIT(UCSRB,2);
    2ece:	aa e2       	ldi	r26, 0x2A	; 42
    2ed0:	b0 e0       	ldi	r27, 0x00	; 0
    2ed2:	ea e2       	ldi	r30, 0x2A	; 42
    2ed4:	f0 e0       	ldi	r31, 0x00	; 0
    2ed6:	80 81       	ld	r24, Z
    2ed8:	8b 7f       	andi	r24, 0xFB	; 251
    2eda:	8c 93       	st	X, r24
	SET_BIT(LOC_UBRR_Help,2);
    2edc:	80 91 3e 01 	lds	r24, 0x013E
    2ee0:	84 60       	ori	r24, 0x04	; 4
    2ee2:	80 93 3e 01 	sts	0x013E, r24
	SET_BIT(LOC_UBRR_Help,1);
    2ee6:	80 91 3e 01 	lds	r24, 0x013E
    2eea:	82 60       	ori	r24, 0x02	; 2
    2eec:	80 93 3e 01 	sts	0x013E, r24
	
	/*Select BAUD Rate*/
	UBRR=51;
    2ef0:	e9 e2       	ldi	r30, 0x29	; 41
    2ef2:	f0 e0       	ldi	r31, 0x00	; 0
    2ef4:	83 e3       	ldi	r24, 0x33	; 51
    2ef6:	80 83       	st	Z, r24
	
	UCSRC=LOC_UBRR_Help;
    2ef8:	e0 e4       	ldi	r30, 0x40	; 64
    2efa:	f0 e0       	ldi	r31, 0x00	; 0
    2efc:	80 91 3e 01 	lds	r24, 0x013E
    2f00:	80 83       	st	Z, r24
	
	
}
    2f02:	cf 91       	pop	r28
    2f04:	df 91       	pop	r29
    2f06:	08 95       	ret

00002f08 <URT_Transmitte>:

void URT_Transmitte(u8 Copy_U8Data)
{
    2f08:	df 93       	push	r29
    2f0a:	cf 93       	push	r28
    2f0c:	0f 92       	push	r0
    2f0e:	cd b7       	in	r28, 0x3d	; 61
    2f10:	de b7       	in	r29, 0x3e	; 62
    2f12:	89 83       	std	Y+1, r24	; 0x01
		UDR=Copy_U8Data;
    2f14:	ec e2       	ldi	r30, 0x2C	; 44
    2f16:	f0 e0       	ldi	r31, 0x00	; 0
    2f18:	89 81       	ldd	r24, Y+1	; 0x01
    2f1a:	80 83       	st	Z, r24
	while(GET_BIT(UCSRA,5)==0);
    2f1c:	eb e2       	ldi	r30, 0x2B	; 43
    2f1e:	f0 e0       	ldi	r31, 0x00	; 0
    2f20:	80 81       	ld	r24, Z
    2f22:	82 95       	swap	r24
    2f24:	86 95       	lsr	r24
    2f26:	87 70       	andi	r24, 0x07	; 7
    2f28:	88 2f       	mov	r24, r24
    2f2a:	90 e0       	ldi	r25, 0x00	; 0
    2f2c:	81 70       	andi	r24, 0x01	; 1
    2f2e:	90 70       	andi	r25, 0x00	; 0
    2f30:	00 97       	sbiw	r24, 0x00	; 0
    2f32:	a1 f3       	breq	.-24     	; 0x2f1c <URT_Transmitte+0x14>

	
}
    2f34:	0f 90       	pop	r0
    2f36:	cf 91       	pop	r28
    2f38:	df 91       	pop	r29
    2f3a:	08 95       	ret

00002f3c <URT_Recevier>:

u8 URT_Recevier(void)
{
    2f3c:	df 93       	push	r29
    2f3e:	cf 93       	push	r28
    2f40:	cd b7       	in	r28, 0x3d	; 61
    2f42:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(UCSRA,7)==0);
    2f44:	eb e2       	ldi	r30, 0x2B	; 43
    2f46:	f0 e0       	ldi	r31, 0x00	; 0
    2f48:	80 81       	ld	r24, Z
    2f4a:	88 23       	and	r24, r24
    2f4c:	dc f7       	brge	.-10     	; 0x2f44 <URT_Recevier+0x8>
	return UDR;
    2f4e:	ec e2       	ldi	r30, 0x2C	; 44
    2f50:	f0 e0       	ldi	r31, 0x00	; 0
    2f52:	80 81       	ld	r24, Z
	
}
    2f54:	cf 91       	pop	r28
    2f56:	df 91       	pop	r29
    2f58:	08 95       	ret

00002f5a <URT_SendString>:

void URT_SendString(u8* Coby_U8String)
{
    2f5a:	df 93       	push	r29
    2f5c:	cf 93       	push	r28
    2f5e:	00 d0       	rcall	.+0      	; 0x2f60 <URT_SendString+0x6>
    2f60:	0f 92       	push	r0
    2f62:	cd b7       	in	r28, 0x3d	; 61
    2f64:	de b7       	in	r29, 0x3e	; 62
    2f66:	9b 83       	std	Y+3, r25	; 0x03
    2f68:	8a 83       	std	Y+2, r24	; 0x02

	/*Lentgh Of String*/
		u8 LOC_LEGNTH = 0;
    2f6a:	19 82       	std	Y+1, r1	; 0x01


		/*Do Until String End*/
		for(LOC_LEGNTH=0;Coby_U8String[LOC_LEGNTH];LOC_LEGNTH++)
    2f6c:	19 82       	std	Y+1, r1	; 0x01
    2f6e:	0e c0       	rjmp	.+28     	; 0x2f8c <URT_SendString+0x32>
		{


			/*Send Character as String*/
			URT_Transmitte(Coby_U8String[LOC_LEGNTH]);
    2f70:	89 81       	ldd	r24, Y+1	; 0x01
    2f72:	28 2f       	mov	r18, r24
    2f74:	30 e0       	ldi	r19, 0x00	; 0
    2f76:	8a 81       	ldd	r24, Y+2	; 0x02
    2f78:	9b 81       	ldd	r25, Y+3	; 0x03
    2f7a:	fc 01       	movw	r30, r24
    2f7c:	e2 0f       	add	r30, r18
    2f7e:	f3 1f       	adc	r31, r19
    2f80:	80 81       	ld	r24, Z
    2f82:	0e 94 84 17 	call	0x2f08	; 0x2f08 <URT_Transmitte>
	/*Lentgh Of String*/
		u8 LOC_LEGNTH = 0;


		/*Do Until String End*/
		for(LOC_LEGNTH=0;Coby_U8String[LOC_LEGNTH];LOC_LEGNTH++)
    2f86:	89 81       	ldd	r24, Y+1	; 0x01
    2f88:	8f 5f       	subi	r24, 0xFF	; 255
    2f8a:	89 83       	std	Y+1, r24	; 0x01
    2f8c:	89 81       	ldd	r24, Y+1	; 0x01
    2f8e:	28 2f       	mov	r18, r24
    2f90:	30 e0       	ldi	r19, 0x00	; 0
    2f92:	8a 81       	ldd	r24, Y+2	; 0x02
    2f94:	9b 81       	ldd	r25, Y+3	; 0x03
    2f96:	fc 01       	movw	r30, r24
    2f98:	e2 0f       	add	r30, r18
    2f9a:	f3 1f       	adc	r31, r19
    2f9c:	80 81       	ld	r24, Z
    2f9e:	88 23       	and	r24, r24
    2fa0:	39 f7       	brne	.-50     	; 0x2f70 <URT_SendString+0x16>
			URT_Transmitte(Coby_U8String[LOC_LEGNTH]);

			/*Increment Length*/

		}
}
    2fa2:	0f 90       	pop	r0
    2fa4:	0f 90       	pop	r0
    2fa6:	0f 90       	pop	r0
    2fa8:	cf 91       	pop	r28
    2faa:	df 91       	pop	r29
    2fac:	08 95       	ret

00002fae <main>:
u8 Login_Trial=False;
u8 Door_State=Closed;
u8 Login_state=OUT;
u8 Data=0;
int main(void)
{
    2fae:	2f 92       	push	r2
    2fb0:	3f 92       	push	r3
    2fb2:	0f 93       	push	r16
    2fb4:	1f 93       	push	r17
    2fb6:	df 93       	push	r29
    2fb8:	cf 93       	push	r28
    2fba:	cd b7       	in	r28, 0x3d	; 61
    2fbc:	de b7       	in	r29, 0x3e	; 62
    2fbe:	c8 5a       	subi	r28, 0xA8	; 168
    2fc0:	d0 40       	sbci	r29, 0x00	; 0
    2fc2:	0f b6       	in	r0, 0x3f	; 63
    2fc4:	f8 94       	cli
    2fc6:	de bf       	out	0x3e, r29	; 62
    2fc8:	0f be       	out	0x3f, r0	; 63
    2fca:	cd bf       	out	0x3d, r28	; 61
    2fcc:	0c 94 59 1f 	jmp	0x3eb2	; 0x3eb2 <main+0xf04>
	while(1)
	{
		/*Login */
	while(!Login_Trial)
	{
MDIO_VoidSetPinDirection(PORTA,PIN7,OUTPUT);
    2fd0:	80 e0       	ldi	r24, 0x00	; 0
    2fd2:	67 e0       	ldi	r22, 0x07	; 7
    2fd4:	41 e0       	ldi	r20, 0x01	; 1
    2fd6:	0e 94 98 10 	call	0x2130	; 0x2130 <MDIO_VoidSetPinDirection>
MDIO_VoidSetPinValue(PORTA,PIN7,HIGH);
    2fda:	80 e0       	ldi	r24, 0x00	; 0
    2fdc:	67 e0       	ldi	r22, 0x07	; 7
    2fde:	41 e0       	ldi	r20, 0x01	; 1
    2fe0:	0e 94 11 12 	call	0x2422	; 0x2422 <MDIO_VoidSetPinValue>

/*Password & ID */
	u8 *IDTrue[3]={0};
    2fe4:	ce 01       	movw	r24, r28
    2fe6:	81 57       	subi	r24, 0x71	; 113
    2fe8:	9f 4f       	sbci	r25, 0xFF	; 255
    2fea:	26 e0       	ldi	r18, 0x06	; 6
    2fec:	fc 01       	movw	r30, r24
    2fee:	df 01       	movw	r26, r30
    2ff0:	82 2f       	mov	r24, r18
    2ff2:	1d 92       	st	X+, r1
    2ff4:	8a 95       	dec	r24
    2ff6:	e9 f7       	brne	.-6      	; 0x2ff2 <main+0x44>
	u8 *PassTrue[3]={0};
    2ff8:	ce 01       	movw	r24, r28
    2ffa:	81 57       	subi	r24, 0x71	; 113
    2ffc:	9f 4f       	sbci	r25, 0xFF	; 255
    2ffe:	26 e0       	ldi	r18, 0x06	; 6
    3000:	fc 01       	movw	r30, r24
    3002:	37 96       	adiw	r30, 0x07	; 7
    3004:	df 01       	movw	r26, r30
    3006:	82 2f       	mov	r24, r18
    3008:	1d 92       	st	X+, r1
    300a:	8a 95       	dec	r24
    300c:	e9 f7       	brne	.-6      	; 0x3008 <main+0x5a>
/*Initialize Peripherals*/
ADC_Init();
    300e:	0e 94 1c 10 	call	0x2038	; 0x2038 <ADC_Init>
URT_Init();
    3012:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <URT_Init>
HLCD_VoidInit();
    3016:	0e 94 5d 09 	call	0x12ba	; 0x12ba <HLCD_VoidInit>
/*TIM0 Init*/
TIM0_Init();
    301a:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <TIM0_Init>
u8 ID=0;
    301e:	fe 01       	movw	r30, r28
    3020:	e1 57       	subi	r30, 0x71	; 113
    3022:	ff 4f       	sbci	r31, 0xFF	; 255
    3024:	16 82       	std	Z+6, r1	; 0x06
u8 Pass=0;
    3026:	fe 01       	movw	r30, r28
    3028:	e1 57       	subi	r30, 0x71	; 113
    302a:	ff 4f       	sbci	r31, 0xFF	; 255
    302c:	15 86       	std	Z+13, r1	; 0x0d
        /*Store ID In Array*/
        IDTrue[i]=ID;
	}
}
/*Go To ID Check Function*/
ID_CHECK();
    302e:	ce 01       	movw	r24, r28
    3030:	81 57       	subi	r24, 0x71	; 113
    3032:	9f 4f       	sbci	r25, 0xFF	; 255
    3034:	1c 01       	movw	r2, r24
    3036:	0e 94 32 21 	call	0x4264	; 0x4264 <ID_CHECK.1351>
u8 y=0;
    303a:	fe 01       	movw	r30, r28
    303c:	e2 57       	subi	r30, 0x72	; 114
    303e:	ff 4f       	sbci	r31, 0xFF	; 255
    3040:	10 82       	st	Z, r1
u8 Pas=0;
    3042:	fe 01       	movw	r30, r28
    3044:	e3 57       	subi	r30, 0x73	; 115
    3046:	ff 4f       	sbci	r31, 0xFF	; 255
    3048:	10 82       	st	Z, r1
for(y=0;y<3;y++)
    304a:	fe 01       	movw	r30, r28
    304c:	e2 57       	subi	r30, 0x72	; 114
    304e:	ff 4f       	sbci	r31, 0xFF	; 255
    3050:	10 82       	st	Z, r1
    3052:	28 c7       	rjmp	.+3664   	; 0x3ea4 <main+0xef6>
{
		/*If Correct ID*/
	if(IDTrue[0]=='A'&&IDTrue[1]=='b'&&IDTrue[2]=='d'&&IDTrue[3]=='o')
    3054:	fe 01       	movw	r30, r28
    3056:	e1 57       	subi	r30, 0x71	; 113
    3058:	ff 4f       	sbci	r31, 0xFF	; 255
    305a:	80 81       	ld	r24, Z
    305c:	91 81       	ldd	r25, Z+1	; 0x01
    305e:	81 34       	cpi	r24, 0x41	; 65
    3060:	91 05       	cpc	r25, r1
    3062:	09 f0       	breq	.+2      	; 0x3066 <main+0xb8>
    3064:	0b c2       	rjmp	.+1046   	; 0x347c <main+0x4ce>
    3066:	fe 01       	movw	r30, r28
    3068:	e1 57       	subi	r30, 0x71	; 113
    306a:	ff 4f       	sbci	r31, 0xFF	; 255
    306c:	82 81       	ldd	r24, Z+2	; 0x02
    306e:	93 81       	ldd	r25, Z+3	; 0x03
    3070:	82 36       	cpi	r24, 0x62	; 98
    3072:	91 05       	cpc	r25, r1
    3074:	09 f0       	breq	.+2      	; 0x3078 <main+0xca>
    3076:	02 c2       	rjmp	.+1028   	; 0x347c <main+0x4ce>
    3078:	fe 01       	movw	r30, r28
    307a:	e1 57       	subi	r30, 0x71	; 113
    307c:	ff 4f       	sbci	r31, 0xFF	; 255
    307e:	84 81       	ldd	r24, Z+4	; 0x04
    3080:	95 81       	ldd	r25, Z+5	; 0x05
    3082:	84 36       	cpi	r24, 0x64	; 100
    3084:	91 05       	cpc	r25, r1
    3086:	09 f0       	breq	.+2      	; 0x308a <main+0xdc>
    3088:	f9 c1       	rjmp	.+1010   	; 0x347c <main+0x4ce>
    308a:	fe 01       	movw	r30, r28
    308c:	e1 57       	subi	r30, 0x71	; 113
    308e:	ff 4f       	sbci	r31, 0xFF	; 255
    3090:	86 81       	ldd	r24, Z+6	; 0x06
    3092:	97 81       	ldd	r25, Z+7	; 0x07
    3094:	8f 36       	cpi	r24, 0x6F	; 111
    3096:	91 05       	cpc	r25, r1
    3098:	09 f0       	breq	.+2      	; 0x309c <main+0xee>
    309a:	f0 c1       	rjmp	.+992    	; 0x347c <main+0x4ce>
	{
		y=4; //For Exit For Loop
    309c:	fe 01       	movw	r30, r28
    309e:	e2 57       	subi	r30, 0x72	; 114
    30a0:	ff 4f       	sbci	r31, 0xFF	; 255
    30a2:	84 e0       	ldi	r24, 0x04	; 4
    30a4:	80 83       	st	Z, r24
		HLCD_VoidSendCommand(0x01);
    30a6:	81 e0       	ldi	r24, 0x01	; 1
    30a8:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
		HLCD_VoidSetPostion(0,0);
    30ac:	80 e0       	ldi	r24, 0x00	; 0
    30ae:	60 e0       	ldi	r22, 0x00	; 0
    30b0:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <HLCD_VoidSetPostion>
		/*Go To Pass Check Function*/
		Pass_Check();
    30b4:	ce 01       	movw	r24, r28
    30b6:	81 57       	subi	r24, 0x71	; 113
    30b8:	9f 4f       	sbci	r25, 0xFF	; 255
    30ba:	1c 01       	movw	r2, r24
    30bc:	0e 94 83 21 	call	0x4306	; 0x4306 <Pass_Check.1344>

		for(Pas=0;Pas<3;Pas++)
    30c0:	fe 01       	movw	r30, r28
    30c2:	e3 57       	subi	r30, 0x73	; 115
    30c4:	ff 4f       	sbci	r31, 0xFF	; 255
    30c6:	10 82       	st	Z, r1
    30c8:	d1 c1       	rjmp	.+930    	; 0x346c <main+0x4be>
		{
				/*If Correct Password*/
			if(PassTrue[0]=='1'&&PassTrue[1]=='0'&&PassTrue[2]=='0'&&PassTrue[3]=='0')
    30ca:	fe 01       	movw	r30, r28
    30cc:	e1 57       	subi	r30, 0x71	; 113
    30ce:	ff 4f       	sbci	r31, 0xFF	; 255
    30d0:	87 81       	ldd	r24, Z+7	; 0x07
    30d2:	90 85       	ldd	r25, Z+8	; 0x08
    30d4:	81 33       	cpi	r24, 0x31	; 49
    30d6:	91 05       	cpc	r25, r1
    30d8:	79 f5       	brne	.+94     	; 0x3138 <main+0x18a>
    30da:	fe 01       	movw	r30, r28
    30dc:	e1 57       	subi	r30, 0x71	; 113
    30de:	ff 4f       	sbci	r31, 0xFF	; 255
    30e0:	81 85       	ldd	r24, Z+9	; 0x09
    30e2:	92 85       	ldd	r25, Z+10	; 0x0a
    30e4:	80 33       	cpi	r24, 0x30	; 48
    30e6:	91 05       	cpc	r25, r1
    30e8:	39 f5       	brne	.+78     	; 0x3138 <main+0x18a>
    30ea:	fe 01       	movw	r30, r28
    30ec:	e1 57       	subi	r30, 0x71	; 113
    30ee:	ff 4f       	sbci	r31, 0xFF	; 255
    30f0:	83 85       	ldd	r24, Z+11	; 0x0b
    30f2:	94 85       	ldd	r25, Z+12	; 0x0c
    30f4:	80 33       	cpi	r24, 0x30	; 48
    30f6:	91 05       	cpc	r25, r1
    30f8:	f9 f4       	brne	.+62     	; 0x3138 <main+0x18a>
    30fa:	fe 01       	movw	r30, r28
    30fc:	e1 57       	subi	r30, 0x71	; 113
    30fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3100:	85 85       	ldd	r24, Z+13	; 0x0d
    3102:	96 85       	ldd	r25, Z+14	; 0x0e
    3104:	80 33       	cpi	r24, 0x30	; 48
    3106:	91 05       	cpc	r25, r1
    3108:	b9 f4       	brne	.+46     	; 0x3138 <main+0x18a>
			{
				Login_Trial=True;
    310a:	81 e0       	ldi	r24, 0x01	; 1
    310c:	80 93 3f 01 	sts	0x013F, r24
				Pas=4; //For Exit For Loop
    3110:	fe 01       	movw	r30, r28
    3112:	e3 57       	subi	r30, 0x73	; 115
    3114:	ff 4f       	sbci	r31, 0xFF	; 255
    3116:	84 e0       	ldi	r24, 0x04	; 4
    3118:	80 83       	st	Z, r24
				HLCD_VoidSendCommand(0x01);
    311a:	81 e0       	ldi	r24, 0x01	; 1
    311c:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
				HLCD_VoidSetPostion(0,4);
    3120:	80 e0       	ldi	r24, 0x00	; 0
    3122:	64 e0       	ldi	r22, 0x04	; 4
    3124:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <HLCD_VoidSetPostion>
				HLCD_VoidSendString("Hello Abdo");
    3128:	80 e6       	ldi	r24, 0x60	; 96
    312a:	90 e0       	ldi	r25, 0x00	; 0
    312c:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <HLCD_VoidSendString>
				Login_state=IN;
    3130:	81 e0       	ldi	r24, 0x01	; 1
    3132:	80 93 41 01 	sts	0x0141, r24
    3136:	91 c1       	rjmp	.+802    	; 0x345a <main+0x4ac>
			}

				/*If Incorrect Password*/
				else if(Pas<3)
    3138:	fe 01       	movw	r30, r28
    313a:	e3 57       	subi	r30, 0x73	; 115
    313c:	ff 4f       	sbci	r31, 0xFF	; 255
    313e:	80 81       	ld	r24, Z
    3140:	83 30       	cpi	r24, 0x03	; 3
    3142:	08 f0       	brcs	.+2      	; 0x3146 <main+0x198>
    3144:	c1 c0       	rjmp	.+386    	; 0x32c8 <main+0x31a>
				{
					HLCD_VoidSendCommand(0x01);
    3146:	81 e0       	ldi	r24, 0x01	; 1
    3148:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
					HLCD_VoidSendString("Wrong Pass Try Again");
    314c:	8b e6       	ldi	r24, 0x6B	; 107
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <HLCD_VoidSendString>
    3154:	fe 01       	movw	r30, r28
    3156:	e7 57       	subi	r30, 0x77	; 119
    3158:	ff 4f       	sbci	r31, 0xFF	; 255
    315a:	80 e0       	ldi	r24, 0x00	; 0
    315c:	90 e0       	ldi	r25, 0x00	; 0
    315e:	aa e7       	ldi	r26, 0x7A	; 122
    3160:	b4 e4       	ldi	r27, 0x44	; 68
    3162:	80 83       	st	Z, r24
    3164:	91 83       	std	Z+1, r25	; 0x01
    3166:	a2 83       	std	Z+2, r26	; 0x02
    3168:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    316a:	8e 01       	movw	r16, r28
    316c:	0b 57       	subi	r16, 0x7B	; 123
    316e:	1f 4f       	sbci	r17, 0xFF	; 255
    3170:	fe 01       	movw	r30, r28
    3172:	e7 57       	subi	r30, 0x77	; 119
    3174:	ff 4f       	sbci	r31, 0xFF	; 255
    3176:	60 81       	ld	r22, Z
    3178:	71 81       	ldd	r23, Z+1	; 0x01
    317a:	82 81       	ldd	r24, Z+2	; 0x02
    317c:	93 81       	ldd	r25, Z+3	; 0x03
    317e:	20 e0       	ldi	r18, 0x00	; 0
    3180:	30 e0       	ldi	r19, 0x00	; 0
    3182:	4a ef       	ldi	r20, 0xFA	; 250
    3184:	54 e4       	ldi	r21, 0x44	; 68
    3186:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    318a:	dc 01       	movw	r26, r24
    318c:	cb 01       	movw	r24, r22
    318e:	f8 01       	movw	r30, r16
    3190:	80 83       	st	Z, r24
    3192:	91 83       	std	Z+1, r25	; 0x01
    3194:	a2 83       	std	Z+2, r26	; 0x02
    3196:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3198:	fe 01       	movw	r30, r28
    319a:	eb 57       	subi	r30, 0x7B	; 123
    319c:	ff 4f       	sbci	r31, 0xFF	; 255
    319e:	60 81       	ld	r22, Z
    31a0:	71 81       	ldd	r23, Z+1	; 0x01
    31a2:	82 81       	ldd	r24, Z+2	; 0x02
    31a4:	93 81       	ldd	r25, Z+3	; 0x03
    31a6:	20 e0       	ldi	r18, 0x00	; 0
    31a8:	30 e0       	ldi	r19, 0x00	; 0
    31aa:	40 e8       	ldi	r20, 0x80	; 128
    31ac:	5f e3       	ldi	r21, 0x3F	; 63
    31ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31b2:	88 23       	and	r24, r24
    31b4:	44 f4       	brge	.+16     	; 0x31c6 <main+0x218>
		__ticks = 1;
    31b6:	fe 01       	movw	r30, r28
    31b8:	ed 57       	subi	r30, 0x7D	; 125
    31ba:	ff 4f       	sbci	r31, 0xFF	; 255
    31bc:	81 e0       	ldi	r24, 0x01	; 1
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	91 83       	std	Z+1, r25	; 0x01
    31c2:	80 83       	st	Z, r24
    31c4:	64 c0       	rjmp	.+200    	; 0x328e <main+0x2e0>
	else if (__tmp > 65535)
    31c6:	fe 01       	movw	r30, r28
    31c8:	eb 57       	subi	r30, 0x7B	; 123
    31ca:	ff 4f       	sbci	r31, 0xFF	; 255
    31cc:	60 81       	ld	r22, Z
    31ce:	71 81       	ldd	r23, Z+1	; 0x01
    31d0:	82 81       	ldd	r24, Z+2	; 0x02
    31d2:	93 81       	ldd	r25, Z+3	; 0x03
    31d4:	20 e0       	ldi	r18, 0x00	; 0
    31d6:	3f ef       	ldi	r19, 0xFF	; 255
    31d8:	4f e7       	ldi	r20, 0x7F	; 127
    31da:	57 e4       	ldi	r21, 0x47	; 71
    31dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31e0:	18 16       	cp	r1, r24
    31e2:	0c f0       	brlt	.+2      	; 0x31e6 <main+0x238>
    31e4:	43 c0       	rjmp	.+134    	; 0x326c <main+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31e6:	fe 01       	movw	r30, r28
    31e8:	e7 57       	subi	r30, 0x77	; 119
    31ea:	ff 4f       	sbci	r31, 0xFF	; 255
    31ec:	60 81       	ld	r22, Z
    31ee:	71 81       	ldd	r23, Z+1	; 0x01
    31f0:	82 81       	ldd	r24, Z+2	; 0x02
    31f2:	93 81       	ldd	r25, Z+3	; 0x03
    31f4:	20 e0       	ldi	r18, 0x00	; 0
    31f6:	30 e0       	ldi	r19, 0x00	; 0
    31f8:	40 e2       	ldi	r20, 0x20	; 32
    31fa:	51 e4       	ldi	r21, 0x41	; 65
    31fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3200:	dc 01       	movw	r26, r24
    3202:	cb 01       	movw	r24, r22
    3204:	8e 01       	movw	r16, r28
    3206:	0d 57       	subi	r16, 0x7D	; 125
    3208:	1f 4f       	sbci	r17, 0xFF	; 255
    320a:	bc 01       	movw	r22, r24
    320c:	cd 01       	movw	r24, r26
    320e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3212:	dc 01       	movw	r26, r24
    3214:	cb 01       	movw	r24, r22
    3216:	f8 01       	movw	r30, r16
    3218:	91 83       	std	Z+1, r25	; 0x01
    321a:	80 83       	st	Z, r24
    321c:	1f c0       	rjmp	.+62     	; 0x325c <main+0x2ae>
    321e:	fe 01       	movw	r30, r28
    3220:	ef 57       	subi	r30, 0x7F	; 127
    3222:	ff 4f       	sbci	r31, 0xFF	; 255
    3224:	88 ec       	ldi	r24, 0xC8	; 200
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	91 83       	std	Z+1, r25	; 0x01
    322a:	80 83       	st	Z, r24
    322c:	fe 01       	movw	r30, r28
    322e:	ef 57       	subi	r30, 0x7F	; 127
    3230:	ff 4f       	sbci	r31, 0xFF	; 255
    3232:	80 81       	ld	r24, Z
    3234:	91 81       	ldd	r25, Z+1	; 0x01
    3236:	01 97       	sbiw	r24, 0x01	; 1
    3238:	f1 f7       	brne	.-4      	; 0x3236 <main+0x288>
    323a:	fe 01       	movw	r30, r28
    323c:	ef 57       	subi	r30, 0x7F	; 127
    323e:	ff 4f       	sbci	r31, 0xFF	; 255
    3240:	91 83       	std	Z+1, r25	; 0x01
    3242:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3244:	de 01       	movw	r26, r28
    3246:	ad 57       	subi	r26, 0x7D	; 125
    3248:	bf 4f       	sbci	r27, 0xFF	; 255
    324a:	fe 01       	movw	r30, r28
    324c:	ed 57       	subi	r30, 0x7D	; 125
    324e:	ff 4f       	sbci	r31, 0xFF	; 255
    3250:	80 81       	ld	r24, Z
    3252:	91 81       	ldd	r25, Z+1	; 0x01
    3254:	01 97       	sbiw	r24, 0x01	; 1
    3256:	11 96       	adiw	r26, 0x01	; 1
    3258:	9c 93       	st	X, r25
    325a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    325c:	fe 01       	movw	r30, r28
    325e:	ed 57       	subi	r30, 0x7D	; 125
    3260:	ff 4f       	sbci	r31, 0xFF	; 255
    3262:	80 81       	ld	r24, Z
    3264:	91 81       	ldd	r25, Z+1	; 0x01
    3266:	00 97       	sbiw	r24, 0x00	; 0
    3268:	d1 f6       	brne	.-76     	; 0x321e <main+0x270>
    326a:	27 c0       	rjmp	.+78     	; 0x32ba <main+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    326c:	8e 01       	movw	r16, r28
    326e:	0d 57       	subi	r16, 0x7D	; 125
    3270:	1f 4f       	sbci	r17, 0xFF	; 255
    3272:	fe 01       	movw	r30, r28
    3274:	eb 57       	subi	r30, 0x7B	; 123
    3276:	ff 4f       	sbci	r31, 0xFF	; 255
    3278:	60 81       	ld	r22, Z
    327a:	71 81       	ldd	r23, Z+1	; 0x01
    327c:	82 81       	ldd	r24, Z+2	; 0x02
    327e:	93 81       	ldd	r25, Z+3	; 0x03
    3280:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3284:	dc 01       	movw	r26, r24
    3286:	cb 01       	movw	r24, r22
    3288:	f8 01       	movw	r30, r16
    328a:	91 83       	std	Z+1, r25	; 0x01
    328c:	80 83       	st	Z, r24
    328e:	de 01       	movw	r26, r28
    3290:	a1 58       	subi	r26, 0x81	; 129
    3292:	bf 4f       	sbci	r27, 0xFF	; 255
    3294:	fe 01       	movw	r30, r28
    3296:	ed 57       	subi	r30, 0x7D	; 125
    3298:	ff 4f       	sbci	r31, 0xFF	; 255
    329a:	80 81       	ld	r24, Z
    329c:	91 81       	ldd	r25, Z+1	; 0x01
    329e:	8d 93       	st	X+, r24
    32a0:	9c 93       	st	X, r25
    32a2:	fe 01       	movw	r30, r28
    32a4:	e1 58       	subi	r30, 0x81	; 129
    32a6:	ff 4f       	sbci	r31, 0xFF	; 255
    32a8:	80 81       	ld	r24, Z
    32aa:	91 81       	ldd	r25, Z+1	; 0x01
    32ac:	01 97       	sbiw	r24, 0x01	; 1
    32ae:	f1 f7       	brne	.-4      	; 0x32ac <main+0x2fe>
    32b0:	fe 01       	movw	r30, r28
    32b2:	e1 58       	subi	r30, 0x81	; 129
    32b4:	ff 4f       	sbci	r31, 0xFF	; 255
    32b6:	91 83       	std	Z+1, r25	; 0x01
    32b8:	80 83       	st	Z, r24
					_delay_ms(1000);
					/*Go To Pass Check Function*/
					Pass_Check();
    32ba:	ce 01       	movw	r24, r28
    32bc:	81 57       	subi	r24, 0x71	; 113
    32be:	9f 4f       	sbci	r25, 0xFF	; 255
    32c0:	1c 01       	movw	r2, r24
    32c2:	0e 94 83 21 	call	0x4306	; 0x4306 <Pass_Check.1344>
    32c6:	c9 c0       	rjmp	.+402    	; 0x345a <main+0x4ac>
				}
				/*If Incorrect Password*/
				else if(Pas==3)
    32c8:	fe 01       	movw	r30, r28
    32ca:	e3 57       	subi	r30, 0x73	; 115
    32cc:	ff 4f       	sbci	r31, 0xFF	; 255
    32ce:	80 81       	ld	r24, Z
    32d0:	83 30       	cpi	r24, 0x03	; 3
    32d2:	09 f0       	breq	.+2      	; 0x32d6 <main+0x328>
    32d4:	c2 c0       	rjmp	.+388    	; 0x345a <main+0x4ac>
				{
					HLCD_VoidSendCommand(0x01);
    32d6:	81 e0       	ldi	r24, 0x01	; 1
    32d8:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
					HLCD_VoidSendString("Wrong Pass ");
    32dc:	80 e8       	ldi	r24, 0x80	; 128
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <HLCD_VoidSendString>
    32e4:	fe 01       	movw	r30, r28
    32e6:	e5 58       	subi	r30, 0x85	; 133
    32e8:	ff 4f       	sbci	r31, 0xFF	; 255
    32ea:	80 e0       	ldi	r24, 0x00	; 0
    32ec:	90 e0       	ldi	r25, 0x00	; 0
    32ee:	aa e7       	ldi	r26, 0x7A	; 122
    32f0:	b4 e4       	ldi	r27, 0x44	; 68
    32f2:	80 83       	st	Z, r24
    32f4:	91 83       	std	Z+1, r25	; 0x01
    32f6:	a2 83       	std	Z+2, r26	; 0x02
    32f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32fa:	8e 01       	movw	r16, r28
    32fc:	09 58       	subi	r16, 0x89	; 137
    32fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3300:	fe 01       	movw	r30, r28
    3302:	e5 58       	subi	r30, 0x85	; 133
    3304:	ff 4f       	sbci	r31, 0xFF	; 255
    3306:	60 81       	ld	r22, Z
    3308:	71 81       	ldd	r23, Z+1	; 0x01
    330a:	82 81       	ldd	r24, Z+2	; 0x02
    330c:	93 81       	ldd	r25, Z+3	; 0x03
    330e:	20 e0       	ldi	r18, 0x00	; 0
    3310:	30 e0       	ldi	r19, 0x00	; 0
    3312:	4a ef       	ldi	r20, 0xFA	; 250
    3314:	54 e4       	ldi	r21, 0x44	; 68
    3316:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    331a:	dc 01       	movw	r26, r24
    331c:	cb 01       	movw	r24, r22
    331e:	f8 01       	movw	r30, r16
    3320:	80 83       	st	Z, r24
    3322:	91 83       	std	Z+1, r25	; 0x01
    3324:	a2 83       	std	Z+2, r26	; 0x02
    3326:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3328:	fe 01       	movw	r30, r28
    332a:	e9 58       	subi	r30, 0x89	; 137
    332c:	ff 4f       	sbci	r31, 0xFF	; 255
    332e:	60 81       	ld	r22, Z
    3330:	71 81       	ldd	r23, Z+1	; 0x01
    3332:	82 81       	ldd	r24, Z+2	; 0x02
    3334:	93 81       	ldd	r25, Z+3	; 0x03
    3336:	20 e0       	ldi	r18, 0x00	; 0
    3338:	30 e0       	ldi	r19, 0x00	; 0
    333a:	40 e8       	ldi	r20, 0x80	; 128
    333c:	5f e3       	ldi	r21, 0x3F	; 63
    333e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3342:	88 23       	and	r24, r24
    3344:	44 f4       	brge	.+16     	; 0x3356 <main+0x3a8>
		__ticks = 1;
    3346:	fe 01       	movw	r30, r28
    3348:	eb 58       	subi	r30, 0x8B	; 139
    334a:	ff 4f       	sbci	r31, 0xFF	; 255
    334c:	81 e0       	ldi	r24, 0x01	; 1
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	91 83       	std	Z+1, r25	; 0x01
    3352:	80 83       	st	Z, r24
    3354:	64 c0       	rjmp	.+200    	; 0x341e <main+0x470>
	else if (__tmp > 65535)
    3356:	fe 01       	movw	r30, r28
    3358:	e9 58       	subi	r30, 0x89	; 137
    335a:	ff 4f       	sbci	r31, 0xFF	; 255
    335c:	60 81       	ld	r22, Z
    335e:	71 81       	ldd	r23, Z+1	; 0x01
    3360:	82 81       	ldd	r24, Z+2	; 0x02
    3362:	93 81       	ldd	r25, Z+3	; 0x03
    3364:	20 e0       	ldi	r18, 0x00	; 0
    3366:	3f ef       	ldi	r19, 0xFF	; 255
    3368:	4f e7       	ldi	r20, 0x7F	; 127
    336a:	57 e4       	ldi	r21, 0x47	; 71
    336c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3370:	18 16       	cp	r1, r24
    3372:	0c f0       	brlt	.+2      	; 0x3376 <main+0x3c8>
    3374:	43 c0       	rjmp	.+134    	; 0x33fc <main+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3376:	fe 01       	movw	r30, r28
    3378:	e5 58       	subi	r30, 0x85	; 133
    337a:	ff 4f       	sbci	r31, 0xFF	; 255
    337c:	60 81       	ld	r22, Z
    337e:	71 81       	ldd	r23, Z+1	; 0x01
    3380:	82 81       	ldd	r24, Z+2	; 0x02
    3382:	93 81       	ldd	r25, Z+3	; 0x03
    3384:	20 e0       	ldi	r18, 0x00	; 0
    3386:	30 e0       	ldi	r19, 0x00	; 0
    3388:	40 e2       	ldi	r20, 0x20	; 32
    338a:	51 e4       	ldi	r21, 0x41	; 65
    338c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3390:	dc 01       	movw	r26, r24
    3392:	cb 01       	movw	r24, r22
    3394:	8e 01       	movw	r16, r28
    3396:	0b 58       	subi	r16, 0x8B	; 139
    3398:	1f 4f       	sbci	r17, 0xFF	; 255
    339a:	bc 01       	movw	r22, r24
    339c:	cd 01       	movw	r24, r26
    339e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33a2:	dc 01       	movw	r26, r24
    33a4:	cb 01       	movw	r24, r22
    33a6:	f8 01       	movw	r30, r16
    33a8:	91 83       	std	Z+1, r25	; 0x01
    33aa:	80 83       	st	Z, r24
    33ac:	1f c0       	rjmp	.+62     	; 0x33ec <main+0x43e>
    33ae:	fe 01       	movw	r30, r28
    33b0:	ed 58       	subi	r30, 0x8D	; 141
    33b2:	ff 4f       	sbci	r31, 0xFF	; 255
    33b4:	88 ec       	ldi	r24, 0xC8	; 200
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	91 83       	std	Z+1, r25	; 0x01
    33ba:	80 83       	st	Z, r24
    33bc:	fe 01       	movw	r30, r28
    33be:	ed 58       	subi	r30, 0x8D	; 141
    33c0:	ff 4f       	sbci	r31, 0xFF	; 255
    33c2:	80 81       	ld	r24, Z
    33c4:	91 81       	ldd	r25, Z+1	; 0x01
    33c6:	01 97       	sbiw	r24, 0x01	; 1
    33c8:	f1 f7       	brne	.-4      	; 0x33c6 <main+0x418>
    33ca:	fe 01       	movw	r30, r28
    33cc:	ed 58       	subi	r30, 0x8D	; 141
    33ce:	ff 4f       	sbci	r31, 0xFF	; 255
    33d0:	91 83       	std	Z+1, r25	; 0x01
    33d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33d4:	de 01       	movw	r26, r28
    33d6:	ab 58       	subi	r26, 0x8B	; 139
    33d8:	bf 4f       	sbci	r27, 0xFF	; 255
    33da:	fe 01       	movw	r30, r28
    33dc:	eb 58       	subi	r30, 0x8B	; 139
    33de:	ff 4f       	sbci	r31, 0xFF	; 255
    33e0:	80 81       	ld	r24, Z
    33e2:	91 81       	ldd	r25, Z+1	; 0x01
    33e4:	01 97       	sbiw	r24, 0x01	; 1
    33e6:	11 96       	adiw	r26, 0x01	; 1
    33e8:	9c 93       	st	X, r25
    33ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33ec:	fe 01       	movw	r30, r28
    33ee:	eb 58       	subi	r30, 0x8B	; 139
    33f0:	ff 4f       	sbci	r31, 0xFF	; 255
    33f2:	80 81       	ld	r24, Z
    33f4:	91 81       	ldd	r25, Z+1	; 0x01
    33f6:	00 97       	sbiw	r24, 0x00	; 0
    33f8:	d1 f6       	brne	.-76     	; 0x33ae <main+0x400>
    33fa:	27 c0       	rjmp	.+78     	; 0x344a <main+0x49c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33fc:	8e 01       	movw	r16, r28
    33fe:	0b 58       	subi	r16, 0x8B	; 139
    3400:	1f 4f       	sbci	r17, 0xFF	; 255
    3402:	fe 01       	movw	r30, r28
    3404:	e9 58       	subi	r30, 0x89	; 137
    3406:	ff 4f       	sbci	r31, 0xFF	; 255
    3408:	60 81       	ld	r22, Z
    340a:	71 81       	ldd	r23, Z+1	; 0x01
    340c:	82 81       	ldd	r24, Z+2	; 0x02
    340e:	93 81       	ldd	r25, Z+3	; 0x03
    3410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3414:	dc 01       	movw	r26, r24
    3416:	cb 01       	movw	r24, r22
    3418:	f8 01       	movw	r30, r16
    341a:	91 83       	std	Z+1, r25	; 0x01
    341c:	80 83       	st	Z, r24
    341e:	de 01       	movw	r26, r28
    3420:	af 58       	subi	r26, 0x8F	; 143
    3422:	bf 4f       	sbci	r27, 0xFF	; 255
    3424:	fe 01       	movw	r30, r28
    3426:	eb 58       	subi	r30, 0x8B	; 139
    3428:	ff 4f       	sbci	r31, 0xFF	; 255
    342a:	80 81       	ld	r24, Z
    342c:	91 81       	ldd	r25, Z+1	; 0x01
    342e:	8d 93       	st	X+, r24
    3430:	9c 93       	st	X, r25
    3432:	fe 01       	movw	r30, r28
    3434:	ef 58       	subi	r30, 0x8F	; 143
    3436:	ff 4f       	sbci	r31, 0xFF	; 255
    3438:	80 81       	ld	r24, Z
    343a:	91 81       	ldd	r25, Z+1	; 0x01
    343c:	01 97       	sbiw	r24, 0x01	; 1
    343e:	f1 f7       	brne	.-4      	; 0x343c <main+0x48e>
    3440:	fe 01       	movw	r30, r28
    3442:	ef 58       	subi	r30, 0x8F	; 143
    3444:	ff 4f       	sbci	r31, 0xFF	; 255
    3446:	91 83       	std	Z+1, r25	; 0x01
    3448:	80 83       	st	Z, r24
					_delay_ms(1000);
					MDIO_VoidSetPinValue(PORTA,PIN7,LOW);
    344a:	80 e0       	ldi	r24, 0x00	; 0
    344c:	67 e0       	ldi	r22, 0x07	; 7
    344e:	40 e0       	ldi	r20, 0x00	; 0
    3450:	0e 94 11 12 	call	0x2422	; 0x2422 <MDIO_VoidSetPinValue>
					HLCD_VoidSendCommand(0x01);
    3454:	81 e0       	ldi	r24, 0x01	; 1
    3456:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
		HLCD_VoidSendCommand(0x01);
		HLCD_VoidSetPostion(0,0);
		/*Go To Pass Check Function*/
		Pass_Check();

		for(Pas=0;Pas<3;Pas++)
    345a:	de 01       	movw	r26, r28
    345c:	a3 57       	subi	r26, 0x73	; 115
    345e:	bf 4f       	sbci	r27, 0xFF	; 255
    3460:	fe 01       	movw	r30, r28
    3462:	e3 57       	subi	r30, 0x73	; 115
    3464:	ff 4f       	sbci	r31, 0xFF	; 255
    3466:	80 81       	ld	r24, Z
    3468:	8f 5f       	subi	r24, 0xFF	; 255
    346a:	8c 93       	st	X, r24
    346c:	fe 01       	movw	r30, r28
    346e:	e3 57       	subi	r30, 0x73	; 115
    3470:	ff 4f       	sbci	r31, 0xFF	; 255
    3472:	80 81       	ld	r24, Z
    3474:	83 30       	cpi	r24, 0x03	; 3
    3476:	08 f4       	brcc	.+2      	; 0x347a <main+0x4cc>
    3478:	28 ce       	rjmp	.-944    	; 0x30ca <main+0x11c>
    347a:	80 c4       	rjmp	.+2304   	; 0x3d7c <main+0xdce>
					MDIO_VoidSetPinValue(PORTA,PIN7,LOW);
					HLCD_VoidSendCommand(0x01);
				}
		}
	}
	else if(IDTrue[0]=='S'&&IDTrue[1]=='n'&&IDTrue[2]=='t'&&IDTrue[3]=='a')
    347c:	fe 01       	movw	r30, r28
    347e:	e1 57       	subi	r30, 0x71	; 113
    3480:	ff 4f       	sbci	r31, 0xFF	; 255
    3482:	80 81       	ld	r24, Z
    3484:	91 81       	ldd	r25, Z+1	; 0x01
    3486:	83 35       	cpi	r24, 0x53	; 83
    3488:	91 05       	cpc	r25, r1
    348a:	09 f0       	breq	.+2      	; 0x348e <main+0x4e0>
    348c:	0b c2       	rjmp	.+1046   	; 0x38a4 <main+0x8f6>
    348e:	fe 01       	movw	r30, r28
    3490:	e1 57       	subi	r30, 0x71	; 113
    3492:	ff 4f       	sbci	r31, 0xFF	; 255
    3494:	82 81       	ldd	r24, Z+2	; 0x02
    3496:	93 81       	ldd	r25, Z+3	; 0x03
    3498:	8e 36       	cpi	r24, 0x6E	; 110
    349a:	91 05       	cpc	r25, r1
    349c:	09 f0       	breq	.+2      	; 0x34a0 <main+0x4f2>
    349e:	02 c2       	rjmp	.+1028   	; 0x38a4 <main+0x8f6>
    34a0:	fe 01       	movw	r30, r28
    34a2:	e1 57       	subi	r30, 0x71	; 113
    34a4:	ff 4f       	sbci	r31, 0xFF	; 255
    34a6:	84 81       	ldd	r24, Z+4	; 0x04
    34a8:	95 81       	ldd	r25, Z+5	; 0x05
    34aa:	84 37       	cpi	r24, 0x74	; 116
    34ac:	91 05       	cpc	r25, r1
    34ae:	09 f0       	breq	.+2      	; 0x34b2 <main+0x504>
    34b0:	f9 c1       	rjmp	.+1010   	; 0x38a4 <main+0x8f6>
    34b2:	fe 01       	movw	r30, r28
    34b4:	e1 57       	subi	r30, 0x71	; 113
    34b6:	ff 4f       	sbci	r31, 0xFF	; 255
    34b8:	86 81       	ldd	r24, Z+6	; 0x06
    34ba:	97 81       	ldd	r25, Z+7	; 0x07
    34bc:	81 36       	cpi	r24, 0x61	; 97
    34be:	91 05       	cpc	r25, r1
    34c0:	09 f0       	breq	.+2      	; 0x34c4 <main+0x516>
    34c2:	f0 c1       	rjmp	.+992    	; 0x38a4 <main+0x8f6>
		{
			y=4; //For Exit For Loop
    34c4:	fe 01       	movw	r30, r28
    34c6:	e2 57       	subi	r30, 0x72	; 114
    34c8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ca:	84 e0       	ldi	r24, 0x04	; 4
    34cc:	80 83       	st	Z, r24
			HLCD_VoidSendCommand(0x01);
    34ce:	81 e0       	ldi	r24, 0x01	; 1
    34d0:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
			HLCD_VoidSetPostion(0,0);
    34d4:	80 e0       	ldi	r24, 0x00	; 0
    34d6:	60 e0       	ldi	r22, 0x00	; 0
    34d8:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <HLCD_VoidSetPostion>
			/*Go To Pass Check Function*/
			Pass_Check();
    34dc:	ce 01       	movw	r24, r28
    34de:	81 57       	subi	r24, 0x71	; 113
    34e0:	9f 4f       	sbci	r25, 0xFF	; 255
    34e2:	1c 01       	movw	r2, r24
    34e4:	0e 94 83 21 	call	0x4306	; 0x4306 <Pass_Check.1344>

			for(Pas=0;Pas<3;Pas++)
    34e8:	fe 01       	movw	r30, r28
    34ea:	e3 57       	subi	r30, 0x73	; 115
    34ec:	ff 4f       	sbci	r31, 0xFF	; 255
    34ee:	10 82       	st	Z, r1
    34f0:	d1 c1       	rjmp	.+930    	; 0x3894 <main+0x8e6>
			{
					/*If Correct Password*/
				if(PassTrue[0]=='1'&&PassTrue[1]=='2'&&PassTrue[2]=='0'&&PassTrue[3]=='0')
    34f2:	fe 01       	movw	r30, r28
    34f4:	e1 57       	subi	r30, 0x71	; 113
    34f6:	ff 4f       	sbci	r31, 0xFF	; 255
    34f8:	87 81       	ldd	r24, Z+7	; 0x07
    34fa:	90 85       	ldd	r25, Z+8	; 0x08
    34fc:	81 33       	cpi	r24, 0x31	; 49
    34fe:	91 05       	cpc	r25, r1
    3500:	79 f5       	brne	.+94     	; 0x3560 <main+0x5b2>
    3502:	fe 01       	movw	r30, r28
    3504:	e1 57       	subi	r30, 0x71	; 113
    3506:	ff 4f       	sbci	r31, 0xFF	; 255
    3508:	81 85       	ldd	r24, Z+9	; 0x09
    350a:	92 85       	ldd	r25, Z+10	; 0x0a
    350c:	82 33       	cpi	r24, 0x32	; 50
    350e:	91 05       	cpc	r25, r1
    3510:	39 f5       	brne	.+78     	; 0x3560 <main+0x5b2>
    3512:	fe 01       	movw	r30, r28
    3514:	e1 57       	subi	r30, 0x71	; 113
    3516:	ff 4f       	sbci	r31, 0xFF	; 255
    3518:	83 85       	ldd	r24, Z+11	; 0x0b
    351a:	94 85       	ldd	r25, Z+12	; 0x0c
    351c:	80 33       	cpi	r24, 0x30	; 48
    351e:	91 05       	cpc	r25, r1
    3520:	f9 f4       	brne	.+62     	; 0x3560 <main+0x5b2>
    3522:	fe 01       	movw	r30, r28
    3524:	e1 57       	subi	r30, 0x71	; 113
    3526:	ff 4f       	sbci	r31, 0xFF	; 255
    3528:	85 85       	ldd	r24, Z+13	; 0x0d
    352a:	96 85       	ldd	r25, Z+14	; 0x0e
    352c:	80 33       	cpi	r24, 0x30	; 48
    352e:	91 05       	cpc	r25, r1
    3530:	b9 f4       	brne	.+46     	; 0x3560 <main+0x5b2>
				{
					Login_Trial=True;
    3532:	81 e0       	ldi	r24, 0x01	; 1
    3534:	80 93 3f 01 	sts	0x013F, r24
					Pas=4; //For Exit For Loop
    3538:	fe 01       	movw	r30, r28
    353a:	e3 57       	subi	r30, 0x73	; 115
    353c:	ff 4f       	sbci	r31, 0xFF	; 255
    353e:	84 e0       	ldi	r24, 0x04	; 4
    3540:	80 83       	st	Z, r24
					HLCD_VoidSendCommand(0x01);
    3542:	81 e0       	ldi	r24, 0x01	; 1
    3544:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
					HLCD_VoidSetPostion(0,4);
    3548:	80 e0       	ldi	r24, 0x00	; 0
    354a:	64 e0       	ldi	r22, 0x04	; 4
    354c:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <HLCD_VoidSetPostion>
					HLCD_VoidSendString("Hello Santos");
    3550:	8c e8       	ldi	r24, 0x8C	; 140
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <HLCD_VoidSendString>
					Login_state=IN;
    3558:	81 e0       	ldi	r24, 0x01	; 1
    355a:	80 93 41 01 	sts	0x0141, r24
    355e:	91 c1       	rjmp	.+802    	; 0x3882 <main+0x8d4>
				}


					/*If Incorrect Password*/
					else if(Pas<3)
    3560:	fe 01       	movw	r30, r28
    3562:	e3 57       	subi	r30, 0x73	; 115
    3564:	ff 4f       	sbci	r31, 0xFF	; 255
    3566:	80 81       	ld	r24, Z
    3568:	83 30       	cpi	r24, 0x03	; 3
    356a:	08 f0       	brcs	.+2      	; 0x356e <main+0x5c0>
    356c:	c1 c0       	rjmp	.+386    	; 0x36f0 <main+0x742>
					{
						HLCD_VoidSendCommand(0x01);
    356e:	81 e0       	ldi	r24, 0x01	; 1
    3570:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
						HLCD_VoidSendString("Wrong Pass Try Again");
    3574:	8b e6       	ldi	r24, 0x6B	; 107
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <HLCD_VoidSendString>
    357c:	fe 01       	movw	r30, r28
    357e:	e3 59       	subi	r30, 0x93	; 147
    3580:	ff 4f       	sbci	r31, 0xFF	; 255
    3582:	80 e0       	ldi	r24, 0x00	; 0
    3584:	90 e0       	ldi	r25, 0x00	; 0
    3586:	aa e7       	ldi	r26, 0x7A	; 122
    3588:	b4 e4       	ldi	r27, 0x44	; 68
    358a:	80 83       	st	Z, r24
    358c:	91 83       	std	Z+1, r25	; 0x01
    358e:	a2 83       	std	Z+2, r26	; 0x02
    3590:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3592:	8e 01       	movw	r16, r28
    3594:	07 59       	subi	r16, 0x97	; 151
    3596:	1f 4f       	sbci	r17, 0xFF	; 255
    3598:	fe 01       	movw	r30, r28
    359a:	e3 59       	subi	r30, 0x93	; 147
    359c:	ff 4f       	sbci	r31, 0xFF	; 255
    359e:	60 81       	ld	r22, Z
    35a0:	71 81       	ldd	r23, Z+1	; 0x01
    35a2:	82 81       	ldd	r24, Z+2	; 0x02
    35a4:	93 81       	ldd	r25, Z+3	; 0x03
    35a6:	20 e0       	ldi	r18, 0x00	; 0
    35a8:	30 e0       	ldi	r19, 0x00	; 0
    35aa:	4a ef       	ldi	r20, 0xFA	; 250
    35ac:	54 e4       	ldi	r21, 0x44	; 68
    35ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35b2:	dc 01       	movw	r26, r24
    35b4:	cb 01       	movw	r24, r22
    35b6:	f8 01       	movw	r30, r16
    35b8:	80 83       	st	Z, r24
    35ba:	91 83       	std	Z+1, r25	; 0x01
    35bc:	a2 83       	std	Z+2, r26	; 0x02
    35be:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35c0:	fe 01       	movw	r30, r28
    35c2:	e7 59       	subi	r30, 0x97	; 151
    35c4:	ff 4f       	sbci	r31, 0xFF	; 255
    35c6:	60 81       	ld	r22, Z
    35c8:	71 81       	ldd	r23, Z+1	; 0x01
    35ca:	82 81       	ldd	r24, Z+2	; 0x02
    35cc:	93 81       	ldd	r25, Z+3	; 0x03
    35ce:	20 e0       	ldi	r18, 0x00	; 0
    35d0:	30 e0       	ldi	r19, 0x00	; 0
    35d2:	40 e8       	ldi	r20, 0x80	; 128
    35d4:	5f e3       	ldi	r21, 0x3F	; 63
    35d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35da:	88 23       	and	r24, r24
    35dc:	44 f4       	brge	.+16     	; 0x35ee <main+0x640>
		__ticks = 1;
    35de:	fe 01       	movw	r30, r28
    35e0:	e9 59       	subi	r30, 0x99	; 153
    35e2:	ff 4f       	sbci	r31, 0xFF	; 255
    35e4:	81 e0       	ldi	r24, 0x01	; 1
    35e6:	90 e0       	ldi	r25, 0x00	; 0
    35e8:	91 83       	std	Z+1, r25	; 0x01
    35ea:	80 83       	st	Z, r24
    35ec:	64 c0       	rjmp	.+200    	; 0x36b6 <main+0x708>
	else if (__tmp > 65535)
    35ee:	fe 01       	movw	r30, r28
    35f0:	e7 59       	subi	r30, 0x97	; 151
    35f2:	ff 4f       	sbci	r31, 0xFF	; 255
    35f4:	60 81       	ld	r22, Z
    35f6:	71 81       	ldd	r23, Z+1	; 0x01
    35f8:	82 81       	ldd	r24, Z+2	; 0x02
    35fa:	93 81       	ldd	r25, Z+3	; 0x03
    35fc:	20 e0       	ldi	r18, 0x00	; 0
    35fe:	3f ef       	ldi	r19, 0xFF	; 255
    3600:	4f e7       	ldi	r20, 0x7F	; 127
    3602:	57 e4       	ldi	r21, 0x47	; 71
    3604:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3608:	18 16       	cp	r1, r24
    360a:	0c f0       	brlt	.+2      	; 0x360e <main+0x660>
    360c:	43 c0       	rjmp	.+134    	; 0x3694 <main+0x6e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    360e:	fe 01       	movw	r30, r28
    3610:	e3 59       	subi	r30, 0x93	; 147
    3612:	ff 4f       	sbci	r31, 0xFF	; 255
    3614:	60 81       	ld	r22, Z
    3616:	71 81       	ldd	r23, Z+1	; 0x01
    3618:	82 81       	ldd	r24, Z+2	; 0x02
    361a:	93 81       	ldd	r25, Z+3	; 0x03
    361c:	20 e0       	ldi	r18, 0x00	; 0
    361e:	30 e0       	ldi	r19, 0x00	; 0
    3620:	40 e2       	ldi	r20, 0x20	; 32
    3622:	51 e4       	ldi	r21, 0x41	; 65
    3624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3628:	dc 01       	movw	r26, r24
    362a:	cb 01       	movw	r24, r22
    362c:	8e 01       	movw	r16, r28
    362e:	09 59       	subi	r16, 0x99	; 153
    3630:	1f 4f       	sbci	r17, 0xFF	; 255
    3632:	bc 01       	movw	r22, r24
    3634:	cd 01       	movw	r24, r26
    3636:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    363a:	dc 01       	movw	r26, r24
    363c:	cb 01       	movw	r24, r22
    363e:	f8 01       	movw	r30, r16
    3640:	91 83       	std	Z+1, r25	; 0x01
    3642:	80 83       	st	Z, r24
    3644:	1f c0       	rjmp	.+62     	; 0x3684 <main+0x6d6>
    3646:	fe 01       	movw	r30, r28
    3648:	eb 59       	subi	r30, 0x9B	; 155
    364a:	ff 4f       	sbci	r31, 0xFF	; 255
    364c:	88 ec       	ldi	r24, 0xC8	; 200
    364e:	90 e0       	ldi	r25, 0x00	; 0
    3650:	91 83       	std	Z+1, r25	; 0x01
    3652:	80 83       	st	Z, r24
    3654:	fe 01       	movw	r30, r28
    3656:	eb 59       	subi	r30, 0x9B	; 155
    3658:	ff 4f       	sbci	r31, 0xFF	; 255
    365a:	80 81       	ld	r24, Z
    365c:	91 81       	ldd	r25, Z+1	; 0x01
    365e:	01 97       	sbiw	r24, 0x01	; 1
    3660:	f1 f7       	brne	.-4      	; 0x365e <main+0x6b0>
    3662:	fe 01       	movw	r30, r28
    3664:	eb 59       	subi	r30, 0x9B	; 155
    3666:	ff 4f       	sbci	r31, 0xFF	; 255
    3668:	91 83       	std	Z+1, r25	; 0x01
    366a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    366c:	de 01       	movw	r26, r28
    366e:	a9 59       	subi	r26, 0x99	; 153
    3670:	bf 4f       	sbci	r27, 0xFF	; 255
    3672:	fe 01       	movw	r30, r28
    3674:	e9 59       	subi	r30, 0x99	; 153
    3676:	ff 4f       	sbci	r31, 0xFF	; 255
    3678:	80 81       	ld	r24, Z
    367a:	91 81       	ldd	r25, Z+1	; 0x01
    367c:	01 97       	sbiw	r24, 0x01	; 1
    367e:	11 96       	adiw	r26, 0x01	; 1
    3680:	9c 93       	st	X, r25
    3682:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3684:	fe 01       	movw	r30, r28
    3686:	e9 59       	subi	r30, 0x99	; 153
    3688:	ff 4f       	sbci	r31, 0xFF	; 255
    368a:	80 81       	ld	r24, Z
    368c:	91 81       	ldd	r25, Z+1	; 0x01
    368e:	00 97       	sbiw	r24, 0x00	; 0
    3690:	d1 f6       	brne	.-76     	; 0x3646 <main+0x698>
    3692:	27 c0       	rjmp	.+78     	; 0x36e2 <main+0x734>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3694:	8e 01       	movw	r16, r28
    3696:	09 59       	subi	r16, 0x99	; 153
    3698:	1f 4f       	sbci	r17, 0xFF	; 255
    369a:	fe 01       	movw	r30, r28
    369c:	e7 59       	subi	r30, 0x97	; 151
    369e:	ff 4f       	sbci	r31, 0xFF	; 255
    36a0:	60 81       	ld	r22, Z
    36a2:	71 81       	ldd	r23, Z+1	; 0x01
    36a4:	82 81       	ldd	r24, Z+2	; 0x02
    36a6:	93 81       	ldd	r25, Z+3	; 0x03
    36a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ac:	dc 01       	movw	r26, r24
    36ae:	cb 01       	movw	r24, r22
    36b0:	f8 01       	movw	r30, r16
    36b2:	91 83       	std	Z+1, r25	; 0x01
    36b4:	80 83       	st	Z, r24
    36b6:	de 01       	movw	r26, r28
    36b8:	ad 59       	subi	r26, 0x9D	; 157
    36ba:	bf 4f       	sbci	r27, 0xFF	; 255
    36bc:	fe 01       	movw	r30, r28
    36be:	e9 59       	subi	r30, 0x99	; 153
    36c0:	ff 4f       	sbci	r31, 0xFF	; 255
    36c2:	80 81       	ld	r24, Z
    36c4:	91 81       	ldd	r25, Z+1	; 0x01
    36c6:	8d 93       	st	X+, r24
    36c8:	9c 93       	st	X, r25
    36ca:	fe 01       	movw	r30, r28
    36cc:	ed 59       	subi	r30, 0x9D	; 157
    36ce:	ff 4f       	sbci	r31, 0xFF	; 255
    36d0:	80 81       	ld	r24, Z
    36d2:	91 81       	ldd	r25, Z+1	; 0x01
    36d4:	01 97       	sbiw	r24, 0x01	; 1
    36d6:	f1 f7       	brne	.-4      	; 0x36d4 <main+0x726>
    36d8:	fe 01       	movw	r30, r28
    36da:	ed 59       	subi	r30, 0x9D	; 157
    36dc:	ff 4f       	sbci	r31, 0xFF	; 255
    36de:	91 83       	std	Z+1, r25	; 0x01
    36e0:	80 83       	st	Z, r24
						_delay_ms(1000);
						/*Go To Pass Check Function*/
						Pass_Check();
    36e2:	ce 01       	movw	r24, r28
    36e4:	81 57       	subi	r24, 0x71	; 113
    36e6:	9f 4f       	sbci	r25, 0xFF	; 255
    36e8:	1c 01       	movw	r2, r24
    36ea:	0e 94 83 21 	call	0x4306	; 0x4306 <Pass_Check.1344>
    36ee:	c9 c0       	rjmp	.+402    	; 0x3882 <main+0x8d4>
					}
					/*If Incorrect Password*/
					else if(Pas==3)
    36f0:	fe 01       	movw	r30, r28
    36f2:	e3 57       	subi	r30, 0x73	; 115
    36f4:	ff 4f       	sbci	r31, 0xFF	; 255
    36f6:	80 81       	ld	r24, Z
    36f8:	83 30       	cpi	r24, 0x03	; 3
    36fa:	09 f0       	breq	.+2      	; 0x36fe <main+0x750>
    36fc:	c2 c0       	rjmp	.+388    	; 0x3882 <main+0x8d4>
					{
						HLCD_VoidSendCommand(0x01);
    36fe:	81 e0       	ldi	r24, 0x01	; 1
    3700:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
						HLCD_VoidSendString("Wrong Pass ");
    3704:	80 e8       	ldi	r24, 0x80	; 128
    3706:	90 e0       	ldi	r25, 0x00	; 0
    3708:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <HLCD_VoidSendString>
    370c:	fe 01       	movw	r30, r28
    370e:	e1 5a       	subi	r30, 0xA1	; 161
    3710:	ff 4f       	sbci	r31, 0xFF	; 255
    3712:	80 e0       	ldi	r24, 0x00	; 0
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	aa e7       	ldi	r26, 0x7A	; 122
    3718:	b4 e4       	ldi	r27, 0x44	; 68
    371a:	80 83       	st	Z, r24
    371c:	91 83       	std	Z+1, r25	; 0x01
    371e:	a2 83       	std	Z+2, r26	; 0x02
    3720:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3722:	8e 01       	movw	r16, r28
    3724:	05 5a       	subi	r16, 0xA5	; 165
    3726:	1f 4f       	sbci	r17, 0xFF	; 255
    3728:	fe 01       	movw	r30, r28
    372a:	e1 5a       	subi	r30, 0xA1	; 161
    372c:	ff 4f       	sbci	r31, 0xFF	; 255
    372e:	60 81       	ld	r22, Z
    3730:	71 81       	ldd	r23, Z+1	; 0x01
    3732:	82 81       	ldd	r24, Z+2	; 0x02
    3734:	93 81       	ldd	r25, Z+3	; 0x03
    3736:	20 e0       	ldi	r18, 0x00	; 0
    3738:	30 e0       	ldi	r19, 0x00	; 0
    373a:	4a ef       	ldi	r20, 0xFA	; 250
    373c:	54 e4       	ldi	r21, 0x44	; 68
    373e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3742:	dc 01       	movw	r26, r24
    3744:	cb 01       	movw	r24, r22
    3746:	f8 01       	movw	r30, r16
    3748:	80 83       	st	Z, r24
    374a:	91 83       	std	Z+1, r25	; 0x01
    374c:	a2 83       	std	Z+2, r26	; 0x02
    374e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3750:	fe 01       	movw	r30, r28
    3752:	e5 5a       	subi	r30, 0xA5	; 165
    3754:	ff 4f       	sbci	r31, 0xFF	; 255
    3756:	60 81       	ld	r22, Z
    3758:	71 81       	ldd	r23, Z+1	; 0x01
    375a:	82 81       	ldd	r24, Z+2	; 0x02
    375c:	93 81       	ldd	r25, Z+3	; 0x03
    375e:	20 e0       	ldi	r18, 0x00	; 0
    3760:	30 e0       	ldi	r19, 0x00	; 0
    3762:	40 e8       	ldi	r20, 0x80	; 128
    3764:	5f e3       	ldi	r21, 0x3F	; 63
    3766:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    376a:	88 23       	and	r24, r24
    376c:	44 f4       	brge	.+16     	; 0x377e <main+0x7d0>
		__ticks = 1;
    376e:	fe 01       	movw	r30, r28
    3770:	e7 5a       	subi	r30, 0xA7	; 167
    3772:	ff 4f       	sbci	r31, 0xFF	; 255
    3774:	81 e0       	ldi	r24, 0x01	; 1
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	91 83       	std	Z+1, r25	; 0x01
    377a:	80 83       	st	Z, r24
    377c:	64 c0       	rjmp	.+200    	; 0x3846 <main+0x898>
	else if (__tmp > 65535)
    377e:	fe 01       	movw	r30, r28
    3780:	e5 5a       	subi	r30, 0xA5	; 165
    3782:	ff 4f       	sbci	r31, 0xFF	; 255
    3784:	60 81       	ld	r22, Z
    3786:	71 81       	ldd	r23, Z+1	; 0x01
    3788:	82 81       	ldd	r24, Z+2	; 0x02
    378a:	93 81       	ldd	r25, Z+3	; 0x03
    378c:	20 e0       	ldi	r18, 0x00	; 0
    378e:	3f ef       	ldi	r19, 0xFF	; 255
    3790:	4f e7       	ldi	r20, 0x7F	; 127
    3792:	57 e4       	ldi	r21, 0x47	; 71
    3794:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3798:	18 16       	cp	r1, r24
    379a:	0c f0       	brlt	.+2      	; 0x379e <main+0x7f0>
    379c:	43 c0       	rjmp	.+134    	; 0x3824 <main+0x876>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    379e:	fe 01       	movw	r30, r28
    37a0:	e1 5a       	subi	r30, 0xA1	; 161
    37a2:	ff 4f       	sbci	r31, 0xFF	; 255
    37a4:	60 81       	ld	r22, Z
    37a6:	71 81       	ldd	r23, Z+1	; 0x01
    37a8:	82 81       	ldd	r24, Z+2	; 0x02
    37aa:	93 81       	ldd	r25, Z+3	; 0x03
    37ac:	20 e0       	ldi	r18, 0x00	; 0
    37ae:	30 e0       	ldi	r19, 0x00	; 0
    37b0:	40 e2       	ldi	r20, 0x20	; 32
    37b2:	51 e4       	ldi	r21, 0x41	; 65
    37b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37b8:	dc 01       	movw	r26, r24
    37ba:	cb 01       	movw	r24, r22
    37bc:	8e 01       	movw	r16, r28
    37be:	07 5a       	subi	r16, 0xA7	; 167
    37c0:	1f 4f       	sbci	r17, 0xFF	; 255
    37c2:	bc 01       	movw	r22, r24
    37c4:	cd 01       	movw	r24, r26
    37c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ca:	dc 01       	movw	r26, r24
    37cc:	cb 01       	movw	r24, r22
    37ce:	f8 01       	movw	r30, r16
    37d0:	91 83       	std	Z+1, r25	; 0x01
    37d2:	80 83       	st	Z, r24
    37d4:	1f c0       	rjmp	.+62     	; 0x3814 <main+0x866>
    37d6:	fe 01       	movw	r30, r28
    37d8:	e9 5a       	subi	r30, 0xA9	; 169
    37da:	ff 4f       	sbci	r31, 0xFF	; 255
    37dc:	88 ec       	ldi	r24, 0xC8	; 200
    37de:	90 e0       	ldi	r25, 0x00	; 0
    37e0:	91 83       	std	Z+1, r25	; 0x01
    37e2:	80 83       	st	Z, r24
    37e4:	fe 01       	movw	r30, r28
    37e6:	e9 5a       	subi	r30, 0xA9	; 169
    37e8:	ff 4f       	sbci	r31, 0xFF	; 255
    37ea:	80 81       	ld	r24, Z
    37ec:	91 81       	ldd	r25, Z+1	; 0x01
    37ee:	01 97       	sbiw	r24, 0x01	; 1
    37f0:	f1 f7       	brne	.-4      	; 0x37ee <main+0x840>
    37f2:	fe 01       	movw	r30, r28
    37f4:	e9 5a       	subi	r30, 0xA9	; 169
    37f6:	ff 4f       	sbci	r31, 0xFF	; 255
    37f8:	91 83       	std	Z+1, r25	; 0x01
    37fa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37fc:	de 01       	movw	r26, r28
    37fe:	a7 5a       	subi	r26, 0xA7	; 167
    3800:	bf 4f       	sbci	r27, 0xFF	; 255
    3802:	fe 01       	movw	r30, r28
    3804:	e7 5a       	subi	r30, 0xA7	; 167
    3806:	ff 4f       	sbci	r31, 0xFF	; 255
    3808:	80 81       	ld	r24, Z
    380a:	91 81       	ldd	r25, Z+1	; 0x01
    380c:	01 97       	sbiw	r24, 0x01	; 1
    380e:	11 96       	adiw	r26, 0x01	; 1
    3810:	9c 93       	st	X, r25
    3812:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3814:	fe 01       	movw	r30, r28
    3816:	e7 5a       	subi	r30, 0xA7	; 167
    3818:	ff 4f       	sbci	r31, 0xFF	; 255
    381a:	80 81       	ld	r24, Z
    381c:	91 81       	ldd	r25, Z+1	; 0x01
    381e:	00 97       	sbiw	r24, 0x00	; 0
    3820:	d1 f6       	brne	.-76     	; 0x37d6 <main+0x828>
    3822:	27 c0       	rjmp	.+78     	; 0x3872 <main+0x8c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3824:	8e 01       	movw	r16, r28
    3826:	07 5a       	subi	r16, 0xA7	; 167
    3828:	1f 4f       	sbci	r17, 0xFF	; 255
    382a:	fe 01       	movw	r30, r28
    382c:	e5 5a       	subi	r30, 0xA5	; 165
    382e:	ff 4f       	sbci	r31, 0xFF	; 255
    3830:	60 81       	ld	r22, Z
    3832:	71 81       	ldd	r23, Z+1	; 0x01
    3834:	82 81       	ldd	r24, Z+2	; 0x02
    3836:	93 81       	ldd	r25, Z+3	; 0x03
    3838:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    383c:	dc 01       	movw	r26, r24
    383e:	cb 01       	movw	r24, r22
    3840:	f8 01       	movw	r30, r16
    3842:	91 83       	std	Z+1, r25	; 0x01
    3844:	80 83       	st	Z, r24
    3846:	de 01       	movw	r26, r28
    3848:	ab 5a       	subi	r26, 0xAB	; 171
    384a:	bf 4f       	sbci	r27, 0xFF	; 255
    384c:	fe 01       	movw	r30, r28
    384e:	e7 5a       	subi	r30, 0xA7	; 167
    3850:	ff 4f       	sbci	r31, 0xFF	; 255
    3852:	80 81       	ld	r24, Z
    3854:	91 81       	ldd	r25, Z+1	; 0x01
    3856:	8d 93       	st	X+, r24
    3858:	9c 93       	st	X, r25
    385a:	fe 01       	movw	r30, r28
    385c:	eb 5a       	subi	r30, 0xAB	; 171
    385e:	ff 4f       	sbci	r31, 0xFF	; 255
    3860:	80 81       	ld	r24, Z
    3862:	91 81       	ldd	r25, Z+1	; 0x01
    3864:	01 97       	sbiw	r24, 0x01	; 1
    3866:	f1 f7       	brne	.-4      	; 0x3864 <main+0x8b6>
    3868:	fe 01       	movw	r30, r28
    386a:	eb 5a       	subi	r30, 0xAB	; 171
    386c:	ff 4f       	sbci	r31, 0xFF	; 255
    386e:	91 83       	std	Z+1, r25	; 0x01
    3870:	80 83       	st	Z, r24
						_delay_ms(1000);
						MDIO_VoidSetPinValue(PORTA,PIN7,LOW);
    3872:	80 e0       	ldi	r24, 0x00	; 0
    3874:	67 e0       	ldi	r22, 0x07	; 7
    3876:	40 e0       	ldi	r20, 0x00	; 0
    3878:	0e 94 11 12 	call	0x2422	; 0x2422 <MDIO_VoidSetPinValue>
						HLCD_VoidSendCommand(0x01);
    387c:	81 e0       	ldi	r24, 0x01	; 1
    387e:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
			HLCD_VoidSendCommand(0x01);
			HLCD_VoidSetPostion(0,0);
			/*Go To Pass Check Function*/
			Pass_Check();

			for(Pas=0;Pas<3;Pas++)
    3882:	de 01       	movw	r26, r28
    3884:	a3 57       	subi	r26, 0x73	; 115
    3886:	bf 4f       	sbci	r27, 0xFF	; 255
    3888:	fe 01       	movw	r30, r28
    388a:	e3 57       	subi	r30, 0x73	; 115
    388c:	ff 4f       	sbci	r31, 0xFF	; 255
    388e:	80 81       	ld	r24, Z
    3890:	8f 5f       	subi	r24, 0xFF	; 255
    3892:	8c 93       	st	X, r24
    3894:	fe 01       	movw	r30, r28
    3896:	e3 57       	subi	r30, 0x73	; 115
    3898:	ff 4f       	sbci	r31, 0xFF	; 255
    389a:	80 81       	ld	r24, Z
    389c:	83 30       	cpi	r24, 0x03	; 3
    389e:	08 f4       	brcc	.+2      	; 0x38a2 <main+0x8f4>
    38a0:	28 ce       	rjmp	.-944    	; 0x34f2 <main+0x544>
    38a2:	6c c2       	rjmp	.+1240   	; 0x3d7c <main+0xdce>
						MDIO_VoidSetPinValue(PORTA,PIN7,LOW);
						HLCD_VoidSendCommand(0x01);
					}
			}
		}
	else if(IDTrue[0]=='O'&&IDTrue[1]=='m'&&IDTrue[2]=='a'&&IDTrue[3]=='r')
    38a4:	fe 01       	movw	r30, r28
    38a6:	e1 57       	subi	r30, 0x71	; 113
    38a8:	ff 4f       	sbci	r31, 0xFF	; 255
    38aa:	80 81       	ld	r24, Z
    38ac:	91 81       	ldd	r25, Z+1	; 0x01
    38ae:	8f 34       	cpi	r24, 0x4F	; 79
    38b0:	91 05       	cpc	r25, r1
    38b2:	09 f0       	breq	.+2      	; 0x38b6 <main+0x908>
    38b4:	dd c1       	rjmp	.+954    	; 0x3c70 <main+0xcc2>
    38b6:	fe 01       	movw	r30, r28
    38b8:	e1 57       	subi	r30, 0x71	; 113
    38ba:	ff 4f       	sbci	r31, 0xFF	; 255
    38bc:	82 81       	ldd	r24, Z+2	; 0x02
    38be:	93 81       	ldd	r25, Z+3	; 0x03
    38c0:	8d 36       	cpi	r24, 0x6D	; 109
    38c2:	91 05       	cpc	r25, r1
    38c4:	09 f0       	breq	.+2      	; 0x38c8 <main+0x91a>
    38c6:	d4 c1       	rjmp	.+936    	; 0x3c70 <main+0xcc2>
    38c8:	fe 01       	movw	r30, r28
    38ca:	e1 57       	subi	r30, 0x71	; 113
    38cc:	ff 4f       	sbci	r31, 0xFF	; 255
    38ce:	84 81       	ldd	r24, Z+4	; 0x04
    38d0:	95 81       	ldd	r25, Z+5	; 0x05
    38d2:	81 36       	cpi	r24, 0x61	; 97
    38d4:	91 05       	cpc	r25, r1
    38d6:	09 f0       	breq	.+2      	; 0x38da <main+0x92c>
    38d8:	cb c1       	rjmp	.+918    	; 0x3c70 <main+0xcc2>
    38da:	fe 01       	movw	r30, r28
    38dc:	e1 57       	subi	r30, 0x71	; 113
    38de:	ff 4f       	sbci	r31, 0xFF	; 255
    38e0:	86 81       	ldd	r24, Z+6	; 0x06
    38e2:	97 81       	ldd	r25, Z+7	; 0x07
    38e4:	82 37       	cpi	r24, 0x72	; 114
    38e6:	91 05       	cpc	r25, r1
    38e8:	09 f0       	breq	.+2      	; 0x38ec <main+0x93e>
    38ea:	c2 c1       	rjmp	.+900    	; 0x3c70 <main+0xcc2>
		{
			y=4; //For Exit For Loop
    38ec:	fe 01       	movw	r30, r28
    38ee:	e2 57       	subi	r30, 0x72	; 114
    38f0:	ff 4f       	sbci	r31, 0xFF	; 255
    38f2:	84 e0       	ldi	r24, 0x04	; 4
    38f4:	80 83       	st	Z, r24
			HLCD_VoidSendCommand(0x01);
    38f6:	81 e0       	ldi	r24, 0x01	; 1
    38f8:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
			HLCD_VoidSetPostion(0,0);
    38fc:	80 e0       	ldi	r24, 0x00	; 0
    38fe:	60 e0       	ldi	r22, 0x00	; 0
    3900:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <HLCD_VoidSetPostion>
			/*Go To Pass Check Function*/
			Pass_Check();
    3904:	ce 01       	movw	r24, r28
    3906:	81 57       	subi	r24, 0x71	; 113
    3908:	9f 4f       	sbci	r25, 0xFF	; 255
    390a:	1c 01       	movw	r2, r24
    390c:	0e 94 83 21 	call	0x4306	; 0x4306 <Pass_Check.1344>

			for(Pas=0;Pas<3;Pas++)
    3910:	fe 01       	movw	r30, r28
    3912:	e3 57       	subi	r30, 0x73	; 115
    3914:	ff 4f       	sbci	r31, 0xFF	; 255
    3916:	10 82       	st	Z, r1
    3918:	a3 c1       	rjmp	.+838    	; 0x3c60 <main+0xcb2>
			{
					/*If Correct Password*/
				if(PassTrue[0]=='1'&&PassTrue[1]=='1'&&PassTrue[2]=='0'&&PassTrue[3]=='0')
    391a:	fe 01       	movw	r30, r28
    391c:	e1 57       	subi	r30, 0x71	; 113
    391e:	ff 4f       	sbci	r31, 0xFF	; 255
    3920:	87 81       	ldd	r24, Z+7	; 0x07
    3922:	90 85       	ldd	r25, Z+8	; 0x08
    3924:	81 33       	cpi	r24, 0x31	; 49
    3926:	91 05       	cpc	r25, r1
    3928:	79 f5       	brne	.+94     	; 0x3988 <main+0x9da>
    392a:	fe 01       	movw	r30, r28
    392c:	e1 57       	subi	r30, 0x71	; 113
    392e:	ff 4f       	sbci	r31, 0xFF	; 255
    3930:	81 85       	ldd	r24, Z+9	; 0x09
    3932:	92 85       	ldd	r25, Z+10	; 0x0a
    3934:	81 33       	cpi	r24, 0x31	; 49
    3936:	91 05       	cpc	r25, r1
    3938:	39 f5       	brne	.+78     	; 0x3988 <main+0x9da>
    393a:	fe 01       	movw	r30, r28
    393c:	e1 57       	subi	r30, 0x71	; 113
    393e:	ff 4f       	sbci	r31, 0xFF	; 255
    3940:	83 85       	ldd	r24, Z+11	; 0x0b
    3942:	94 85       	ldd	r25, Z+12	; 0x0c
    3944:	80 33       	cpi	r24, 0x30	; 48
    3946:	91 05       	cpc	r25, r1
    3948:	f9 f4       	brne	.+62     	; 0x3988 <main+0x9da>
    394a:	fe 01       	movw	r30, r28
    394c:	e1 57       	subi	r30, 0x71	; 113
    394e:	ff 4f       	sbci	r31, 0xFF	; 255
    3950:	85 85       	ldd	r24, Z+13	; 0x0d
    3952:	96 85       	ldd	r25, Z+14	; 0x0e
    3954:	80 33       	cpi	r24, 0x30	; 48
    3956:	91 05       	cpc	r25, r1
    3958:	b9 f4       	brne	.+46     	; 0x3988 <main+0x9da>
				{
					Login_Trial=True;
    395a:	81 e0       	ldi	r24, 0x01	; 1
    395c:	80 93 3f 01 	sts	0x013F, r24
					Pas=4; //For Exit For Loop
    3960:	fe 01       	movw	r30, r28
    3962:	e3 57       	subi	r30, 0x73	; 115
    3964:	ff 4f       	sbci	r31, 0xFF	; 255
    3966:	84 e0       	ldi	r24, 0x04	; 4
    3968:	80 83       	st	Z, r24
					HLCD_VoidSendCommand(0x01);
    396a:	81 e0       	ldi	r24, 0x01	; 1
    396c:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
					HLCD_VoidSetPostion(0,4);
    3970:	80 e0       	ldi	r24, 0x00	; 0
    3972:	64 e0       	ldi	r22, 0x04	; 4
    3974:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <HLCD_VoidSetPostion>
					HLCD_VoidSendString("Hello Omar");
    3978:	89 e9       	ldi	r24, 0x99	; 153
    397a:	90 e0       	ldi	r25, 0x00	; 0
    397c:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <HLCD_VoidSendString>
					Login_state=IN;
    3980:	81 e0       	ldi	r24, 0x01	; 1
    3982:	80 93 41 01 	sts	0x0141, r24
    3986:	63 c1       	rjmp	.+710    	; 0x3c4e <main+0xca0>
				}


					/*If Incorrect Password*/
					else if(Pas<3)
    3988:	fe 01       	movw	r30, r28
    398a:	e3 57       	subi	r30, 0x73	; 115
    398c:	ff 4f       	sbci	r31, 0xFF	; 255
    398e:	80 81       	ld	r24, Z
    3990:	83 30       	cpi	r24, 0x03	; 3
    3992:	08 f0       	brcs	.+2      	; 0x3996 <main+0x9e8>
    3994:	c1 c0       	rjmp	.+386    	; 0x3b18 <main+0xb6a>
					{
						HLCD_VoidSendCommand(0x01);
    3996:	81 e0       	ldi	r24, 0x01	; 1
    3998:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
						HLCD_VoidSendString("Wrong Pass Try Again");
    399c:	8b e6       	ldi	r24, 0x6B	; 107
    399e:	90 e0       	ldi	r25, 0x00	; 0
    39a0:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <HLCD_VoidSendString>
    39a4:	fe 01       	movw	r30, r28
    39a6:	ef 5a       	subi	r30, 0xAF	; 175
    39a8:	ff 4f       	sbci	r31, 0xFF	; 255
    39aa:	80 e0       	ldi	r24, 0x00	; 0
    39ac:	90 e0       	ldi	r25, 0x00	; 0
    39ae:	aa e7       	ldi	r26, 0x7A	; 122
    39b0:	b4 e4       	ldi	r27, 0x44	; 68
    39b2:	80 83       	st	Z, r24
    39b4:	91 83       	std	Z+1, r25	; 0x01
    39b6:	a2 83       	std	Z+2, r26	; 0x02
    39b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39ba:	8e 01       	movw	r16, r28
    39bc:	03 5b       	subi	r16, 0xB3	; 179
    39be:	1f 4f       	sbci	r17, 0xFF	; 255
    39c0:	fe 01       	movw	r30, r28
    39c2:	ef 5a       	subi	r30, 0xAF	; 175
    39c4:	ff 4f       	sbci	r31, 0xFF	; 255
    39c6:	60 81       	ld	r22, Z
    39c8:	71 81       	ldd	r23, Z+1	; 0x01
    39ca:	82 81       	ldd	r24, Z+2	; 0x02
    39cc:	93 81       	ldd	r25, Z+3	; 0x03
    39ce:	20 e0       	ldi	r18, 0x00	; 0
    39d0:	30 e0       	ldi	r19, 0x00	; 0
    39d2:	4a ef       	ldi	r20, 0xFA	; 250
    39d4:	54 e4       	ldi	r21, 0x44	; 68
    39d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39da:	dc 01       	movw	r26, r24
    39dc:	cb 01       	movw	r24, r22
    39de:	f8 01       	movw	r30, r16
    39e0:	80 83       	st	Z, r24
    39e2:	91 83       	std	Z+1, r25	; 0x01
    39e4:	a2 83       	std	Z+2, r26	; 0x02
    39e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    39e8:	fe 01       	movw	r30, r28
    39ea:	e3 5b       	subi	r30, 0xB3	; 179
    39ec:	ff 4f       	sbci	r31, 0xFF	; 255
    39ee:	60 81       	ld	r22, Z
    39f0:	71 81       	ldd	r23, Z+1	; 0x01
    39f2:	82 81       	ldd	r24, Z+2	; 0x02
    39f4:	93 81       	ldd	r25, Z+3	; 0x03
    39f6:	20 e0       	ldi	r18, 0x00	; 0
    39f8:	30 e0       	ldi	r19, 0x00	; 0
    39fa:	40 e8       	ldi	r20, 0x80	; 128
    39fc:	5f e3       	ldi	r21, 0x3F	; 63
    39fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a02:	88 23       	and	r24, r24
    3a04:	44 f4       	brge	.+16     	; 0x3a16 <main+0xa68>
		__ticks = 1;
    3a06:	fe 01       	movw	r30, r28
    3a08:	e5 5b       	subi	r30, 0xB5	; 181
    3a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a0c:	81 e0       	ldi	r24, 0x01	; 1
    3a0e:	90 e0       	ldi	r25, 0x00	; 0
    3a10:	91 83       	std	Z+1, r25	; 0x01
    3a12:	80 83       	st	Z, r24
    3a14:	64 c0       	rjmp	.+200    	; 0x3ade <main+0xb30>
	else if (__tmp > 65535)
    3a16:	fe 01       	movw	r30, r28
    3a18:	e3 5b       	subi	r30, 0xB3	; 179
    3a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a1c:	60 81       	ld	r22, Z
    3a1e:	71 81       	ldd	r23, Z+1	; 0x01
    3a20:	82 81       	ldd	r24, Z+2	; 0x02
    3a22:	93 81       	ldd	r25, Z+3	; 0x03
    3a24:	20 e0       	ldi	r18, 0x00	; 0
    3a26:	3f ef       	ldi	r19, 0xFF	; 255
    3a28:	4f e7       	ldi	r20, 0x7F	; 127
    3a2a:	57 e4       	ldi	r21, 0x47	; 71
    3a2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a30:	18 16       	cp	r1, r24
    3a32:	0c f0       	brlt	.+2      	; 0x3a36 <main+0xa88>
    3a34:	43 c0       	rjmp	.+134    	; 0x3abc <main+0xb0e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a36:	fe 01       	movw	r30, r28
    3a38:	ef 5a       	subi	r30, 0xAF	; 175
    3a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a3c:	60 81       	ld	r22, Z
    3a3e:	71 81       	ldd	r23, Z+1	; 0x01
    3a40:	82 81       	ldd	r24, Z+2	; 0x02
    3a42:	93 81       	ldd	r25, Z+3	; 0x03
    3a44:	20 e0       	ldi	r18, 0x00	; 0
    3a46:	30 e0       	ldi	r19, 0x00	; 0
    3a48:	40 e2       	ldi	r20, 0x20	; 32
    3a4a:	51 e4       	ldi	r21, 0x41	; 65
    3a4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a50:	dc 01       	movw	r26, r24
    3a52:	cb 01       	movw	r24, r22
    3a54:	8e 01       	movw	r16, r28
    3a56:	05 5b       	subi	r16, 0xB5	; 181
    3a58:	1f 4f       	sbci	r17, 0xFF	; 255
    3a5a:	bc 01       	movw	r22, r24
    3a5c:	cd 01       	movw	r24, r26
    3a5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a62:	dc 01       	movw	r26, r24
    3a64:	cb 01       	movw	r24, r22
    3a66:	f8 01       	movw	r30, r16
    3a68:	91 83       	std	Z+1, r25	; 0x01
    3a6a:	80 83       	st	Z, r24
    3a6c:	1f c0       	rjmp	.+62     	; 0x3aac <main+0xafe>
    3a6e:	fe 01       	movw	r30, r28
    3a70:	e7 5b       	subi	r30, 0xB7	; 183
    3a72:	ff 4f       	sbci	r31, 0xFF	; 255
    3a74:	88 ec       	ldi	r24, 0xC8	; 200
    3a76:	90 e0       	ldi	r25, 0x00	; 0
    3a78:	91 83       	std	Z+1, r25	; 0x01
    3a7a:	80 83       	st	Z, r24
    3a7c:	fe 01       	movw	r30, r28
    3a7e:	e7 5b       	subi	r30, 0xB7	; 183
    3a80:	ff 4f       	sbci	r31, 0xFF	; 255
    3a82:	80 81       	ld	r24, Z
    3a84:	91 81       	ldd	r25, Z+1	; 0x01
    3a86:	01 97       	sbiw	r24, 0x01	; 1
    3a88:	f1 f7       	brne	.-4      	; 0x3a86 <main+0xad8>
    3a8a:	fe 01       	movw	r30, r28
    3a8c:	e7 5b       	subi	r30, 0xB7	; 183
    3a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a90:	91 83       	std	Z+1, r25	; 0x01
    3a92:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a94:	de 01       	movw	r26, r28
    3a96:	a5 5b       	subi	r26, 0xB5	; 181
    3a98:	bf 4f       	sbci	r27, 0xFF	; 255
    3a9a:	fe 01       	movw	r30, r28
    3a9c:	e5 5b       	subi	r30, 0xB5	; 181
    3a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa0:	80 81       	ld	r24, Z
    3aa2:	91 81       	ldd	r25, Z+1	; 0x01
    3aa4:	01 97       	sbiw	r24, 0x01	; 1
    3aa6:	11 96       	adiw	r26, 0x01	; 1
    3aa8:	9c 93       	st	X, r25
    3aaa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aac:	fe 01       	movw	r30, r28
    3aae:	e5 5b       	subi	r30, 0xB5	; 181
    3ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab2:	80 81       	ld	r24, Z
    3ab4:	91 81       	ldd	r25, Z+1	; 0x01
    3ab6:	00 97       	sbiw	r24, 0x00	; 0
    3ab8:	d1 f6       	brne	.-76     	; 0x3a6e <main+0xac0>
    3aba:	27 c0       	rjmp	.+78     	; 0x3b0a <main+0xb5c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3abc:	8e 01       	movw	r16, r28
    3abe:	05 5b       	subi	r16, 0xB5	; 181
    3ac0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ac2:	fe 01       	movw	r30, r28
    3ac4:	e3 5b       	subi	r30, 0xB3	; 179
    3ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac8:	60 81       	ld	r22, Z
    3aca:	71 81       	ldd	r23, Z+1	; 0x01
    3acc:	82 81       	ldd	r24, Z+2	; 0x02
    3ace:	93 81       	ldd	r25, Z+3	; 0x03
    3ad0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ad4:	dc 01       	movw	r26, r24
    3ad6:	cb 01       	movw	r24, r22
    3ad8:	f8 01       	movw	r30, r16
    3ada:	91 83       	std	Z+1, r25	; 0x01
    3adc:	80 83       	st	Z, r24
    3ade:	de 01       	movw	r26, r28
    3ae0:	a9 5b       	subi	r26, 0xB9	; 185
    3ae2:	bf 4f       	sbci	r27, 0xFF	; 255
    3ae4:	fe 01       	movw	r30, r28
    3ae6:	e5 5b       	subi	r30, 0xB5	; 181
    3ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aea:	80 81       	ld	r24, Z
    3aec:	91 81       	ldd	r25, Z+1	; 0x01
    3aee:	8d 93       	st	X+, r24
    3af0:	9c 93       	st	X, r25
    3af2:	fe 01       	movw	r30, r28
    3af4:	e9 5b       	subi	r30, 0xB9	; 185
    3af6:	ff 4f       	sbci	r31, 0xFF	; 255
    3af8:	80 81       	ld	r24, Z
    3afa:	91 81       	ldd	r25, Z+1	; 0x01
    3afc:	01 97       	sbiw	r24, 0x01	; 1
    3afe:	f1 f7       	brne	.-4      	; 0x3afc <main+0xb4e>
    3b00:	fe 01       	movw	r30, r28
    3b02:	e9 5b       	subi	r30, 0xB9	; 185
    3b04:	ff 4f       	sbci	r31, 0xFF	; 255
    3b06:	91 83       	std	Z+1, r25	; 0x01
    3b08:	80 83       	st	Z, r24
						_delay_ms(1000);
						/*Go To Pass Check Function*/
						Pass_Check();
    3b0a:	ce 01       	movw	r24, r28
    3b0c:	81 57       	subi	r24, 0x71	; 113
    3b0e:	9f 4f       	sbci	r25, 0xFF	; 255
    3b10:	1c 01       	movw	r2, r24
    3b12:	0e 94 83 21 	call	0x4306	; 0x4306 <Pass_Check.1344>
    3b16:	9b c0       	rjmp	.+310    	; 0x3c4e <main+0xca0>
					}
					/*If Incorrect Password*/
					else if(Pas==3)
    3b18:	fe 01       	movw	r30, r28
    3b1a:	e3 57       	subi	r30, 0x73	; 115
    3b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b1e:	80 81       	ld	r24, Z
    3b20:	83 30       	cpi	r24, 0x03	; 3
    3b22:	09 f0       	breq	.+2      	; 0x3b26 <main+0xb78>
    3b24:	94 c0       	rjmp	.+296    	; 0x3c4e <main+0xca0>
					{
						HLCD_VoidSendCommand(0x01);
    3b26:	81 e0       	ldi	r24, 0x01	; 1
    3b28:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
						HLCD_VoidSendString("Wrong Pass ");
    3b2c:	80 e8       	ldi	r24, 0x80	; 128
    3b2e:	90 e0       	ldi	r25, 0x00	; 0
    3b30:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <HLCD_VoidSendString>
    3b34:	fe 01       	movw	r30, r28
    3b36:	ed 5b       	subi	r30, 0xBD	; 189
    3b38:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3a:	80 e0       	ldi	r24, 0x00	; 0
    3b3c:	90 e0       	ldi	r25, 0x00	; 0
    3b3e:	aa e7       	ldi	r26, 0x7A	; 122
    3b40:	b4 e4       	ldi	r27, 0x44	; 68
    3b42:	80 83       	st	Z, r24
    3b44:	91 83       	std	Z+1, r25	; 0x01
    3b46:	a2 83       	std	Z+2, r26	; 0x02
    3b48:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b4a:	8e 01       	movw	r16, r28
    3b4c:	01 5c       	subi	r16, 0xC1	; 193
    3b4e:	1f 4f       	sbci	r17, 0xFF	; 255
    3b50:	fe 01       	movw	r30, r28
    3b52:	ed 5b       	subi	r30, 0xBD	; 189
    3b54:	ff 4f       	sbci	r31, 0xFF	; 255
    3b56:	60 81       	ld	r22, Z
    3b58:	71 81       	ldd	r23, Z+1	; 0x01
    3b5a:	82 81       	ldd	r24, Z+2	; 0x02
    3b5c:	93 81       	ldd	r25, Z+3	; 0x03
    3b5e:	20 e0       	ldi	r18, 0x00	; 0
    3b60:	30 e0       	ldi	r19, 0x00	; 0
    3b62:	4a ef       	ldi	r20, 0xFA	; 250
    3b64:	54 e4       	ldi	r21, 0x44	; 68
    3b66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b6a:	dc 01       	movw	r26, r24
    3b6c:	cb 01       	movw	r24, r22
    3b6e:	f8 01       	movw	r30, r16
    3b70:	80 83       	st	Z, r24
    3b72:	91 83       	std	Z+1, r25	; 0x01
    3b74:	a2 83       	std	Z+2, r26	; 0x02
    3b76:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b78:	fe 01       	movw	r30, r28
    3b7a:	ff 96       	adiw	r30, 0x3f	; 63
    3b7c:	60 81       	ld	r22, Z
    3b7e:	71 81       	ldd	r23, Z+1	; 0x01
    3b80:	82 81       	ldd	r24, Z+2	; 0x02
    3b82:	93 81       	ldd	r25, Z+3	; 0x03
    3b84:	20 e0       	ldi	r18, 0x00	; 0
    3b86:	30 e0       	ldi	r19, 0x00	; 0
    3b88:	40 e8       	ldi	r20, 0x80	; 128
    3b8a:	5f e3       	ldi	r21, 0x3F	; 63
    3b8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b90:	88 23       	and	r24, r24
    3b92:	2c f4       	brge	.+10     	; 0x3b9e <main+0xbf0>
		__ticks = 1;
    3b94:	81 e0       	ldi	r24, 0x01	; 1
    3b96:	90 e0       	ldi	r25, 0x00	; 0
    3b98:	9e af       	std	Y+62, r25	; 0x3e
    3b9a:	8d af       	std	Y+61, r24	; 0x3d
    3b9c:	46 c0       	rjmp	.+140    	; 0x3c2a <main+0xc7c>
	else if (__tmp > 65535)
    3b9e:	fe 01       	movw	r30, r28
    3ba0:	ff 96       	adiw	r30, 0x3f	; 63
    3ba2:	60 81       	ld	r22, Z
    3ba4:	71 81       	ldd	r23, Z+1	; 0x01
    3ba6:	82 81       	ldd	r24, Z+2	; 0x02
    3ba8:	93 81       	ldd	r25, Z+3	; 0x03
    3baa:	20 e0       	ldi	r18, 0x00	; 0
    3bac:	3f ef       	ldi	r19, 0xFF	; 255
    3bae:	4f e7       	ldi	r20, 0x7F	; 127
    3bb0:	57 e4       	ldi	r21, 0x47	; 71
    3bb2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bb6:	18 16       	cp	r1, r24
    3bb8:	64 f5       	brge	.+88     	; 0x3c12 <main+0xc64>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bba:	fe 01       	movw	r30, r28
    3bbc:	ed 5b       	subi	r30, 0xBD	; 189
    3bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc0:	60 81       	ld	r22, Z
    3bc2:	71 81       	ldd	r23, Z+1	; 0x01
    3bc4:	82 81       	ldd	r24, Z+2	; 0x02
    3bc6:	93 81       	ldd	r25, Z+3	; 0x03
    3bc8:	20 e0       	ldi	r18, 0x00	; 0
    3bca:	30 e0       	ldi	r19, 0x00	; 0
    3bcc:	40 e2       	ldi	r20, 0x20	; 32
    3bce:	51 e4       	ldi	r21, 0x41	; 65
    3bd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bd4:	dc 01       	movw	r26, r24
    3bd6:	cb 01       	movw	r24, r22
    3bd8:	bc 01       	movw	r22, r24
    3bda:	cd 01       	movw	r24, r26
    3bdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3be0:	dc 01       	movw	r26, r24
    3be2:	cb 01       	movw	r24, r22
    3be4:	9e af       	std	Y+62, r25	; 0x3e
    3be6:	8d af       	std	Y+61, r24	; 0x3d
    3be8:	0f c0       	rjmp	.+30     	; 0x3c08 <main+0xc5a>
    3bea:	88 ec       	ldi	r24, 0xC8	; 200
    3bec:	90 e0       	ldi	r25, 0x00	; 0
    3bee:	9c af       	std	Y+60, r25	; 0x3c
    3bf0:	8b af       	std	Y+59, r24	; 0x3b
    3bf2:	8b ad       	ldd	r24, Y+59	; 0x3b
    3bf4:	9c ad       	ldd	r25, Y+60	; 0x3c
    3bf6:	01 97       	sbiw	r24, 0x01	; 1
    3bf8:	f1 f7       	brne	.-4      	; 0x3bf6 <main+0xc48>
    3bfa:	9c af       	std	Y+60, r25	; 0x3c
    3bfc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bfe:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c00:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c02:	01 97       	sbiw	r24, 0x01	; 1
    3c04:	9e af       	std	Y+62, r25	; 0x3e
    3c06:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c08:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c0a:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c0c:	00 97       	sbiw	r24, 0x00	; 0
    3c0e:	69 f7       	brne	.-38     	; 0x3bea <main+0xc3c>
    3c10:	16 c0       	rjmp	.+44     	; 0x3c3e <main+0xc90>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c12:	fe 01       	movw	r30, r28
    3c14:	ff 96       	adiw	r30, 0x3f	; 63
    3c16:	60 81       	ld	r22, Z
    3c18:	71 81       	ldd	r23, Z+1	; 0x01
    3c1a:	82 81       	ldd	r24, Z+2	; 0x02
    3c1c:	93 81       	ldd	r25, Z+3	; 0x03
    3c1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c22:	dc 01       	movw	r26, r24
    3c24:	cb 01       	movw	r24, r22
    3c26:	9e af       	std	Y+62, r25	; 0x3e
    3c28:	8d af       	std	Y+61, r24	; 0x3d
    3c2a:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c2c:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c2e:	9a af       	std	Y+58, r25	; 0x3a
    3c30:	89 af       	std	Y+57, r24	; 0x39
    3c32:	89 ad       	ldd	r24, Y+57	; 0x39
    3c34:	9a ad       	ldd	r25, Y+58	; 0x3a
    3c36:	01 97       	sbiw	r24, 0x01	; 1
    3c38:	f1 f7       	brne	.-4      	; 0x3c36 <main+0xc88>
    3c3a:	9a af       	std	Y+58, r25	; 0x3a
    3c3c:	89 af       	std	Y+57, r24	; 0x39
						_delay_ms(1000);
						MDIO_VoidSetPinValue(PORTA,PIN7,LOW);
    3c3e:	80 e0       	ldi	r24, 0x00	; 0
    3c40:	67 e0       	ldi	r22, 0x07	; 7
    3c42:	40 e0       	ldi	r20, 0x00	; 0
    3c44:	0e 94 11 12 	call	0x2422	; 0x2422 <MDIO_VoidSetPinValue>
						HLCD_VoidSendCommand(0x01);
    3c48:	81 e0       	ldi	r24, 0x01	; 1
    3c4a:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
			HLCD_VoidSendCommand(0x01);
			HLCD_VoidSetPostion(0,0);
			/*Go To Pass Check Function*/
			Pass_Check();

			for(Pas=0;Pas<3;Pas++)
    3c4e:	de 01       	movw	r26, r28
    3c50:	a3 57       	subi	r26, 0x73	; 115
    3c52:	bf 4f       	sbci	r27, 0xFF	; 255
    3c54:	fe 01       	movw	r30, r28
    3c56:	e3 57       	subi	r30, 0x73	; 115
    3c58:	ff 4f       	sbci	r31, 0xFF	; 255
    3c5a:	80 81       	ld	r24, Z
    3c5c:	8f 5f       	subi	r24, 0xFF	; 255
    3c5e:	8c 93       	st	X, r24
    3c60:	fe 01       	movw	r30, r28
    3c62:	e3 57       	subi	r30, 0x73	; 115
    3c64:	ff 4f       	sbci	r31, 0xFF	; 255
    3c66:	80 81       	ld	r24, Z
    3c68:	83 30       	cpi	r24, 0x03	; 3
    3c6a:	08 f4       	brcc	.+2      	; 0x3c6e <main+0xcc0>
    3c6c:	56 ce       	rjmp	.-852    	; 0x391a <main+0x96c>
    3c6e:	86 c0       	rjmp	.+268    	; 0x3d7c <main+0xdce>
					}
			}
		}

/*If Incorrect ID*/
else if(y<3)
    3c70:	fe 01       	movw	r30, r28
    3c72:	e2 57       	subi	r30, 0x72	; 114
    3c74:	ff 4f       	sbci	r31, 0xFF	; 255
    3c76:	80 81       	ld	r24, Z
    3c78:	83 30       	cpi	r24, 0x03	; 3
    3c7a:	08 f0       	brcs	.+2      	; 0x3c7e <main+0xcd0>
    3c7c:	7f c0       	rjmp	.+254    	; 0x3d7c <main+0xdce>
{


	HLCD_VoidSendCommand(0x01);
    3c7e:	81 e0       	ldi	r24, 0x01	; 1
    3c80:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
	HLCD_VoidSendString("Wrong ID Try Again");
    3c84:	84 ea       	ldi	r24, 0xA4	; 164
    3c86:	90 e0       	ldi	r25, 0x00	; 0
    3c88:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <HLCD_VoidSendString>
    3c8c:	80 e0       	ldi	r24, 0x00	; 0
    3c8e:	90 e0       	ldi	r25, 0x00	; 0
    3c90:	aa e7       	ldi	r26, 0x7A	; 122
    3c92:	b4 e4       	ldi	r27, 0x44	; 68
    3c94:	8d ab       	std	Y+53, r24	; 0x35
    3c96:	9e ab       	std	Y+54, r25	; 0x36
    3c98:	af ab       	std	Y+55, r26	; 0x37
    3c9a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c9c:	6d a9       	ldd	r22, Y+53	; 0x35
    3c9e:	7e a9       	ldd	r23, Y+54	; 0x36
    3ca0:	8f a9       	ldd	r24, Y+55	; 0x37
    3ca2:	98 ad       	ldd	r25, Y+56	; 0x38
    3ca4:	20 e0       	ldi	r18, 0x00	; 0
    3ca6:	30 e0       	ldi	r19, 0x00	; 0
    3ca8:	4a ef       	ldi	r20, 0xFA	; 250
    3caa:	54 e4       	ldi	r21, 0x44	; 68
    3cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cb0:	dc 01       	movw	r26, r24
    3cb2:	cb 01       	movw	r24, r22
    3cb4:	89 ab       	std	Y+49, r24	; 0x31
    3cb6:	9a ab       	std	Y+50, r25	; 0x32
    3cb8:	ab ab       	std	Y+51, r26	; 0x33
    3cba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3cbc:	69 a9       	ldd	r22, Y+49	; 0x31
    3cbe:	7a a9       	ldd	r23, Y+50	; 0x32
    3cc0:	8b a9       	ldd	r24, Y+51	; 0x33
    3cc2:	9c a9       	ldd	r25, Y+52	; 0x34
    3cc4:	20 e0       	ldi	r18, 0x00	; 0
    3cc6:	30 e0       	ldi	r19, 0x00	; 0
    3cc8:	40 e8       	ldi	r20, 0x80	; 128
    3cca:	5f e3       	ldi	r21, 0x3F	; 63
    3ccc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3cd0:	88 23       	and	r24, r24
    3cd2:	2c f4       	brge	.+10     	; 0x3cde <main+0xd30>
		__ticks = 1;
    3cd4:	81 e0       	ldi	r24, 0x01	; 1
    3cd6:	90 e0       	ldi	r25, 0x00	; 0
    3cd8:	98 ab       	std	Y+48, r25	; 0x30
    3cda:	8f a7       	std	Y+47, r24	; 0x2f
    3cdc:	3f c0       	rjmp	.+126    	; 0x3d5c <main+0xdae>
	else if (__tmp > 65535)
    3cde:	69 a9       	ldd	r22, Y+49	; 0x31
    3ce0:	7a a9       	ldd	r23, Y+50	; 0x32
    3ce2:	8b a9       	ldd	r24, Y+51	; 0x33
    3ce4:	9c a9       	ldd	r25, Y+52	; 0x34
    3ce6:	20 e0       	ldi	r18, 0x00	; 0
    3ce8:	3f ef       	ldi	r19, 0xFF	; 255
    3cea:	4f e7       	ldi	r20, 0x7F	; 127
    3cec:	57 e4       	ldi	r21, 0x47	; 71
    3cee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cf2:	18 16       	cp	r1, r24
    3cf4:	4c f5       	brge	.+82     	; 0x3d48 <main+0xd9a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cf6:	6d a9       	ldd	r22, Y+53	; 0x35
    3cf8:	7e a9       	ldd	r23, Y+54	; 0x36
    3cfa:	8f a9       	ldd	r24, Y+55	; 0x37
    3cfc:	98 ad       	ldd	r25, Y+56	; 0x38
    3cfe:	20 e0       	ldi	r18, 0x00	; 0
    3d00:	30 e0       	ldi	r19, 0x00	; 0
    3d02:	40 e2       	ldi	r20, 0x20	; 32
    3d04:	51 e4       	ldi	r21, 0x41	; 65
    3d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d0a:	dc 01       	movw	r26, r24
    3d0c:	cb 01       	movw	r24, r22
    3d0e:	bc 01       	movw	r22, r24
    3d10:	cd 01       	movw	r24, r26
    3d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d16:	dc 01       	movw	r26, r24
    3d18:	cb 01       	movw	r24, r22
    3d1a:	98 ab       	std	Y+48, r25	; 0x30
    3d1c:	8f a7       	std	Y+47, r24	; 0x2f
    3d1e:	0f c0       	rjmp	.+30     	; 0x3d3e <main+0xd90>
    3d20:	88 ec       	ldi	r24, 0xC8	; 200
    3d22:	90 e0       	ldi	r25, 0x00	; 0
    3d24:	9e a7       	std	Y+46, r25	; 0x2e
    3d26:	8d a7       	std	Y+45, r24	; 0x2d
    3d28:	8d a5       	ldd	r24, Y+45	; 0x2d
    3d2a:	9e a5       	ldd	r25, Y+46	; 0x2e
    3d2c:	01 97       	sbiw	r24, 0x01	; 1
    3d2e:	f1 f7       	brne	.-4      	; 0x3d2c <main+0xd7e>
    3d30:	9e a7       	std	Y+46, r25	; 0x2e
    3d32:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d34:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d36:	98 a9       	ldd	r25, Y+48	; 0x30
    3d38:	01 97       	sbiw	r24, 0x01	; 1
    3d3a:	98 ab       	std	Y+48, r25	; 0x30
    3d3c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d40:	98 a9       	ldd	r25, Y+48	; 0x30
    3d42:	00 97       	sbiw	r24, 0x00	; 0
    3d44:	69 f7       	brne	.-38     	; 0x3d20 <main+0xd72>
    3d46:	14 c0       	rjmp	.+40     	; 0x3d70 <main+0xdc2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d48:	69 a9       	ldd	r22, Y+49	; 0x31
    3d4a:	7a a9       	ldd	r23, Y+50	; 0x32
    3d4c:	8b a9       	ldd	r24, Y+51	; 0x33
    3d4e:	9c a9       	ldd	r25, Y+52	; 0x34
    3d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d54:	dc 01       	movw	r26, r24
    3d56:	cb 01       	movw	r24, r22
    3d58:	98 ab       	std	Y+48, r25	; 0x30
    3d5a:	8f a7       	std	Y+47, r24	; 0x2f
    3d5c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d5e:	98 a9       	ldd	r25, Y+48	; 0x30
    3d60:	9c a7       	std	Y+44, r25	; 0x2c
    3d62:	8b a7       	std	Y+43, r24	; 0x2b
    3d64:	8b a5       	ldd	r24, Y+43	; 0x2b
    3d66:	9c a5       	ldd	r25, Y+44	; 0x2c
    3d68:	01 97       	sbiw	r24, 0x01	; 1
    3d6a:	f1 f7       	brne	.-4      	; 0x3d68 <main+0xdba>
    3d6c:	9c a7       	std	Y+44, r25	; 0x2c
    3d6e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1000);
	/*Go To ID Check Function*/
	ID_CHECK();
    3d70:	ce 01       	movw	r24, r28
    3d72:	81 57       	subi	r24, 0x71	; 113
    3d74:	9f 4f       	sbci	r25, 0xFF	; 255
    3d76:	1c 01       	movw	r2, r24
    3d78:	0e 94 32 21 	call	0x4264	; 0x4264 <ID_CHECK.1351>

}
/*If Incorrect ID*/
if(y==2)
    3d7c:	fe 01       	movw	r30, r28
    3d7e:	e2 57       	subi	r30, 0x72	; 114
    3d80:	ff 4f       	sbci	r31, 0xFF	; 255
    3d82:	80 81       	ld	r24, Z
    3d84:	82 30       	cpi	r24, 0x02	; 2
    3d86:	09 f0       	breq	.+2      	; 0x3d8a <main+0xddc>
    3d88:	84 c0       	rjmp	.+264    	; 0x3e92 <main+0xee4>
{
	Login_Trial=True;
    3d8a:	81 e0       	ldi	r24, 0x01	; 1
    3d8c:	80 93 3f 01 	sts	0x013F, r24
	HLCD_VoidSendCommand(0x01);
    3d90:	81 e0       	ldi	r24, 0x01	; 1
    3d92:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
		HLCD_VoidSendString("Wrong ID ");
    3d96:	87 eb       	ldi	r24, 0xB7	; 183
    3d98:	90 e0       	ldi	r25, 0x00	; 0
    3d9a:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <HLCD_VoidSendString>
    3d9e:	80 e0       	ldi	r24, 0x00	; 0
    3da0:	90 e0       	ldi	r25, 0x00	; 0
    3da2:	aa e7       	ldi	r26, 0x7A	; 122
    3da4:	b4 e4       	ldi	r27, 0x44	; 68
    3da6:	8f a3       	std	Y+39, r24	; 0x27
    3da8:	98 a7       	std	Y+40, r25	; 0x28
    3daa:	a9 a7       	std	Y+41, r26	; 0x29
    3dac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dae:	6f a1       	ldd	r22, Y+39	; 0x27
    3db0:	78 a5       	ldd	r23, Y+40	; 0x28
    3db2:	89 a5       	ldd	r24, Y+41	; 0x29
    3db4:	9a a5       	ldd	r25, Y+42	; 0x2a
    3db6:	20 e0       	ldi	r18, 0x00	; 0
    3db8:	30 e0       	ldi	r19, 0x00	; 0
    3dba:	4a ef       	ldi	r20, 0xFA	; 250
    3dbc:	54 e4       	ldi	r21, 0x44	; 68
    3dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dc2:	dc 01       	movw	r26, r24
    3dc4:	cb 01       	movw	r24, r22
    3dc6:	8b a3       	std	Y+35, r24	; 0x23
    3dc8:	9c a3       	std	Y+36, r25	; 0x24
    3dca:	ad a3       	std	Y+37, r26	; 0x25
    3dcc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3dce:	6b a1       	ldd	r22, Y+35	; 0x23
    3dd0:	7c a1       	ldd	r23, Y+36	; 0x24
    3dd2:	8d a1       	ldd	r24, Y+37	; 0x25
    3dd4:	9e a1       	ldd	r25, Y+38	; 0x26
    3dd6:	20 e0       	ldi	r18, 0x00	; 0
    3dd8:	30 e0       	ldi	r19, 0x00	; 0
    3dda:	40 e8       	ldi	r20, 0x80	; 128
    3ddc:	5f e3       	ldi	r21, 0x3F	; 63
    3dde:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3de2:	88 23       	and	r24, r24
    3de4:	2c f4       	brge	.+10     	; 0x3df0 <main+0xe42>
		__ticks = 1;
    3de6:	81 e0       	ldi	r24, 0x01	; 1
    3de8:	90 e0       	ldi	r25, 0x00	; 0
    3dea:	9a a3       	std	Y+34, r25	; 0x22
    3dec:	89 a3       	std	Y+33, r24	; 0x21
    3dee:	3f c0       	rjmp	.+126    	; 0x3e6e <main+0xec0>
	else if (__tmp > 65535)
    3df0:	6b a1       	ldd	r22, Y+35	; 0x23
    3df2:	7c a1       	ldd	r23, Y+36	; 0x24
    3df4:	8d a1       	ldd	r24, Y+37	; 0x25
    3df6:	9e a1       	ldd	r25, Y+38	; 0x26
    3df8:	20 e0       	ldi	r18, 0x00	; 0
    3dfa:	3f ef       	ldi	r19, 0xFF	; 255
    3dfc:	4f e7       	ldi	r20, 0x7F	; 127
    3dfe:	57 e4       	ldi	r21, 0x47	; 71
    3e00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e04:	18 16       	cp	r1, r24
    3e06:	4c f5       	brge	.+82     	; 0x3e5a <main+0xeac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e08:	6f a1       	ldd	r22, Y+39	; 0x27
    3e0a:	78 a5       	ldd	r23, Y+40	; 0x28
    3e0c:	89 a5       	ldd	r24, Y+41	; 0x29
    3e0e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e10:	20 e0       	ldi	r18, 0x00	; 0
    3e12:	30 e0       	ldi	r19, 0x00	; 0
    3e14:	40 e2       	ldi	r20, 0x20	; 32
    3e16:	51 e4       	ldi	r21, 0x41	; 65
    3e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e1c:	dc 01       	movw	r26, r24
    3e1e:	cb 01       	movw	r24, r22
    3e20:	bc 01       	movw	r22, r24
    3e22:	cd 01       	movw	r24, r26
    3e24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e28:	dc 01       	movw	r26, r24
    3e2a:	cb 01       	movw	r24, r22
    3e2c:	9a a3       	std	Y+34, r25	; 0x22
    3e2e:	89 a3       	std	Y+33, r24	; 0x21
    3e30:	0f c0       	rjmp	.+30     	; 0x3e50 <main+0xea2>
    3e32:	88 ec       	ldi	r24, 0xC8	; 200
    3e34:	90 e0       	ldi	r25, 0x00	; 0
    3e36:	98 a3       	std	Y+32, r25	; 0x20
    3e38:	8f 8f       	std	Y+31, r24	; 0x1f
    3e3a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3e3c:	98 a1       	ldd	r25, Y+32	; 0x20
    3e3e:	01 97       	sbiw	r24, 0x01	; 1
    3e40:	f1 f7       	brne	.-4      	; 0x3e3e <main+0xe90>
    3e42:	98 a3       	std	Y+32, r25	; 0x20
    3e44:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e46:	89 a1       	ldd	r24, Y+33	; 0x21
    3e48:	9a a1       	ldd	r25, Y+34	; 0x22
    3e4a:	01 97       	sbiw	r24, 0x01	; 1
    3e4c:	9a a3       	std	Y+34, r25	; 0x22
    3e4e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e50:	89 a1       	ldd	r24, Y+33	; 0x21
    3e52:	9a a1       	ldd	r25, Y+34	; 0x22
    3e54:	00 97       	sbiw	r24, 0x00	; 0
    3e56:	69 f7       	brne	.-38     	; 0x3e32 <main+0xe84>
    3e58:	14 c0       	rjmp	.+40     	; 0x3e82 <main+0xed4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e5a:	6b a1       	ldd	r22, Y+35	; 0x23
    3e5c:	7c a1       	ldd	r23, Y+36	; 0x24
    3e5e:	8d a1       	ldd	r24, Y+37	; 0x25
    3e60:	9e a1       	ldd	r25, Y+38	; 0x26
    3e62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e66:	dc 01       	movw	r26, r24
    3e68:	cb 01       	movw	r24, r22
    3e6a:	9a a3       	std	Y+34, r25	; 0x22
    3e6c:	89 a3       	std	Y+33, r24	; 0x21
    3e6e:	89 a1       	ldd	r24, Y+33	; 0x21
    3e70:	9a a1       	ldd	r25, Y+34	; 0x22
    3e72:	9e 8f       	std	Y+30, r25	; 0x1e
    3e74:	8d 8f       	std	Y+29, r24	; 0x1d
    3e76:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e78:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3e7a:	01 97       	sbiw	r24, 0x01	; 1
    3e7c:	f1 f7       	brne	.-4      	; 0x3e7a <main+0xecc>
    3e7e:	9e 8f       	std	Y+30, r25	; 0x1e
    3e80:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1000);
		/*Turn Off LCD */
		MDIO_VoidSetPinValue(PORTA,PIN7,LOW);
    3e82:	80 e0       	ldi	r24, 0x00	; 0
    3e84:	67 e0       	ldi	r22, 0x07	; 7
    3e86:	40 e0       	ldi	r20, 0x00	; 0
    3e88:	0e 94 11 12 	call	0x2422	; 0x2422 <MDIO_VoidSetPinValue>
		HLCD_VoidSendCommand(0x01);
    3e8c:	81 e0       	ldi	r24, 0x01	; 1
    3e8e:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
}
/*Go To ID Check Function*/
ID_CHECK();
u8 y=0;
u8 Pas=0;
for(y=0;y<3;y++)
    3e92:	de 01       	movw	r26, r28
    3e94:	a2 57       	subi	r26, 0x72	; 114
    3e96:	bf 4f       	sbci	r27, 0xFF	; 255
    3e98:	fe 01       	movw	r30, r28
    3e9a:	e2 57       	subi	r30, 0x72	; 114
    3e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e9e:	80 81       	ld	r24, Z
    3ea0:	8f 5f       	subi	r24, 0xFF	; 255
    3ea2:	8c 93       	st	X, r24
    3ea4:	fe 01       	movw	r30, r28
    3ea6:	e2 57       	subi	r30, 0x72	; 114
    3ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eaa:	80 81       	ld	r24, Z
    3eac:	83 30       	cpi	r24, 0x03	; 3
    3eae:	08 f4       	brcc	.+2      	; 0x3eb2 <main+0xf04>
    3eb0:	d1 c8       	rjmp	.-3678   	; 0x3054 <main+0xa6>
{
	/*Super Loop*/
	while(1)
	{
		/*Login */
	while(!Login_Trial)
    3eb2:	80 91 3f 01 	lds	r24, 0x013F
    3eb6:	88 23       	and	r24, r24
    3eb8:	09 f4       	brne	.+2      	; 0x3ebc <main+0xf0e>
    3eba:	8a c8       	rjmp	.-3820   	; 0x2fd0 <main+0x22>
    3ebc:	cd c1       	rjmp	.+922    	; 0x4258 <main+0x12aa>
}
}
	}

	/*While ID & Password Correct*/
while(Login_state)
    3ebe:	80 e0       	ldi	r24, 0x00	; 0
    3ec0:	90 e0       	ldi	r25, 0x00	; 0
    3ec2:	aa ef       	ldi	r26, 0xFA	; 250
    3ec4:	b4 e4       	ldi	r27, 0x44	; 68
    3ec6:	89 8f       	std	Y+25, r24	; 0x19
    3ec8:	9a 8f       	std	Y+26, r25	; 0x1a
    3eca:	ab 8f       	std	Y+27, r26	; 0x1b
    3ecc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ece:	69 8d       	ldd	r22, Y+25	; 0x19
    3ed0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ed2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ed4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ed6:	20 e0       	ldi	r18, 0x00	; 0
    3ed8:	30 e0       	ldi	r19, 0x00	; 0
    3eda:	4a ef       	ldi	r20, 0xFA	; 250
    3edc:	54 e4       	ldi	r21, 0x44	; 68
    3ede:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ee2:	dc 01       	movw	r26, r24
    3ee4:	cb 01       	movw	r24, r22
    3ee6:	8d 8b       	std	Y+21, r24	; 0x15
    3ee8:	9e 8b       	std	Y+22, r25	; 0x16
    3eea:	af 8b       	std	Y+23, r26	; 0x17
    3eec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3eee:	6d 89       	ldd	r22, Y+21	; 0x15
    3ef0:	7e 89       	ldd	r23, Y+22	; 0x16
    3ef2:	8f 89       	ldd	r24, Y+23	; 0x17
    3ef4:	98 8d       	ldd	r25, Y+24	; 0x18
    3ef6:	20 e0       	ldi	r18, 0x00	; 0
    3ef8:	30 e0       	ldi	r19, 0x00	; 0
    3efa:	40 e8       	ldi	r20, 0x80	; 128
    3efc:	5f e3       	ldi	r21, 0x3F	; 63
    3efe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f02:	88 23       	and	r24, r24
    3f04:	2c f4       	brge	.+10     	; 0x3f10 <main+0xf62>
		__ticks = 1;
    3f06:	81 e0       	ldi	r24, 0x01	; 1
    3f08:	90 e0       	ldi	r25, 0x00	; 0
    3f0a:	9c 8b       	std	Y+20, r25	; 0x14
    3f0c:	8b 8b       	std	Y+19, r24	; 0x13
    3f0e:	3f c0       	rjmp	.+126    	; 0x3f8e <main+0xfe0>
	else if (__tmp > 65535)
    3f10:	6d 89       	ldd	r22, Y+21	; 0x15
    3f12:	7e 89       	ldd	r23, Y+22	; 0x16
    3f14:	8f 89       	ldd	r24, Y+23	; 0x17
    3f16:	98 8d       	ldd	r25, Y+24	; 0x18
    3f18:	20 e0       	ldi	r18, 0x00	; 0
    3f1a:	3f ef       	ldi	r19, 0xFF	; 255
    3f1c:	4f e7       	ldi	r20, 0x7F	; 127
    3f1e:	57 e4       	ldi	r21, 0x47	; 71
    3f20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f24:	18 16       	cp	r1, r24
    3f26:	4c f5       	brge	.+82     	; 0x3f7a <main+0xfcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f28:	69 8d       	ldd	r22, Y+25	; 0x19
    3f2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f30:	20 e0       	ldi	r18, 0x00	; 0
    3f32:	30 e0       	ldi	r19, 0x00	; 0
    3f34:	40 e2       	ldi	r20, 0x20	; 32
    3f36:	51 e4       	ldi	r21, 0x41	; 65
    3f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f3c:	dc 01       	movw	r26, r24
    3f3e:	cb 01       	movw	r24, r22
    3f40:	bc 01       	movw	r22, r24
    3f42:	cd 01       	movw	r24, r26
    3f44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f48:	dc 01       	movw	r26, r24
    3f4a:	cb 01       	movw	r24, r22
    3f4c:	9c 8b       	std	Y+20, r25	; 0x14
    3f4e:	8b 8b       	std	Y+19, r24	; 0x13
    3f50:	0f c0       	rjmp	.+30     	; 0x3f70 <main+0xfc2>
    3f52:	88 ec       	ldi	r24, 0xC8	; 200
    3f54:	90 e0       	ldi	r25, 0x00	; 0
    3f56:	9a 8b       	std	Y+18, r25	; 0x12
    3f58:	89 8b       	std	Y+17, r24	; 0x11
    3f5a:	89 89       	ldd	r24, Y+17	; 0x11
    3f5c:	9a 89       	ldd	r25, Y+18	; 0x12
    3f5e:	01 97       	sbiw	r24, 0x01	; 1
    3f60:	f1 f7       	brne	.-4      	; 0x3f5e <main+0xfb0>
    3f62:	9a 8b       	std	Y+18, r25	; 0x12
    3f64:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f66:	8b 89       	ldd	r24, Y+19	; 0x13
    3f68:	9c 89       	ldd	r25, Y+20	; 0x14
    3f6a:	01 97       	sbiw	r24, 0x01	; 1
    3f6c:	9c 8b       	std	Y+20, r25	; 0x14
    3f6e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f70:	8b 89       	ldd	r24, Y+19	; 0x13
    3f72:	9c 89       	ldd	r25, Y+20	; 0x14
    3f74:	00 97       	sbiw	r24, 0x00	; 0
    3f76:	69 f7       	brne	.-38     	; 0x3f52 <main+0xfa4>
    3f78:	14 c0       	rjmp	.+40     	; 0x3fa2 <main+0xff4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f7a:	6d 89       	ldd	r22, Y+21	; 0x15
    3f7c:	7e 89       	ldd	r23, Y+22	; 0x16
    3f7e:	8f 89       	ldd	r24, Y+23	; 0x17
    3f80:	98 8d       	ldd	r25, Y+24	; 0x18
    3f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f86:	dc 01       	movw	r26, r24
    3f88:	cb 01       	movw	r24, r22
    3f8a:	9c 8b       	std	Y+20, r25	; 0x14
    3f8c:	8b 8b       	std	Y+19, r24	; 0x13
    3f8e:	8b 89       	ldd	r24, Y+19	; 0x13
    3f90:	9c 89       	ldd	r25, Y+20	; 0x14
    3f92:	98 8b       	std	Y+16, r25	; 0x10
    3f94:	8f 87       	std	Y+15, r24	; 0x0f
    3f96:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f98:	98 89       	ldd	r25, Y+16	; 0x10
    3f9a:	01 97       	sbiw	r24, 0x01	; 1
    3f9c:	f1 f7       	brne	.-4      	; 0x3f9a <main+0xfec>
    3f9e:	98 8b       	std	Y+16, r25	; 0x10
    3fa0:	8f 87       	std	Y+15, r24	; 0x0f
{
	/*Display Options On LCD*/

	_delay_ms(2000);
	HLCD_VoidSendCommand(0x01);
    3fa2:	81 e0       	ldi	r24, 0x01	; 1
    3fa4:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
	HLCD_VoidSetPostion(0,0);
    3fa8:	80 e0       	ldi	r24, 0x00	; 0
    3faa:	60 e0       	ldi	r22, 0x00	; 0
    3fac:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <HLCD_VoidSetPostion>
	HLCD_VoidSendString("a:O/D");
    3fb0:	81 ec       	ldi	r24, 0xC1	; 193
    3fb2:	90 e0       	ldi	r25, 0x00	; 0
    3fb4:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <HLCD_VoidSendString>
	HLCD_VoidSetPostion(0,7);
    3fb8:	80 e0       	ldi	r24, 0x00	; 0
    3fba:	67 e0       	ldi	r22, 0x07	; 7
    3fbc:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <HLCD_VoidSetPostion>
	HLCD_VoidSendString("b:C/D");
    3fc0:	87 ec       	ldi	r24, 0xC7	; 199
    3fc2:	90 e0       	ldi	r25, 0x00	; 0
    3fc4:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <HLCD_VoidSendString>
	HLCD_VoidSetPostion(1,0);
    3fc8:	81 e0       	ldi	r24, 0x01	; 1
    3fca:	60 e0       	ldi	r22, 0x00	; 0
    3fcc:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <HLCD_VoidSetPostion>
	HLCD_VoidSendString("c:Temp");
    3fd0:	8d ec       	ldi	r24, 0xCD	; 205
    3fd2:	90 e0       	ldi	r25, 0x00	; 0
    3fd4:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <HLCD_VoidSendString>
	HLCD_VoidSetPostion(1,9);
    3fd8:	81 e0       	ldi	r24, 0x01	; 1
    3fda:	69 e0       	ldi	r22, 0x09	; 9
    3fdc:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <HLCD_VoidSetPostion>
	HLCD_VoidSendString("<<");
    3fe0:	84 ed       	ldi	r24, 0xD4	; 212
    3fe2:	90 e0       	ldi	r25, 0x00	; 0
    3fe4:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <HLCD_VoidSendString>



	Data=URT_Recevier();
    3fe8:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <URT_Recevier>
    3fec:	80 93 42 01 	sts	0x0142, r24
	if(Data=='a')
    3ff0:	80 91 42 01 	lds	r24, 0x0142
    3ff4:	81 36       	cpi	r24, 0x61	; 97
    3ff6:	81 f5       	brne	.+96     	; 0x4058 <main+0x10aa>
	{
		if(Door_State==Closed)
    3ff8:	80 91 40 01 	lds	r24, 0x0140
    3ffc:	88 23       	and	r24, r24
    3ffe:	d9 f4       	brne	.+54     	; 0x4036 <main+0x1088>
		{
			MDIO_VoidSetPinDirection(PORTB,3,OUTPUT);
    4000:	81 e0       	ldi	r24, 0x01	; 1
    4002:	63 e0       	ldi	r22, 0x03	; 3
    4004:	41 e0       	ldi	r20, 0x01	; 1
    4006:	0e 94 98 10 	call	0x2130	; 0x2130 <MDIO_VoidSetPinDirection>
		HLCD_VoidSendCommand(0x01);
    400a:	81 e0       	ldi	r24, 0x01	; 1
    400c:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
		URT_SendString("Open Door");
    4010:	87 ed       	ldi	r24, 0xD7	; 215
    4012:	90 e0       	ldi	r25, 0x00	; 0
    4014:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <URT_SendString>
		HLCD_VoidSetPostion(0,0);
    4018:	80 e0       	ldi	r24, 0x00	; 0
    401a:	60 e0       	ldi	r22, 0x00	; 0
    401c:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <HLCD_VoidSetPostion>
		HLCD_VoidSendString("Open Door");
    4020:	87 ed       	ldi	r24, 0xD7	; 215
    4022:	90 e0       	ldi	r25, 0x00	; 0
    4024:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <HLCD_VoidSendString>
		TIM0_FastPWM_Set_DutyCycle(13);
    4028:	8d e0       	ldi	r24, 0x0D	; 13
    402a:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <TIM0_FastPWM_Set_DutyCycle>
		Door_State=Open;
    402e:	81 e0       	ldi	r24, 0x01	; 1
    4030:	80 93 40 01 	sts	0x0140, r24
    4034:	11 c1       	rjmp	.+546    	; 0x4258 <main+0x12aa>

		}
		else if(Door_State==Open)
    4036:	80 91 40 01 	lds	r24, 0x0140
    403a:	81 30       	cpi	r24, 0x01	; 1
    403c:	09 f0       	breq	.+2      	; 0x4040 <main+0x1092>
    403e:	0c c1       	rjmp	.+536    	; 0x4258 <main+0x12aa>
		{
			HLCD_VoidSendCommand(0x01);
    4040:	81 e0       	ldi	r24, 0x01	; 1
    4042:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
						HLCD_VoidSetPostion(0,0);
    4046:	80 e0       	ldi	r24, 0x00	; 0
    4048:	60 e0       	ldi	r22, 0x00	; 0
    404a:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <HLCD_VoidSetPostion>
						HLCD_VoidSendString("Door Already Open");
    404e:	81 ee       	ldi	r24, 0xE1	; 225
    4050:	90 e0       	ldi	r25, 0x00	; 0
    4052:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <HLCD_VoidSendString>
    4056:	00 c1       	rjmp	.+512    	; 0x4258 <main+0x12aa>
		}

	}

	else if(Data=='b')
    4058:	80 91 42 01 	lds	r24, 0x0142
    405c:	82 36       	cpi	r24, 0x62	; 98
    405e:	79 f5       	brne	.+94     	; 0x40be <main+0x1110>
	{
		if(Door_State==Open)
    4060:	80 91 40 01 	lds	r24, 0x0140
    4064:	81 30       	cpi	r24, 0x01	; 1
    4066:	d1 f4       	brne	.+52     	; 0x409c <main+0x10ee>
		{
			MDIO_VoidSetPinDirection(PORTB,3,OUTPUT);
    4068:	81 e0       	ldi	r24, 0x01	; 1
    406a:	63 e0       	ldi	r22, 0x03	; 3
    406c:	41 e0       	ldi	r20, 0x01	; 1
    406e:	0e 94 98 10 	call	0x2130	; 0x2130 <MDIO_VoidSetPinDirection>
		HLCD_VoidSendCommand(0x01);
    4072:	81 e0       	ldi	r24, 0x01	; 1
    4074:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
		URT_SendString("Close Door");
    4078:	83 ef       	ldi	r24, 0xF3	; 243
    407a:	90 e0       	ldi	r25, 0x00	; 0
    407c:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <URT_SendString>
		HLCD_VoidSetPostion(0,0);
    4080:	80 e0       	ldi	r24, 0x00	; 0
    4082:	60 e0       	ldi	r22, 0x00	; 0
    4084:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <HLCD_VoidSetPostion>
		HLCD_VoidSendString("Close Door");
    4088:	83 ef       	ldi	r24, 0xF3	; 243
    408a:	90 e0       	ldi	r25, 0x00	; 0
    408c:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <HLCD_VoidSendString>
		TIM0_FastPWM_Set_DutyCycle(75);
    4090:	8b e4       	ldi	r24, 0x4B	; 75
    4092:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <TIM0_FastPWM_Set_DutyCycle>
		Door_State=Closed;
    4096:	10 92 40 01 	sts	0x0140, r1
    409a:	de c0       	rjmp	.+444    	; 0x4258 <main+0x12aa>



		}
		else if(Door_State==Closed)
    409c:	80 91 40 01 	lds	r24, 0x0140
    40a0:	88 23       	and	r24, r24
    40a2:	09 f0       	breq	.+2      	; 0x40a6 <main+0x10f8>
    40a4:	d9 c0       	rjmp	.+434    	; 0x4258 <main+0x12aa>
		{
			HLCD_VoidSendCommand(0x01);
    40a6:	81 e0       	ldi	r24, 0x01	; 1
    40a8:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
			HLCD_VoidSetPostion(0,0);
    40ac:	80 e0       	ldi	r24, 0x00	; 0
    40ae:	60 e0       	ldi	r22, 0x00	; 0
    40b0:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <HLCD_VoidSetPostion>
			HLCD_VoidSendString("Door Already Closed");
    40b4:	8e ef       	ldi	r24, 0xFE	; 254
    40b6:	90 e0       	ldi	r25, 0x00	; 0
    40b8:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <HLCD_VoidSendString>
    40bc:	cd c0       	rjmp	.+410    	; 0x4258 <main+0x12aa>
		}


	}
	else if(Data=='c')
    40be:	80 91 42 01 	lds	r24, 0x0142
    40c2:	83 36       	cpi	r24, 0x63	; 99
    40c4:	09 f0       	breq	.+2      	; 0x40c8 <main+0x111a>
    40c6:	c0 c0       	rjmp	.+384    	; 0x4248 <main+0x129a>
	{
		static u16 Temp=0;
		static u16 Digital_ADC=0;

		HLCD_VoidSendCommand(0x01);
    40c8:	81 e0       	ldi	r24, 0x01	; 1
    40ca:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
				Digital_ADC=ADC_ReadData(ADC_CH_LM);
    40ce:	84 e0       	ldi	r24, 0x04	; 4
    40d0:	0e 94 62 10 	call	0x20c4	; 0x20c4 <ADC_ReadData>
    40d4:	90 93 44 01 	sts	0x0144, r25
    40d8:	80 93 43 01 	sts	0x0143, r24
				Temp=(Digital_ADC*5000ul)/1024;
    40dc:	80 91 43 01 	lds	r24, 0x0143
    40e0:	90 91 44 01 	lds	r25, 0x0144
    40e4:	cc 01       	movw	r24, r24
    40e6:	a0 e0       	ldi	r26, 0x00	; 0
    40e8:	b0 e0       	ldi	r27, 0x00	; 0
    40ea:	28 e8       	ldi	r18, 0x88	; 136
    40ec:	33 e1       	ldi	r19, 0x13	; 19
    40ee:	40 e0       	ldi	r20, 0x00	; 0
    40f0:	50 e0       	ldi	r21, 0x00	; 0
    40f2:	bc 01       	movw	r22, r24
    40f4:	cd 01       	movw	r24, r26
    40f6:	0e 94 d6 21 	call	0x43ac	; 0x43ac <__mulsi3>
    40fa:	dc 01       	movw	r26, r24
    40fc:	cb 01       	movw	r24, r22
    40fe:	07 2e       	mov	r0, r23
    4100:	7a e0       	ldi	r23, 0x0A	; 10
    4102:	b6 95       	lsr	r27
    4104:	a7 95       	ror	r26
    4106:	97 95       	ror	r25
    4108:	87 95       	ror	r24
    410a:	7a 95       	dec	r23
    410c:	d1 f7       	brne	.-12     	; 0x4102 <main+0x1154>
    410e:	70 2d       	mov	r23, r0
    4110:	90 93 46 01 	sts	0x0146, r25
    4114:	80 93 45 01 	sts	0x0145, r24
				Temp/=10;
    4118:	80 91 45 01 	lds	r24, 0x0145
    411c:	90 91 46 01 	lds	r25, 0x0146
    4120:	2a e0       	ldi	r18, 0x0A	; 10
    4122:	30 e0       	ldi	r19, 0x00	; 0
    4124:	b9 01       	movw	r22, r18
    4126:	0e 94 f5 21 	call	0x43ea	; 0x43ea <__udivmodhi4>
    412a:	cb 01       	movw	r24, r22
    412c:	90 93 46 01 	sts	0x0146, r25
    4130:	80 93 45 01 	sts	0x0145, r24
				HLCD_VoidSetPostion(0,0);
    4134:	80 e0       	ldi	r24, 0x00	; 0
    4136:	60 e0       	ldi	r22, 0x00	; 0
    4138:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <HLCD_VoidSetPostion>
				HLCD_VoidSendString("Temp:");
    413c:	82 e1       	ldi	r24, 0x12	; 18
    413e:	91 e0       	ldi	r25, 0x01	; 1
    4140:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <HLCD_VoidSendString>
				HLCD_VoidSendNumber(Temp);
    4144:	80 91 45 01 	lds	r24, 0x0145
    4148:	90 91 46 01 	lds	r25, 0x0146
    414c:	cc 01       	movw	r24, r24
    414e:	a0 e0       	ldi	r26, 0x00	; 0
    4150:	b0 e0       	ldi	r27, 0x00	; 0
    4152:	bc 01       	movw	r22, r24
    4154:	cd 01       	movw	r24, r26
    4156:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <HLCD_VoidSendNumber>
				HLCD_VoidSendString("C");
    415a:	88 e1       	ldi	r24, 0x18	; 24
    415c:	91 e0       	ldi	r25, 0x01	; 1
    415e:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <HLCD_VoidSendString>
    4162:	80 e0       	ldi	r24, 0x00	; 0
    4164:	90 e0       	ldi	r25, 0x00	; 0
    4166:	aa e7       	ldi	r26, 0x7A	; 122
    4168:	b5 e4       	ldi	r27, 0x45	; 69
    416a:	8b 87       	std	Y+11, r24	; 0x0b
    416c:	9c 87       	std	Y+12, r25	; 0x0c
    416e:	ad 87       	std	Y+13, r26	; 0x0d
    4170:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4172:	6b 85       	ldd	r22, Y+11	; 0x0b
    4174:	7c 85       	ldd	r23, Y+12	; 0x0c
    4176:	8d 85       	ldd	r24, Y+13	; 0x0d
    4178:	9e 85       	ldd	r25, Y+14	; 0x0e
    417a:	20 e0       	ldi	r18, 0x00	; 0
    417c:	30 e0       	ldi	r19, 0x00	; 0
    417e:	4a ef       	ldi	r20, 0xFA	; 250
    4180:	54 e4       	ldi	r21, 0x44	; 68
    4182:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4186:	dc 01       	movw	r26, r24
    4188:	cb 01       	movw	r24, r22
    418a:	8f 83       	std	Y+7, r24	; 0x07
    418c:	98 87       	std	Y+8, r25	; 0x08
    418e:	a9 87       	std	Y+9, r26	; 0x09
    4190:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4192:	6f 81       	ldd	r22, Y+7	; 0x07
    4194:	78 85       	ldd	r23, Y+8	; 0x08
    4196:	89 85       	ldd	r24, Y+9	; 0x09
    4198:	9a 85       	ldd	r25, Y+10	; 0x0a
    419a:	20 e0       	ldi	r18, 0x00	; 0
    419c:	30 e0       	ldi	r19, 0x00	; 0
    419e:	40 e8       	ldi	r20, 0x80	; 128
    41a0:	5f e3       	ldi	r21, 0x3F	; 63
    41a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41a6:	88 23       	and	r24, r24
    41a8:	2c f4       	brge	.+10     	; 0x41b4 <main+0x1206>
		__ticks = 1;
    41aa:	81 e0       	ldi	r24, 0x01	; 1
    41ac:	90 e0       	ldi	r25, 0x00	; 0
    41ae:	9e 83       	std	Y+6, r25	; 0x06
    41b0:	8d 83       	std	Y+5, r24	; 0x05
    41b2:	3f c0       	rjmp	.+126    	; 0x4232 <main+0x1284>
	else if (__tmp > 65535)
    41b4:	6f 81       	ldd	r22, Y+7	; 0x07
    41b6:	78 85       	ldd	r23, Y+8	; 0x08
    41b8:	89 85       	ldd	r24, Y+9	; 0x09
    41ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    41bc:	20 e0       	ldi	r18, 0x00	; 0
    41be:	3f ef       	ldi	r19, 0xFF	; 255
    41c0:	4f e7       	ldi	r20, 0x7F	; 127
    41c2:	57 e4       	ldi	r21, 0x47	; 71
    41c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41c8:	18 16       	cp	r1, r24
    41ca:	4c f5       	brge	.+82     	; 0x421e <main+0x1270>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    41ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    41d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    41d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    41d4:	20 e0       	ldi	r18, 0x00	; 0
    41d6:	30 e0       	ldi	r19, 0x00	; 0
    41d8:	40 e2       	ldi	r20, 0x20	; 32
    41da:	51 e4       	ldi	r21, 0x41	; 65
    41dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41e0:	dc 01       	movw	r26, r24
    41e2:	cb 01       	movw	r24, r22
    41e4:	bc 01       	movw	r22, r24
    41e6:	cd 01       	movw	r24, r26
    41e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41ec:	dc 01       	movw	r26, r24
    41ee:	cb 01       	movw	r24, r22
    41f0:	9e 83       	std	Y+6, r25	; 0x06
    41f2:	8d 83       	std	Y+5, r24	; 0x05
    41f4:	0f c0       	rjmp	.+30     	; 0x4214 <main+0x1266>
    41f6:	88 ec       	ldi	r24, 0xC8	; 200
    41f8:	90 e0       	ldi	r25, 0x00	; 0
    41fa:	9c 83       	std	Y+4, r25	; 0x04
    41fc:	8b 83       	std	Y+3, r24	; 0x03
    41fe:	8b 81       	ldd	r24, Y+3	; 0x03
    4200:	9c 81       	ldd	r25, Y+4	; 0x04
    4202:	01 97       	sbiw	r24, 0x01	; 1
    4204:	f1 f7       	brne	.-4      	; 0x4202 <main+0x1254>
    4206:	9c 83       	std	Y+4, r25	; 0x04
    4208:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    420a:	8d 81       	ldd	r24, Y+5	; 0x05
    420c:	9e 81       	ldd	r25, Y+6	; 0x06
    420e:	01 97       	sbiw	r24, 0x01	; 1
    4210:	9e 83       	std	Y+6, r25	; 0x06
    4212:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4214:	8d 81       	ldd	r24, Y+5	; 0x05
    4216:	9e 81       	ldd	r25, Y+6	; 0x06
    4218:	00 97       	sbiw	r24, 0x00	; 0
    421a:	69 f7       	brne	.-38     	; 0x41f6 <main+0x1248>
    421c:	1d c0       	rjmp	.+58     	; 0x4258 <main+0x12aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    421e:	6f 81       	ldd	r22, Y+7	; 0x07
    4220:	78 85       	ldd	r23, Y+8	; 0x08
    4222:	89 85       	ldd	r24, Y+9	; 0x09
    4224:	9a 85       	ldd	r25, Y+10	; 0x0a
    4226:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    422a:	dc 01       	movw	r26, r24
    422c:	cb 01       	movw	r24, r22
    422e:	9e 83       	std	Y+6, r25	; 0x06
    4230:	8d 83       	std	Y+5, r24	; 0x05
    4232:	8d 81       	ldd	r24, Y+5	; 0x05
    4234:	9e 81       	ldd	r25, Y+6	; 0x06
    4236:	9a 83       	std	Y+2, r25	; 0x02
    4238:	89 83       	std	Y+1, r24	; 0x01
    423a:	89 81       	ldd	r24, Y+1	; 0x01
    423c:	9a 81       	ldd	r25, Y+2	; 0x02
    423e:	01 97       	sbiw	r24, 0x01	; 1
    4240:	f1 f7       	brne	.-4      	; 0x423e <main+0x1290>
    4242:	9a 83       	std	Y+2, r25	; 0x02
    4244:	89 83       	std	Y+1, r24	; 0x01
    4246:	08 c0       	rjmp	.+16     	; 0x4258 <main+0x12aa>
				_delay_ms(4000);

	}

	else if(Data=='<')
    4248:	80 91 42 01 	lds	r24, 0x0142
    424c:	8c 33       	cpi	r24, 0x3C	; 60
    424e:	21 f4       	brne	.+8      	; 0x4258 <main+0x12aa>
	{
		Login_state=OUT;
    4250:	10 92 41 01 	sts	0x0141, r1
		Login_Trial=False;
    4254:	10 92 3f 01 	sts	0x013F, r1
}
}
	}

	/*While ID & Password Correct*/
while(Login_state)
    4258:	80 91 41 01 	lds	r24, 0x0141
    425c:	88 23       	and	r24, r24
    425e:	09 f0       	breq	.+2      	; 0x4262 <main+0x12b4>
    4260:	2e ce       	rjmp	.-932    	; 0x3ebe <main+0xf10>
    4262:	27 ce       	rjmp	.-946    	; 0x3eb2 <main+0xf04>

00004264 <ID_CHECK.1351>:
	}
}

/*ID Check Function*/
void ID_CHECK(void)
{
    4264:	2f 92       	push	r2
    4266:	3f 92       	push	r3
    4268:	df 93       	push	r29
    426a:	cf 93       	push	r28
    426c:	00 d0       	rcall	.+0      	; 0x426e <ID_CHECK.1351+0xa>
    426e:	0f 92       	push	r0
    4270:	cd b7       	in	r28, 0x3d	; 61
    4272:	de b7       	in	r29, 0x3e	; 62
    4274:	3b 82       	std	Y+3, r3	; 0x03
    4276:	2a 82       	std	Y+2, r2	; 0x02
	ID=0;
    4278:	ea 81       	ldd	r30, Y+2	; 0x02
    427a:	fb 81       	ldd	r31, Y+3	; 0x03
    427c:	16 82       	std	Z+6, r1	; 0x06
	HLCD_VoidSendCommand(0x01);
    427e:	81 e0       	ldi	r24, 0x01	; 1
    4280:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
	HLCD_VoidSetPostion(0,0);
    4284:	80 e0       	ldi	r24, 0x00	; 0
    4286:	60 e0       	ldi	r22, 0x00	; 0
    4288:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <HLCD_VoidSetPostion>
	HLCD_VoidSendString("ID:");
    428c:	8a e1       	ldi	r24, 0x1A	; 26
    428e:	91 e0       	ldi	r25, 0x01	; 1
    4290:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <HLCD_VoidSendString>
	for(u8 i=0;i<=3;i++)
    4294:	19 82       	std	Y+1, r1	; 0x01
    4296:	2c c0       	rjmp	.+88     	; 0x42f0 <ID_CHECK.1351+0x8c>
	{
		/*Get ID From User*/
		ID=URT_Recevier();
    4298:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <URT_Recevier>
    429c:	ea 81       	ldd	r30, Y+2	; 0x02
    429e:	fb 81       	ldd	r31, Y+3	; 0x03
    42a0:	86 83       	std	Z+6, r24	; 0x06
        URT_Transmitte(IDTrue[i]);
    42a2:	89 81       	ldd	r24, Y+1	; 0x01
    42a4:	88 2f       	mov	r24, r24
    42a6:	90 e0       	ldi	r25, 0x00	; 0
    42a8:	88 0f       	add	r24, r24
    42aa:	99 1f       	adc	r25, r25
    42ac:	ea 81       	ldd	r30, Y+2	; 0x02
    42ae:	fb 81       	ldd	r31, Y+3	; 0x03
    42b0:	e8 0f       	add	r30, r24
    42b2:	f9 1f       	adc	r31, r25
    42b4:	80 81       	ld	r24, Z
    42b6:	91 81       	ldd	r25, Z+1	; 0x01
    42b8:	0e 94 84 17 	call	0x2f08	; 0x2f08 <URT_Transmitte>
        /*Display ID On LCD*/
        HLCD_VoidSendChar(ID);
    42bc:	ea 81       	ldd	r30, Y+2	; 0x02
    42be:	fb 81       	ldd	r31, Y+3	; 0x03
    42c0:	86 81       	ldd	r24, Z+6	; 0x06
    42c2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <HLCD_VoidSendChar>
        /*Store ID In Array*/
        IDTrue[i]=ID;
    42c6:	89 81       	ldd	r24, Y+1	; 0x01
    42c8:	48 2f       	mov	r20, r24
    42ca:	50 e0       	ldi	r21, 0x00	; 0
    42cc:	ea 81       	ldd	r30, Y+2	; 0x02
    42ce:	fb 81       	ldd	r31, Y+3	; 0x03
    42d0:	86 81       	ldd	r24, Z+6	; 0x06
    42d2:	88 2f       	mov	r24, r24
    42d4:	90 e0       	ldi	r25, 0x00	; 0
    42d6:	9c 01       	movw	r18, r24
    42d8:	ca 01       	movw	r24, r20
    42da:	88 0f       	add	r24, r24
    42dc:	99 1f       	adc	r25, r25
    42de:	ea 81       	ldd	r30, Y+2	; 0x02
    42e0:	fb 81       	ldd	r31, Y+3	; 0x03
    42e2:	e8 0f       	add	r30, r24
    42e4:	f9 1f       	adc	r31, r25
    42e6:	31 83       	std	Z+1, r19	; 0x01
    42e8:	20 83       	st	Z, r18
{
	ID=0;
	HLCD_VoidSendCommand(0x01);
	HLCD_VoidSetPostion(0,0);
	HLCD_VoidSendString("ID:");
	for(u8 i=0;i<=3;i++)
    42ea:	89 81       	ldd	r24, Y+1	; 0x01
    42ec:	8f 5f       	subi	r24, 0xFF	; 255
    42ee:	89 83       	std	Y+1, r24	; 0x01
    42f0:	89 81       	ldd	r24, Y+1	; 0x01
    42f2:	84 30       	cpi	r24, 0x04	; 4
    42f4:	88 f2       	brcs	.-94     	; 0x4298 <ID_CHECK.1351+0x34>
        /*Display ID On LCD*/
        HLCD_VoidSendChar(ID);
        /*Store ID In Array*/
        IDTrue[i]=ID;
	}
}
    42f6:	0f 90       	pop	r0
    42f8:	0f 90       	pop	r0
    42fa:	0f 90       	pop	r0
    42fc:	cf 91       	pop	r28
    42fe:	df 91       	pop	r29
    4300:	3f 90       	pop	r3
    4302:	2f 90       	pop	r2
    4304:	08 95       	ret

00004306 <Pass_Check.1344>:
u8 ID=0;
u8 Pass=0;

/*Password Check Function*/
void Pass_Check(void)
{
    4306:	2f 92       	push	r2
    4308:	3f 92       	push	r3
    430a:	df 93       	push	r29
    430c:	cf 93       	push	r28
    430e:	00 d0       	rcall	.+0      	; 0x4310 <Pass_Check.1344+0xa>
    4310:	0f 92       	push	r0
    4312:	cd b7       	in	r28, 0x3d	; 61
    4314:	de b7       	in	r29, 0x3e	; 62
    4316:	3b 82       	std	Y+3, r3	; 0x03
    4318:	2a 82       	std	Y+2, r2	; 0x02
	Pass=0;
    431a:	ea 81       	ldd	r30, Y+2	; 0x02
    431c:	fb 81       	ldd	r31, Y+3	; 0x03
    431e:	15 86       	std	Z+13, r1	; 0x0d

	HLCD_VoidSendCommand(0x01);
    4320:	81 e0       	ldi	r24, 0x01	; 1
    4322:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
	HLCD_VoidSetPostion(0,0);
    4326:	80 e0       	ldi	r24, 0x00	; 0
    4328:	60 e0       	ldi	r22, 0x00	; 0
    432a:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <HLCD_VoidSetPostion>
	HLCD_VoidSendString("Password:");
    432e:	8e e1       	ldi	r24, 0x1E	; 30
    4330:	91 e0       	ldi	r25, 0x01	; 1
    4332:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <HLCD_VoidSendString>
	for(u8 i=0;i<=3;i++)
    4336:	19 82       	std	Y+1, r1	; 0x01
    4338:	2e c0       	rjmp	.+92     	; 0x4396 <Pass_Check.1344+0x90>
	{
		/*Get Password From User*/
		Pass=URT_Recevier();
    433a:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <URT_Recevier>
    433e:	ea 81       	ldd	r30, Y+2	; 0x02
    4340:	fb 81       	ldd	r31, Y+3	; 0x03
    4342:	85 87       	std	Z+13, r24	; 0x0d
        URT_Transmitte(PassTrue[i]);
    4344:	89 81       	ldd	r24, Y+1	; 0x01
    4346:	88 2f       	mov	r24, r24
    4348:	90 e0       	ldi	r25, 0x00	; 0
    434a:	88 0f       	add	r24, r24
    434c:	99 1f       	adc	r25, r25
    434e:	2a 81       	ldd	r18, Y+2	; 0x02
    4350:	3b 81       	ldd	r19, Y+3	; 0x03
    4352:	82 0f       	add	r24, r18
    4354:	93 1f       	adc	r25, r19
    4356:	fc 01       	movw	r30, r24
    4358:	37 96       	adiw	r30, 0x07	; 7
    435a:	80 81       	ld	r24, Z
    435c:	91 81       	ldd	r25, Z+1	; 0x01
    435e:	0e 94 84 17 	call	0x2f08	; 0x2f08 <URT_Transmitte>
        /*Display Password On LCD*/
        HLCD_VoidSendChar('*');
    4362:	8a e2       	ldi	r24, 0x2A	; 42
    4364:	0e 94 4f 06 	call	0xc9e	; 0xc9e <HLCD_VoidSendChar>
        /*Store Password In Array*/
        PassTrue[i]=Pass;
    4368:	89 81       	ldd	r24, Y+1	; 0x01
    436a:	28 2f       	mov	r18, r24
    436c:	30 e0       	ldi	r19, 0x00	; 0
    436e:	ea 81       	ldd	r30, Y+2	; 0x02
    4370:	fb 81       	ldd	r31, Y+3	; 0x03
    4372:	85 85       	ldd	r24, Z+13	; 0x0d
    4374:	88 2f       	mov	r24, r24
    4376:	90 e0       	ldi	r25, 0x00	; 0
    4378:	ac 01       	movw	r20, r24
    437a:	c9 01       	movw	r24, r18
    437c:	88 0f       	add	r24, r24
    437e:	99 1f       	adc	r25, r25
    4380:	2a 81       	ldd	r18, Y+2	; 0x02
    4382:	3b 81       	ldd	r19, Y+3	; 0x03
    4384:	82 0f       	add	r24, r18
    4386:	93 1f       	adc	r25, r19
    4388:	fc 01       	movw	r30, r24
    438a:	37 96       	adiw	r30, 0x07	; 7
    438c:	51 83       	std	Z+1, r21	; 0x01
    438e:	40 83       	st	Z, r20
	Pass=0;

	HLCD_VoidSendCommand(0x01);
	HLCD_VoidSetPostion(0,0);
	HLCD_VoidSendString("Password:");
	for(u8 i=0;i<=3;i++)
    4390:	89 81       	ldd	r24, Y+1	; 0x01
    4392:	8f 5f       	subi	r24, 0xFF	; 255
    4394:	89 83       	std	Y+1, r24	; 0x01
    4396:	89 81       	ldd	r24, Y+1	; 0x01
    4398:	84 30       	cpi	r24, 0x04	; 4
    439a:	78 f2       	brcs	.-98     	; 0x433a <Pass_Check.1344+0x34>
        /*Display Password On LCD*/
        HLCD_VoidSendChar('*');
        /*Store Password In Array*/
        PassTrue[i]=Pass;
	}
}
    439c:	0f 90       	pop	r0
    439e:	0f 90       	pop	r0
    43a0:	0f 90       	pop	r0
    43a2:	cf 91       	pop	r28
    43a4:	df 91       	pop	r29
    43a6:	3f 90       	pop	r3
    43a8:	2f 90       	pop	r2
    43aa:	08 95       	ret

000043ac <__mulsi3>:
    43ac:	62 9f       	mul	r22, r18
    43ae:	d0 01       	movw	r26, r0
    43b0:	73 9f       	mul	r23, r19
    43b2:	f0 01       	movw	r30, r0
    43b4:	82 9f       	mul	r24, r18
    43b6:	e0 0d       	add	r30, r0
    43b8:	f1 1d       	adc	r31, r1
    43ba:	64 9f       	mul	r22, r20
    43bc:	e0 0d       	add	r30, r0
    43be:	f1 1d       	adc	r31, r1
    43c0:	92 9f       	mul	r25, r18
    43c2:	f0 0d       	add	r31, r0
    43c4:	83 9f       	mul	r24, r19
    43c6:	f0 0d       	add	r31, r0
    43c8:	74 9f       	mul	r23, r20
    43ca:	f0 0d       	add	r31, r0
    43cc:	65 9f       	mul	r22, r21
    43ce:	f0 0d       	add	r31, r0
    43d0:	99 27       	eor	r25, r25
    43d2:	72 9f       	mul	r23, r18
    43d4:	b0 0d       	add	r27, r0
    43d6:	e1 1d       	adc	r30, r1
    43d8:	f9 1f       	adc	r31, r25
    43da:	63 9f       	mul	r22, r19
    43dc:	b0 0d       	add	r27, r0
    43de:	e1 1d       	adc	r30, r1
    43e0:	f9 1f       	adc	r31, r25
    43e2:	bd 01       	movw	r22, r26
    43e4:	cf 01       	movw	r24, r30
    43e6:	11 24       	eor	r1, r1
    43e8:	08 95       	ret

000043ea <__udivmodhi4>:
    43ea:	aa 1b       	sub	r26, r26
    43ec:	bb 1b       	sub	r27, r27
    43ee:	51 e1       	ldi	r21, 0x11	; 17
    43f0:	07 c0       	rjmp	.+14     	; 0x4400 <__udivmodhi4_ep>

000043f2 <__udivmodhi4_loop>:
    43f2:	aa 1f       	adc	r26, r26
    43f4:	bb 1f       	adc	r27, r27
    43f6:	a6 17       	cp	r26, r22
    43f8:	b7 07       	cpc	r27, r23
    43fa:	10 f0       	brcs	.+4      	; 0x4400 <__udivmodhi4_ep>
    43fc:	a6 1b       	sub	r26, r22
    43fe:	b7 0b       	sbc	r27, r23

00004400 <__udivmodhi4_ep>:
    4400:	88 1f       	adc	r24, r24
    4402:	99 1f       	adc	r25, r25
    4404:	5a 95       	dec	r21
    4406:	a9 f7       	brne	.-22     	; 0x43f2 <__udivmodhi4_loop>
    4408:	80 95       	com	r24
    440a:	90 95       	com	r25
    440c:	bc 01       	movw	r22, r24
    440e:	cd 01       	movw	r24, r26
    4410:	08 95       	ret

00004412 <__udivmodsi4>:
    4412:	a1 e2       	ldi	r26, 0x21	; 33
    4414:	1a 2e       	mov	r1, r26
    4416:	aa 1b       	sub	r26, r26
    4418:	bb 1b       	sub	r27, r27
    441a:	fd 01       	movw	r30, r26
    441c:	0d c0       	rjmp	.+26     	; 0x4438 <__udivmodsi4_ep>

0000441e <__udivmodsi4_loop>:
    441e:	aa 1f       	adc	r26, r26
    4420:	bb 1f       	adc	r27, r27
    4422:	ee 1f       	adc	r30, r30
    4424:	ff 1f       	adc	r31, r31
    4426:	a2 17       	cp	r26, r18
    4428:	b3 07       	cpc	r27, r19
    442a:	e4 07       	cpc	r30, r20
    442c:	f5 07       	cpc	r31, r21
    442e:	20 f0       	brcs	.+8      	; 0x4438 <__udivmodsi4_ep>
    4430:	a2 1b       	sub	r26, r18
    4432:	b3 0b       	sbc	r27, r19
    4434:	e4 0b       	sbc	r30, r20
    4436:	f5 0b       	sbc	r31, r21

00004438 <__udivmodsi4_ep>:
    4438:	66 1f       	adc	r22, r22
    443a:	77 1f       	adc	r23, r23
    443c:	88 1f       	adc	r24, r24
    443e:	99 1f       	adc	r25, r25
    4440:	1a 94       	dec	r1
    4442:	69 f7       	brne	.-38     	; 0x441e <__udivmodsi4_loop>
    4444:	60 95       	com	r22
    4446:	70 95       	com	r23
    4448:	80 95       	com	r24
    444a:	90 95       	com	r25
    444c:	9b 01       	movw	r18, r22
    444e:	ac 01       	movw	r20, r24
    4450:	bd 01       	movw	r22, r26
    4452:	cf 01       	movw	r24, r30
    4454:	08 95       	ret

00004456 <__prologue_saves__>:
    4456:	2f 92       	push	r2
    4458:	3f 92       	push	r3
    445a:	4f 92       	push	r4
    445c:	5f 92       	push	r5
    445e:	6f 92       	push	r6
    4460:	7f 92       	push	r7
    4462:	8f 92       	push	r8
    4464:	9f 92       	push	r9
    4466:	af 92       	push	r10
    4468:	bf 92       	push	r11
    446a:	cf 92       	push	r12
    446c:	df 92       	push	r13
    446e:	ef 92       	push	r14
    4470:	ff 92       	push	r15
    4472:	0f 93       	push	r16
    4474:	1f 93       	push	r17
    4476:	cf 93       	push	r28
    4478:	df 93       	push	r29
    447a:	cd b7       	in	r28, 0x3d	; 61
    447c:	de b7       	in	r29, 0x3e	; 62
    447e:	ca 1b       	sub	r28, r26
    4480:	db 0b       	sbc	r29, r27
    4482:	0f b6       	in	r0, 0x3f	; 63
    4484:	f8 94       	cli
    4486:	de bf       	out	0x3e, r29	; 62
    4488:	0f be       	out	0x3f, r0	; 63
    448a:	cd bf       	out	0x3d, r28	; 61
    448c:	09 94       	ijmp

0000448e <__epilogue_restores__>:
    448e:	2a 88       	ldd	r2, Y+18	; 0x12
    4490:	39 88       	ldd	r3, Y+17	; 0x11
    4492:	48 88       	ldd	r4, Y+16	; 0x10
    4494:	5f 84       	ldd	r5, Y+15	; 0x0f
    4496:	6e 84       	ldd	r6, Y+14	; 0x0e
    4498:	7d 84       	ldd	r7, Y+13	; 0x0d
    449a:	8c 84       	ldd	r8, Y+12	; 0x0c
    449c:	9b 84       	ldd	r9, Y+11	; 0x0b
    449e:	aa 84       	ldd	r10, Y+10	; 0x0a
    44a0:	b9 84       	ldd	r11, Y+9	; 0x09
    44a2:	c8 84       	ldd	r12, Y+8	; 0x08
    44a4:	df 80       	ldd	r13, Y+7	; 0x07
    44a6:	ee 80       	ldd	r14, Y+6	; 0x06
    44a8:	fd 80       	ldd	r15, Y+5	; 0x05
    44aa:	0c 81       	ldd	r16, Y+4	; 0x04
    44ac:	1b 81       	ldd	r17, Y+3	; 0x03
    44ae:	aa 81       	ldd	r26, Y+2	; 0x02
    44b0:	b9 81       	ldd	r27, Y+1	; 0x01
    44b2:	ce 0f       	add	r28, r30
    44b4:	d1 1d       	adc	r29, r1
    44b6:	0f b6       	in	r0, 0x3f	; 63
    44b8:	f8 94       	cli
    44ba:	de bf       	out	0x3e, r29	; 62
    44bc:	0f be       	out	0x3f, r0	; 63
    44be:	cd bf       	out	0x3d, r28	; 61
    44c0:	ed 01       	movw	r28, r26
    44c2:	08 95       	ret

000044c4 <_exit>:
    44c4:	f8 94       	cli

000044c6 <__stop_program>:
    44c6:	ff cf       	rjmp	.-2      	; 0x44c6 <__stop_program>
